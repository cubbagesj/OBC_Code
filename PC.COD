;	Static Name Aliases
;
	TITLE   c:\dmmtest\pc.c
	.286p
INCLUDELIB      LLIBCE
INCLUDELIB	OLDNAMES.LIB
PC_TEXT	SEGMENT  WORD PUBLIC 'CODE'
PC_TEXT	ENDS
_DATA	SEGMENT  WORD PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
PC_TEXT      SEGMENT
	ASSUME	CS: PC_TEXT
	PUBLIC	_PC_DispChar
_PC_DispChar	PROC FAR
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                          PC SUPPORT FUNCTIONS
;|*** *
;|*** *                        (c) Copyright 1992-1998, Jean J. Labrosse, Plantation, FL
;|*** *                                           All Rights Reserved
;|*** *
;|*** * File : PC.C
;|*** * By   : Jean J. Labrosse
;|*** *********************************************************************************************************
;|*** */
;|*** 
;|*** //#include "includes.h"
;|*** #include "pc.h"
;|*** #include <dos.h>
;|*** 
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                               CONSTANTS
;|*** *********************************************************************************************************
;|*** */
;|*** #define  DISP_BASE                  0xB800       /* Base segment of display (0xB800=VGA, 0xB000=Mono)  */
;|*** #define  DISP_MAX_X                     80       /* Maximum number of columns                          */
;|*** #define  DISP_MAX_Y                     25       /* Maximum number of rows                             */
;|*** 
;|*** #if 0
;|*** 
;|*** #define  TICK_T0_8254_CWR             0x43       /* 8254 PIT Control Word Register address.            */
;|*** #define  TICK_T0_8254_CTR0            0x40       /* 8254 PIT Timer 0 Register address.                 */
;|*** #define  TICK_T0_8254_CTR1            0x41       /* 8254 PIT Timer 1 Register address.                 */
;|*** #define  TICK_T0_8254_CTR2            0x42       /* 8254 PIT Timer 2 Register address.                 */
;|*** 
;|*** #define  TICK_T0_8254_CTR0_MODE3      0x36       /* 8254 PIT Binary Mode 3 for Counter 0 control word. */
;|*** #define  TICK_T0_8254_CTR2_MODE0      0xB0       /* 8254 PIT Binary Mode 0 for Counter 2 control word. */
;|*** #define  TICK_T0_8254_CTR2_LATCH      0x80       /* 8254 PIT Latch command control word                */
;|*** 
;|*** #define  VECT_TICK                    0x08       /* Vector number for 82C54 timer tick                 */
;|*** #define  VECT_DOS_CHAIN               0x81       /* Vector number used to chain DOS                    */
;|*** 
;|*** #endif
;|*** 
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                       LOCAL GLOBAL VARIABLES
;|*** *********************************************************************************************************
;|*** */
;|***              
;|*** //static INT16U    PC_ElapsedOverhead;
;|*** //static jmp_buf   PC_JumpBuf;
;|*** //static BOOLEAN   PC_ExitFlag;
;|*** //void           (*PC_TickISR)(void);
;|*** 
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                           DISPLAY A SINGLE CHARACTER AT 'X' & 'Y' COORDINATE
;|*** *
;|*** * Description : This function writes a single character anywhere on the PC's screen.  This function
;|*** *               writes directly to video RAM instead of using the BIOS for speed reasons.  It assumed 
;|*** *               that the video adapter is VGA compatible.  Video RAM starts at absolute address 
;|*** *               0x000B8000.  Each character on the screen is composed of two bytes: the ASCII character 
;|*** *               to appear on the screen followed by a video attribute.  An attribute of 0x07 displays 
;|*** *               the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : x      corresponds to the desired column on the screen.  Valid columns numbers are from
;|*** *                      0 to 79.  Column 0 corresponds to the leftmost column.
;|*** *               y      corresponds to the desired row on the screen.  Valid row numbers are from 0 to 24.
;|*** *                      Line 0 corresponds to the topmost row.
;|*** *               c      Is the ASCII character to display.  You can also specify a character with a 
;|*** *                      numeric value higher than 128.  In this case, special character based graphics
;|*** *                      will be displayed.
;|*** *               color  specifies the foreground/background color to use (see PC.H for available choices)
;|*** *                      and whether the character will blink or not.
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void PC_DispChar (INT8U x, INT8U y, INT8U c, INT8U color)
;|*** {
; Line 79
	*** 000000	c8 06 00 00 		enter	6,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	pscr = -4
;	offset = -6
;	color = 12
;	c = 10
;	y = 8
;	x = 6
;|***     INT8U  far *pscr;
;|***     INT16U      offset;
;|*** 
;|*** 
;|***     offset  = (INT16U)y * DISP_MAX_X * 2 + (INT16U)x * 2;  /* Calculate position on the screen         */
; Line 84
	*** 000006	b0 50 			mov	al,80	;0050H
	*** 000008	f6 66 08 		mul	BYTE PTR [bp+8]	;y
	*** 00000b	8a 4e 06 		mov	cl,BYTE PTR [bp+6]	;x
	*** 00000e	2a ed 			sub	ch,ch
	*** 000010	03 c1 			add	ax,cx
	*** 000012	d1 e0 			shl	ax,1
	*** 000014	89 46 fa 		mov	WORD PTR [bp-6],ax	;offset
;|***     pscr    = (INT8U far *)MK_FP(DISP_BASE, offset);
; Line 85
	*** 000017	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;offset
	*** 00001a	2b d2 			sub	dx,dx
	*** 00001c	2d 00 00 		sub	ax,0
	*** 00001f	81 da 00 48 		sbb	dx,18432	;4800H
	*** 000023	89 46 fc 		mov	WORD PTR [bp-4],ax	;pscr
	*** 000026	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     *pscr++ = c;                                           /* Put character in video RAM               */
; Line 86
	*** 000029	8a 46 0a 		mov	al,BYTE PTR [bp+10]	;c
	*** 00002c	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 00002f	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 000032	26 88 07 		mov	BYTE PTR es:[bx],al
;|***     *pscr   = color;                                       /* Put video attribute in video RAM         */
; Line 87
	*** 000035	8a 46 0c 		mov	al,BYTE PTR [bp+12]	;color
	*** 000038	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 00003b	26 88 07 		mov	BYTE PTR es:[bx],al
;|*** }
; Line 88
					$EX212:
	*** 00003e	5e 			pop	si
	*** 00003f	5f 			pop	di
	*** 000040	c9 			leave	
	*** 000041	cb 			ret	

_PC_DispChar	ENDP
	PUBLIC	_PC_DispClrCol
_PC_DispClrCol	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                            CLEAR A COLUMN
;|*** *
;|*** * Description : This function clears one of the 80 columns on the PC's screen by directly accessing video 
;|*** *               RAM instead of using the BIOS.  It assumed that the video adapter is VGA compatible.  
;|*** *               Video RAM starts at absolute address 0x000B8000.  Each character on the screen is 
;|*** *               composed of two bytes: the ASCII character to appear on the screen followed by a video 
;|*** *               attribute.  An attribute of 0x07 displays the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : x            corresponds to the desired column to clear.  Valid column numbers are from 
;|*** *                            0 to 79.  Column 0 corresponds to the leftmost column.
;|*** *
;|*** *               color        specifies the foreground/background color combination to use 
;|*** *                            (see PC.H for available choices)
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispClrCol (INT8U x, INT8U color)
;|*** {
; Line 110
	*** 000042	c8 06 00 00 		enter	6,0
	*** 000046	57 			push	di
	*** 000047	56 			push	si
;	pscr = -4
;	i = -6
;	color = 8
;	x = 6
;|***     INT8U far *pscr;
;|***     INT8U      i;
;|*** 
;|*** 
;|***     pscr = (INT8U far *)MK_FP(DISP_BASE, (INT16U)x * 2);
; Line 115
	*** 000048	8a 46 06 		mov	al,BYTE PTR [bp+6]	;x
	*** 00004b	2a e4 			sub	ah,ah
	*** 00004d	2b d2 			sub	dx,dx
	*** 00004f	2d 00 00 		sub	ax,0
	*** 000052	81 da 00 24 		sbb	dx,9216	;2400H
	*** 000056	d1 e0 			shl	ax,1
	*** 000058	d1 d2 			rcl	dx,1
	*** 00005a	89 46 fc 		mov	WORD PTR [bp-4],ax	;pscr
	*** 00005d	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     for (i = 0; i < DISP_MAX_Y; i++) {
; Line 116
	*** 000060	c6 46 fa 00 		mov	BYTE PTR [bp-6],0	;i
	*** 000064	e9 03 00 		jmp	$F222
					$FC223:
	*** 000067	fe 46 fa 		inc	BYTE PTR [bp-6]	;i
					$F222:
	*** 00006a	80 7e fa 19 		cmp	BYTE PTR [bp-6],25	;0019H	;i
	*** 00006e	72 03 			jb	$JCC110
	*** 000070	e9 1b 00 		jmp	$FB224
					$JCC110:
;|***         *pscr++ = ' ';                           /* Put ' ' character in video RAM                     */
; Line 117
	*** 000073	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 000076	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 000079	26 c6 07 20 		mov	BYTE PTR es:[bx],32	;0020H
;|***         *pscr   = color;                         /* Put video attribute in video RAM                   */
; Line 118
	*** 00007d	8a 46 08 		mov	al,BYTE PTR [bp+8]	;color
	*** 000080	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 000083	26 88 07 		mov	BYTE PTR es:[bx],al
;|***         pscr    = pscr + DISP_MAX_X * 2;         /* Position on next row                               */
; Line 119
	*** 000086	81 46 fc a0 00 		add	WORD PTR [bp-4],160	;00a0H	;pscr
;|***     }
; Line 120
	*** 00008b	e9 d9 ff 		jmp	$FC223
					$FB224:
;|*** }
; Line 121
					$EX219:
	*** 00008e	5e 			pop	si
	*** 00008f	5f 			pop	di
	*** 000090	c9 			leave	
	*** 000091	cb 			ret	

_PC_DispClrCol	ENDP
	PUBLIC	_PC_DispClrRow
_PC_DispClrRow	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                             CLEAR A ROW
;|*** *
;|*** * Description : This function clears one of the 25 lines on the PC's screen by directly accessing video 
;|*** *               RAM instead of using the BIOS.  It assumed that the video adapter is VGA compatible.  
;|*** *               Video RAM starts at absolute address 0x000B8000.  Each character on the screen is 
;|*** *               composed of two bytes: the ASCII character to appear on the screen followed by a video 
;|*** *               attribute.  An attribute of 0x07 displays the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : y            corresponds to the desired row to clear.  Valid row numbers are from 
;|*** *                            0 to 24.  Row 0 corresponds to the topmost line.
;|*** *
;|*** *               color        specifies the foreground/background color combination to use 
;|*** *                            (see PC.H for available choices)
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispClrRow (INT8U y, INT8U color)
;|*** {
; Line 143
	*** 000092	c8 06 00 00 		enter	6,0
	*** 000096	57 			push	di
	*** 000097	56 			push	si
;	pscr = -4
;	i = -6
;	color = 8
;	y = 6
;|***     INT8U far *pscr;
;|***     INT8U      i;
;|*** 
;|*** 
;|***     pscr = (INT8U far *)MK_FP(DISP_BASE, (INT16U)y * DISP_MAX_X * 2);
; Line 148
	*** 000098	8a 46 06 		mov	al,BYTE PTR [bp+6]	;y
	*** 00009b	2a e4 			sub	ah,ah
	*** 00009d	b9 a0 00 		mov	cx,160	;00a0H
	*** 0000a0	f7 e1 			mul	cx
	*** 0000a2	2d 00 00 		sub	ax,0
	*** 0000a5	81 da 00 48 		sbb	dx,18432	;4800H
	*** 0000a9	89 46 fc 		mov	WORD PTR [bp-4],ax	;pscr
	*** 0000ac	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     for (i = 0; i < DISP_MAX_X; i++) {
; Line 149
	*** 0000af	c6 46 fa 00 		mov	BYTE PTR [bp-6],0	;i
	*** 0000b3	e9 03 00 		jmp	$F232
					$FC233:
	*** 0000b6	fe 46 fa 		inc	BYTE PTR [bp-6]	;i
					$F232:
	*** 0000b9	80 7e fa 50 		cmp	BYTE PTR [bp-6],80	;0050H	;i
	*** 0000bd	72 03 			jb	$JCC189
	*** 0000bf	e9 19 00 		jmp	$FB234
					$JCC189:
;|***         *pscr++ = ' ';                           /* Put ' ' character in video RAM                     */
; Line 150
	*** 0000c2	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 0000c5	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 0000c8	26 c6 07 20 		mov	BYTE PTR es:[bx],32	;0020H
;|***         *pscr++ = color;                         /* Put video attribute in video RAM                   */
; Line 151
	*** 0000cc	8a 46 08 		mov	al,BYTE PTR [bp+8]	;color
	*** 0000cf	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 0000d2	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 0000d5	26 88 07 		mov	BYTE PTR es:[bx],al
;|***     }
; Line 152
	*** 0000d8	e9 db ff 		jmp	$FC233
					$FB234:
;|*** }
; Line 153
					$EX229:
	*** 0000db	5e 			pop	si
	*** 0000dc	5f 			pop	di
	*** 0000dd	c9 			leave	
	*** 0000de	cb 			ret	

_PC_DispClrRow	ENDP
	PUBLIC	_PC_DispClrScr
_PC_DispClrScr	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                              CLEAR SCREEN
;|*** *
;|*** * Description : This function clears the PC's screen by directly accessing video RAM instead of using
;|*** *               the BIOS.  It assumed that the video adapter is VGA compatible.  Video RAM starts at
;|*** *               absolute address 0x000B8000.  Each character on the screen is composed of two bytes:
;|*** *               the ASCII character to appear on the screen followed by a video attribute.  An attribute
;|*** *               of 0x07 displays the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : color   specifies the foreground/background color combination to use 
;|*** *                       (see PC.H for available choices)
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispClrScr (INT8U color)
;|*** {
; Line 172
	*** 0000df	c8 06 00 00 		enter	6,0
	*** 0000e3	57 			push	di
	*** 0000e4	56 			push	si
;	pscr = -4
;	i = -6
;	color = 6
;|***     INT8U  far *pscr;
;|***     INT16U      i;
;|*** 
;|*** 
;|***     pscr = (INT8U far *)MK_FP(DISP_BASE, 0x0000);
; Line 177
	*** 0000e5	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;pscr
	*** 0000ea	c7 46 fe 00 b8 		mov	WORD PTR [bp-2],-18432	;b800H
;|***     for (i = 0; i < (DISP_MAX_X * DISP_MAX_Y); i++) { /* PC display has 80 columns and 25 lines        */
; Line 178
	*** 0000ef	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0	;i
	*** 0000f4	e9 03 00 		jmp	$F240
					$FC241:
	*** 0000f7	ff 46 fa 		inc	WORD PTR [bp-6]	;i
					$F240:
	*** 0000fa	81 7e fa d0 07 		cmp	WORD PTR [bp-6],2000	;07d0H	;i
	*** 0000ff	72 03 			jb	$JCC255
	*** 000101	e9 19 00 		jmp	$FB242
					$JCC255:
;|***         *pscr++ = ' ';                                /* Put ' ' character in video RAM                */
; Line 179
	*** 000104	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 000107	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 00010a	26 c6 07 20 		mov	BYTE PTR es:[bx],32	;0020H
;|***         *pscr++ = color;                              /* Put video attribute in video RAM              */
; Line 180
	*** 00010e	8a 46 06 		mov	al,BYTE PTR [bp+6]	;color
	*** 000111	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 000114	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 000117	26 88 07 		mov	BYTE PTR es:[bx],al
;|***     }
; Line 181
	*** 00011a	e9 da ff 		jmp	$FC241
					$FB242:
;|*** }
; Line 182
					$EX237:
	*** 00011d	5e 			pop	si
	*** 00011e	5f 			pop	di
	*** 00011f	c9 			leave	
	*** 000120	cb 			ret	

_PC_DispClrScr	ENDP
	PUBLIC	_PC_DispStr
_PC_DispStr	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                 DISPLAY A STRING  AT 'X' & 'Y' COORDINATE
;|*** *
;|*** * Description : This function writes an ASCII string anywhere on the PC's screen.  This function writes
;|*** *               directly to video RAM instead of using the BIOS for speed reasons.  It assumed that the 
;|*** *               video adapter is VGA compatible.  Video RAM starts at absolute address 0x000B8000.  Each 
;|*** *               character on the screen is composed of two bytes: the ASCII character to appear on the 
;|*** *               screen followed by a video attribute.  An attribute of 0x07 displays the character in 
;|*** *               WHITE with a black background.
;|*** *
;|*** * Arguments   : x      corresponds to the desired column on the screen.  Valid columns numbers are from
;|*** *                      0 to 79.  Column 0 corresponds to the leftmost column.
;|*** *               y      corresponds to the desired row on the screen.  Valid row numbers are from 0 to 24.
;|*** *                      Line 0 corresponds to the topmost row.
;|*** *               s      Is the ASCII string to display.  You can also specify a string containing 
;|*** *                      characters with numeric values higher than 128.  In this case, special character 
;|*** *                      based graphics will be displayed.
;|*** *               color  specifies the foreground/background color to use (see PC.H for available choices)
;|*** *                      and whether the characters will blink or not.
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispStr (INT8U x, INT8U y, INT8U *s, INT8U color)
;|*** {
; Line 209
	*** 000121	c8 06 00 00 		enter	6,0
	*** 000125	57 			push	di
	*** 000126	56 			push	si
;	pscr = -4
;	offset = -6
;	color = 14
;	s = 10
;	y = 8
;	x = 6
;|***     INT8U  far *pscr;
;|***     INT16U      offset;
;|*** 
;|*** 
;|***     offset  = (INT16U)y * DISP_MAX_X * 2 + (INT16U)x * 2;   /* Calculate position of 1st character     */
; Line 214
	*** 000127	b0 50 			mov	al,80	;0050H
	*** 000129	f6 66 08 		mul	BYTE PTR [bp+8]	;y
	*** 00012c	8a 4e 06 		mov	cl,BYTE PTR [bp+6]	;x
	*** 00012f	2a ed 			sub	ch,ch
	*** 000131	03 c1 			add	ax,cx
	*** 000133	d1 e0 			shl	ax,1
	*** 000135	89 46 fa 		mov	WORD PTR [bp-6],ax	;offset
;|***     pscr    = (INT8U far *)MK_FP(DISP_BASE, offset);
; Line 215
	*** 000138	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;offset
	*** 00013b	2b d2 			sub	dx,dx
	*** 00013d	2d 00 00 		sub	ax,0
	*** 000140	81 da 00 48 		sbb	dx,18432	;4800H
	*** 000144	89 46 fc 		mov	WORD PTR [bp-4],ax	;pscr
	*** 000147	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     while (*s) {
; Line 216
					$FC255:
	*** 00014a	c4 5e 0a 		les	bx,DWORD PTR [bp+10]	;s
	*** 00014d	26 80 3f 00 		cmp	BYTE PTR es:[bx],0
	*** 000151	75 03 			jne	$JCC337
	*** 000153	e9 21 00 		jmp	$FB256
					$JCC337:
;|***         *pscr++ = *s++;                                     /* Put character in video RAM              */
; Line 217
	*** 000156	c4 5e 0a 		les	bx,DWORD PTR [bp+10]	;s
	*** 000159	ff 46 0a 		inc	WORD PTR [bp+10]	;s
	*** 00015c	26 8a 07 		mov	al,BYTE PTR es:[bx]
	*** 00015f	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 000162	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 000165	26 88 07 		mov	BYTE PTR es:[bx],al
;|***         *pscr++ = color;                                    /* Put video attribute in video RAM        */
; Line 218
	*** 000168	8a 46 0e 		mov	al,BYTE PTR [bp+14]	;color
	*** 00016b	c4 5e fc 		les	bx,DWORD PTR [bp-4]	;pscr
	*** 00016e	ff 46 fc 		inc	WORD PTR [bp-4]	;pscr
	*** 000171	26 88 07 		mov	BYTE PTR es:[bx],al
;|***     }
; Line 219
	*** 000174	e9 d3 ff 		jmp	$FC255
					$FB256:
;|*** }
; Line 220
					$EX251:
	*** 000177	5e 			pop	si
	*** 000178	5f 			pop	di
	*** 000179	c9 			leave	
	*** 00017a	cb 			ret	

_PC_DispStr	ENDP
PC_TEXT	ENDS
END
;|*** 
