;	Static Name Aliases
;
	TITLE   c:\dmmtest\esccauto.cpp
	.286p
INCLUDELIB      LLIBCE
INCLUDELIB	OLDNAMES.LIB
ESCCAUTO_TEXT	SEGMENT  WORD PUBLIC 'CODE'
ESCCAUTO_TEXT	ENDS
_DATA	SEGMENT  WORD PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
EXTRN	__inp:FAR
EXTRN	__fmemcpy:FAR
EXTRN	__disable:FAR
EXTRN	__ffree:FAR
EXTRN	__fmalloc:FAR
EXTRN	__dos_setvect:FAR
EXTRN	_inp:FAR
EXTRN	_inpw:FAR
EXTRN	?time_stamp@@ZAXPEUTIMER@@@Z:FAR
EXTRN	_outp:FAR
EXTRN	__enable:FAR
EXTRN	_outpw:FAR
EXTRN	__dos_getvect:FAR
EXTRN	?ln200_buffer@@3QEEE:BYTE
EXTRN	?ln200_new_data@@3IE:WORD
EXTRN	?ln200_data_frame@@3KE:DWORD
EXTRN	?frame@@3KE:DWORD
EXTRN	?ln200_time@@3UTIMER@@E:FWORD
EXTRN	?ln200_rx_num@@3KE:DWORD
_BSS      SEGMENT
PUBLIC  ?t1@@3PEVCescc@@E
?t1@@3PEVCescc@@E	DW 02H DUP (?)
_BSS      ENDS
ESCCAUTO_TEXT      SEGMENT
	ASSUME	CS: ESCCAUTO_TEXT
	PUBLIC	??0Cescc@@REC@XZ	; Cescc::Cescc
??0Cescc@@REC@XZ	PROC FAR	; Cescc::Cescc
;|*** // esccauto.cpp
;|*** 
;|*** // modified 2/25/2004 by jtm
;|*** // removed some code for unused modes
;|*** // improved code style
;|*** // added comments
;|*** // added application-specific code for autonomous model
;|*** // search for "jtm" to find changes from original
;|*** 
;|*** // original code supplied by Carl George
;|*** // of Commtech, Inc., Wichita, KS
;|*** // as a general purpose driver for 
;|*** // the ESCC-104 synchronous serial board
;|*** // check their web site for additional information
;|*** 
;|*** #include "esccauto.h"           
;|*** #include "conio.h"
;|*** #include "stdlib.h"
;|*** #include "malloc.h"
;|*** #include "dos.h"
;|*** #include "memory.h"
;|*** #include "dmmtest.h"
;|*** 
;|*** struct TIMER
;|***   {
;|***   unsigned long high;
;|***   unsigned int  low;
;|***   };
;|*** 
;|*** struct LN200
;|***   {
;|***   unsigned int  new_data;
;|***   long unsigned frame;
;|***   unsigned long time_high;
;|***   unsigned      time_low;
;|***   unsigned      data[16];
;|***   };
;|*** 
;|*** extern unsigned char ln200_buffer[32];
;|*** extern unsigned ln200_new_data;
;|*** extern unsigned long ln200_data_frame;
;|*** extern char pcm[96];
;|*** 
;|*** Cescc *t1; // makes the instance of Cescc class object visible to the ISR
;|***           
;|*** Cescc::Cescc()  // constructor
;|***   {
; Line 47
	*** 000000	c8 04 00 00 		enter	4,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	i = -2
;	j = -4
;	this = 6
;|***   unsigned i,j;
;|***   
;|***   t1 = this;
; Line 50
	*** 000006	8b 46 06 		mov	ax,WORD PTR [bp+6]	;this
	*** 000009	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 00000c	a3 00 00 		mov	WORD PTR ?t1@@3PEVCescc@@E,ax	;t1
	*** 00000f	89 16 02 00 		mov	WORD PTR ?t1@@3PEVCescc@@E+2,dx	;t1
;|***   
;|***   for(i=0;i<MAX_PORTS;i++)
; Line 52
	*** 000013	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000018	e9 03 00 		jmp	$F1419
					$FC1420:
	*** 00001b	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1419:
	*** 00001e	83 7e fe 02 		cmp	WORD PTR [bp-2],2	;i
	*** 000022	72 03 			jb	$JCC34
	*** 000024	e9 40 01 		jmp	$FB1421
					$JCC34:
;|***     {
; Line 53
;|***     port_list[i] = 0;
; Line 54
	*** 000027	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 00002a	d1 e3 			shl	bx,1
	*** 00002c	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00002f	26 c7 00 00 00 		mov	WORD PTR es:[bx][si],0
;|***     port_open_list[i] = 0;                 
; Line 55
	*** 000034	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000037	d1 e6 			shl	si,1
	*** 000039	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00003c	26 c7 40 04 00 00 	mov	WORD PTR es:[bx+4][si],0
;|***     interrupt_list[i] = 0;
; Line 56
	*** 000042	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000045	d1 e6 			shl	si,1
	*** 000047	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00004a	26 c7 40 08 00 00 	mov	WORD PTR es:[bx+8][si],0
;|***     for(j=0;j<MAX_RBUFS;j++)rxbuffer[i][j] = 0;
; Line 57
	*** 000050	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;j
	*** 000055	e9 03 00 		jmp	$F1422
					$FC1423:
	*** 000058	ff 46 fc 		inc	WORD PTR [bp-4]	;j
					$F1422:
	*** 00005b	83 7e fc 10 		cmp	WORD PTR [bp-4],16	;0010H	;j
	*** 00005f	72 03 			jb	$JCC95
	*** 000061	e9 1c 00 		jmp	$FB1424
					$JCC95:
	*** 000064	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000067	c1 e6 04 		shl	si,4
	*** 00006a	03 76 fc 		add	si,WORD PTR [bp-4]	;j
	*** 00006d	c1 e6 02 		shl	si,2
	*** 000070	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000073	2b c0 			sub	ax,ax
	*** 000075	26 89 40 7c 		mov	WORD PTR es:[bx+124][si],ax
	*** 000079	26 89 40 7a 		mov	WORD PTR es:[bx+122][si],ax
	*** 00007d	e9 d8 ff 		jmp	$FC1423
					$FB1424:
;|***     for(j=0;j<MAX_TBUFS;j++)txbuffer[i][j] = 0;
; Line 58
	*** 000080	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;j
	*** 000085	e9 03 00 		jmp	$F1425
					$FC1426:
	*** 000088	ff 46 fc 		inc	WORD PTR [bp-4]	;j
					$F1425:
	*** 00008b	83 7e fc 10 		cmp	WORD PTR [bp-4],16	;0010H	;j
	*** 00008f	72 03 			jb	$JCC143
	*** 000091	e9 1e 00 		jmp	$FB1427
					$JCC143:
	*** 000094	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000097	c1 e6 04 		shl	si,4
	*** 00009a	03 76 fc 		add	si,WORD PTR [bp-4]	;j
	*** 00009d	c1 e6 02 		shl	si,2
	*** 0000a0	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0000a3	2b c0 			sub	ax,ax
	*** 0000a5	26 89 80 fc 00 		mov	WORD PTR es:[bx+252][si],ax
	*** 0000aa	26 89 80 fa 00 		mov	WORD PTR es:[bx+250][si],ax
	*** 0000af	e9 d6 ff 		jmp	$FC1426
					$FB1427:
;|***     timer_status[i] = 0;
; Line 59
	*** 0000b2	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0000b5	d1 e6 			shl	si,1
	*** 0000b7	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0000ba	26 c7 80 8a 01 00 00 	mov	WORD PTR es:[bx+394][si],0
;|***     current_rxbuf[i] = 0;
; Line 60
	*** 0000c1	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0000c4	d1 e6 			shl	si,1
	*** 0000c6	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0000c9	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***     current_txbuf[i] = 0;
; Line 61
	*** 0000d0	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0000d3	d1 e6 			shl	si,1
	*** 0000d5	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0000d8	26 c7 80 7e 01 00 00 	mov	WORD PTR es:[bx+382][si],0
;|***     max_rxbuf[i] = 0;
; Line 62
	*** 0000df	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0000e2	d1 e6 			shl	si,1
	*** 0000e4	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0000e7	26 c7 80 82 01 00 00 	mov	WORD PTR es:[bx+386][si],0
;|***     max_txbuf[i] = 0;
; Line 63
	*** 0000ee	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0000f1	d1 e6 			shl	si,1
	*** 0000f3	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0000f6	26 c7 80 86 01 00 00 	mov	WORD PTR es:[bx+390][si],0
;|***     tx_type[i] = 0x08;
; Line 64
	*** 0000fd	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000100	d1 e6 			shl	si,1
	*** 000102	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000105	26 c7 80 8e 01 08 00 	mov	WORD PTR es:[bx+398][si],8
;|***     istxing[i] = 0; //==1 if a frame is being sent ,==0 if no txing is going on
; Line 65
	*** 00010c	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00010f	d1 e6 			shl	si,1
	*** 000111	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000114	26 c7 80 92 01 00 00 	mov	WORD PTR es:[bx+402][si],0
;|***     port_dmat_list[i] = 0;
; Line 66
	*** 00011b	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00011e	d1 e6 			shl	si,1
	*** 000120	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000123	26 c7 40 0c 00 00 	mov	WORD PTR es:[bx+12][si],0
;|***     port_dmar_list[i] = 0;
; Line 67
	*** 000129	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00012c	d1 e6 			shl	si,1
	*** 00012e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000131	26 c7 40 10 00 00 	mov	WORD PTR es:[bx+16][si],0
;|***     port_status[i] = 0;
; Line 68
	*** 000137	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00013a	d1 e6 			shl	si,1
	*** 00013c	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00013f	26 c7 80 96 01 00 00 	mov	WORD PTR es:[bx+406][si],0
;|***     channel[i] = 0;
; Line 69
	*** 000146	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000149	d1 e6 			shl	si,1
	*** 00014b	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00014e	26 c7 80 9a 01 00 00 	mov	WORD PTR es:[bx+410][si],0
;|***     eopmode[i] = 0;
; Line 70
	*** 000155	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000158	d1 e6 			shl	si,1
	*** 00015a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00015d	26 c7 80 9e 01 00 00 	mov	WORD PTR es:[bx+414][si],0
;|***     }
; Line 71
	*** 000164	e9 b4 fe 		jmp	$FC1420
					$FB1421:
;|***     
;|***   for(i=0;i<16;i++)
; Line 73
	*** 000167	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 00016c	e9 03 00 		jmp	$F1428
					$FC1429:
	*** 00016f	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1428:
	*** 000172	83 7e fe 10 		cmp	WORD PTR [bp-2],16	;0010H	;i
	*** 000176	72 03 			jb	$JCC374
	*** 000178	e9 24 00 		jmp	$FB1430
					$JCC374:
;|***     {
; Line 74
;|***     hooked_irqs[i] = 0;
; Line 75
	*** 00017b	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00017e	d1 e6 			shl	si,1
	*** 000180	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000183	26 c7 40 14 00 00 	mov	WORD PTR es:[bx+20][si],0
;|***     old_service_routines[i] = NULL;
; Line 76
	*** 000189	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00018c	c1 e6 02 		shl	si,2
	*** 00018f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000192	2b c0 			sub	ax,ax
	*** 000194	26 89 40 36 		mov	WORD PTR es:[bx+54][si],ax
	*** 000198	26 89 40 34 		mov	WORD PTR es:[bx+52][si],ax
;|***     }
; Line 77
	*** 00019c	e9 d0 ff 		jmp	$FC1429
					$FB1430:
;|***     
;|***   next_port = 0;
; Line 79
	*** 00019f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0001a2	26 c7 47 74 00 00 	mov	WORD PTR es:[bx+116],0
;|***   next_irq =0;
; Line 80
	*** 0001a8	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0001ab	26 c7 47 76 00 00 	mov	WORD PTR es:[bx+118],0
;|***   upper_irq = 0;
; Line 81
	*** 0001b1	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0001b4	26 c7 47 78 00 00 	mov	WORD PTR es:[bx+120],0
;|*** 
;|***   // not needed once fixed settings PVR reg in init_escc for channela in
;|***   // ln200com.cpp  
;|***   //  outp(0x240 + PCR,inp(0x240 + PCR) & ~0x08);//set DTR to output
;|***   //  outp(0x240 + PVR,inp(0x240 + PVR) | 0x08);//set DTR
;|*** 
;|***   } // end constructor
; Line 88
	*** 0001ba	8b 46 06 		mov	ax,WORD PTR [bp+6]	;this
	*** 0001bd	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 0001c0	e9 00 00 		jmp	$EX1416
					$EX1416:
	*** 0001c3	5e 			pop	si
	*** 0001c4	5f 			pop	di
	*** 0001c5	c9 			leave	
	*** 0001c6	ca 04 00 		ret	4

??0Cescc@@REC@XZ	ENDP
	PUBLIC	??1Cescc@@REC@XZ	; Cescc::~Cescc
??1Cescc@@REC@XZ	PROC FAR	; Cescc::~Cescc
;|*** 
;|*** 
;|*** 
;|*** Cescc::~Cescc()  // destructor
;|***   {
; Line 93
	*** 0001c9	c8 04 00 00 		enter	4,0
	*** 0001cd	57 			push	di
	*** 0001ce	56 			push	si
;	i = -2
;	j = -4
;	this = 6
;|***   unsigned i,j;
;|***   
;|***   //check if any open ports left if so then unhook unterrupts and kill them free any buffers etc
;|***   //printf("in destructor\n\r");
;|***   //walk the port list and turn off ints at the uarts
;|***   for(i=0;i<next_port;i++)
; Line 99
	*** 0001cf	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 0001d4	e9 03 00 		jmp	$F1436
					$FC1437:
	*** 0001d7	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1436:
	*** 0001da	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 0001dd	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0001e0	26 39 47 74 		cmp	WORD PTR es:[bx+116],ax
	*** 0001e4	77 03 			ja	$JCC484
	*** 0001e6	e9 72 02 		jmp	$FB1438
					$JCC484:
;|***     {
; Line 100
;|***     if(port_list[i]!=0)
; Line 101
	*** 0001e9	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 0001ec	d1 e3 			shl	bx,1
	*** 0001ee	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0001f1	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 0001f5	75 03 			jne	$JCC501
	*** 0001f7	e9 5e 02 		jmp	$I1439
					$JCC501:
;|***       {
; Line 102
;|***       outp(port_list[i]+PVR,(inp(port_list[i]+PVR)&0xfe)+channel[i]); //set current channel (a or b)
; Line 103
	*** 0001fa	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 0001fd	d1 e3 			shl	bx,1
	*** 0001ff	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000202	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000205	05 1c 00 		add	ax,28	;001cH
	*** 000208	50 			push	ax
	*** 000209	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00020e	83 c4 02 		add	sp,2
	*** 000211	25 fe 00 		and	ax,254	;00feH
	*** 000214	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000217	81 c3 9a 01 		add	bx,410	;019aH
	*** 00021b	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00021e	d1 e6 			shl	si,1
	*** 000220	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 000223	50 			push	ax
	*** 000224	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 000227	d1 e3 			shl	bx,1
	*** 000229	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00022c	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00022f	05 1c 00 		add	ax,28	;001cH
	*** 000232	50 			push	ax
	*** 000233	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000238	83 c4 04 		add	sp,4
;|***       outp(port_list[i]+IMR0,0xff);//disable interrupts at escc!!!
; Line 104
	*** 00023b	68 ff 00 		push	255	;00ffH
	*** 00023e	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 000241	d1 e3 			shl	bx,1
	*** 000243	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000246	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000249	05 1a 00 		add	ax,26	;001aH
	*** 00024c	50 			push	ax
	*** 00024d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000252	83 c4 04 		add	sp,4
;|***       outp(port_list[i]+IMR1,0xff);
; Line 105
	*** 000255	68 ff 00 		push	255	;00ffH
	*** 000258	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 00025b	d1 e3 			shl	bx,1
	*** 00025d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000260	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000263	05 1b 00 		add	ax,27	;001bH
	*** 000266	50 			push	ax
	*** 000267	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00026c	83 c4 04 		add	sp,4
;|***       outp(port_list[i]+PIM,0xff);
; Line 106
	*** 00026f	68 ff 00 		push	255	;00ffH
	*** 000272	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 000275	d1 e3 			shl	bx,1
	*** 000277	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00027a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00027d	05 1d 00 		add	ax,29	;001dH
	*** 000280	50 			push	ax
	*** 000281	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000286	83 c4 04 		add	sp,4
;|***       //if the port is open we need to free all the allocated buffer spaces
;|***       //ffree ignores NULL arguments so we should be safe freeing all of these pointers
;|***       //as the ones that were allocated will not be null, all others should be NULL!!!
;|***       for(j=0;j<max_rxbuf[i];j++) _ffree(rxbuffer[i][j]);
; Line 110
	*** 000289	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;j
	*** 00028e	e9 03 00 		jmp	$F1440
					$FC1441:
	*** 000291	ff 46 fc 		inc	WORD PTR [bp-4]	;j
					$F1440:
	*** 000294	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;j
	*** 000297	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00029a	81 c3 82 01 		add	bx,386	;0182H
	*** 00029e	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0002a1	d1 e6 			shl	si,1
	*** 0002a3	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0002a6	77 03 			ja	$JCC678
	*** 0002a8	e9 22 00 		jmp	$FB1442
					$JCC678:
	*** 0002ab	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0002ae	c1 e6 04 		shl	si,4
	*** 0002b1	03 76 fc 		add	si,WORD PTR [bp-4]	;j
	*** 0002b4	c1 e6 02 		shl	si,2
	*** 0002b7	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0002ba	26 ff 70 7c 		push	WORD PTR es:[bx+124][si]
	*** 0002be	26 ff 70 7a 		push	WORD PTR es:[bx+122][si]
	*** 0002c2	9a 00 00 00 00 		call	FAR PTR __ffree
	*** 0002c7	83 c4 04 		add	sp,4
	*** 0002ca	e9 c4 ff 		jmp	$FC1441
					$FB1442:
;|***       for(j=0;j<max_txbuf[i];j++) _ffree(txbuffer[i][j]);
; Line 111
	*** 0002cd	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;j
	*** 0002d2	e9 03 00 		jmp	$F1443
					$FC1444:
	*** 0002d5	ff 46 fc 		inc	WORD PTR [bp-4]	;j
					$F1443:
	*** 0002d8	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;j
	*** 0002db	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0002de	81 c3 86 01 		add	bx,390	;0186H
	*** 0002e2	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0002e5	d1 e6 			shl	si,1
	*** 0002e7	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0002ea	77 03 			ja	$JCC746
	*** 0002ec	e9 24 00 		jmp	$FB1445
					$JCC746:
	*** 0002ef	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0002f2	c1 e6 04 		shl	si,4
	*** 0002f5	03 76 fc 		add	si,WORD PTR [bp-4]	;j
	*** 0002f8	c1 e6 02 		shl	si,2
	*** 0002fb	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0002fe	26 ff b0 fc 00 		push	WORD PTR es:[bx+252][si]
	*** 000303	26 ff b0 fa 00 		push	WORD PTR es:[bx+250][si]
	*** 000308	9a 00 00 00 00 		call	FAR PTR __ffree
	*** 00030d	83 c4 04 		add	sp,4
	*** 000310	e9 c2 ff 		jmp	$FC1444
					$FB1445:
;|***       
;|***       if(port_dmat_list[i]!=0)
; Line 113
	*** 000313	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000316	83 c3 0c 		add	bx,12	;000cH
	*** 000319	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00031c	d1 e6 			shl	si,1
	*** 00031e	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 000322	75 03 			jne	$JCC802
	*** 000324	e9 9b 00 		jmp	$I1446
					$JCC802:
;|***         {
; Line 114
;|***         if(port_dmat_list[i]==1) outp(DMA_MASK_LO,5);
; Line 115
	*** 000327	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00032a	83 c3 0c 		add	bx,12	;000cH
	*** 00032d	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000330	d1 e6 			shl	si,1
	*** 000332	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 000336	74 03 			je	$JCC822
	*** 000338	e9 0c 00 		jmp	$I1447
					$JCC822:
	*** 00033b	6a 05 			push	5
	*** 00033d	6a 0a 			push	10	;000aH
	*** 00033f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000344	83 c4 04 		add	sp,4
;|***         if(port_dmat_list[i]==3) outp(DMA_MASK_LO,7);
; Line 116
					$I1447:
	*** 000347	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00034a	83 c3 0c 		add	bx,12	;000cH
	*** 00034d	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000350	d1 e6 			shl	si,1
	*** 000352	26 83 38 03 		cmp	WORD PTR es:[bx][si],3
	*** 000356	74 03 			je	$JCC854
	*** 000358	e9 0c 00 		jmp	$I1448
					$JCC854:
	*** 00035b	6a 07 			push	7
	*** 00035d	6a 0a 			push	10	;000aH
	*** 00035f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000364	83 c4 04 		add	sp,4
;|***         if(port_dmat_list[i]==5) outp(DMA_MASK_HI,5);
; Line 117
					$I1448:
	*** 000367	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00036a	83 c3 0c 		add	bx,12	;000cH
	*** 00036d	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000370	d1 e6 			shl	si,1
	*** 000372	26 83 38 05 		cmp	WORD PTR es:[bx][si],5
	*** 000376	74 03 			je	$JCC886
	*** 000378	e9 0d 00 		jmp	$I1449
					$JCC886:
	*** 00037b	6a 05 			push	5
	*** 00037d	68 d4 00 		push	212	;00d4H
	*** 000380	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000385	83 c4 04 		add	sp,4
;|***         if(port_dmat_list[i]==7) outp(DMA_MASK_HI,7);
; Line 118
					$I1449:
	*** 000388	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00038b	83 c3 0c 		add	bx,12	;000cH
	*** 00038e	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000391	d1 e6 			shl	si,1
	*** 000393	26 83 38 07 		cmp	WORD PTR es:[bx][si],7
	*** 000397	74 03 			je	$JCC919
	*** 000399	e9 0d 00 		jmp	$I1450
					$JCC919:
	*** 00039c	6a 07 			push	7
	*** 00039e	68 d4 00 		push	212	;00d4H
	*** 0003a1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0003a6	83 c4 04 		add	sp,4
;|***         outp(port_list[i]+XBCH,0);//turn DMA off
; Line 119
					$I1450:
	*** 0003a9	6a 00 			push	0
	*** 0003ab	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 0003ae	d1 e3 			shl	bx,1
	*** 0003b0	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0003b3	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0003b6	05 0b 00 		add	ax,11	;000bH
	*** 0003b9	50 			push	ax
	*** 0003ba	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0003bf	83 c4 04 		add	sp,4
;|***         }
; Line 120
;|***         
;|***       if(port_dmar_list[i]!=0)
; Line 122
					$I1446:
	*** 0003c2	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0003c5	83 c3 10 		add	bx,16	;0010H
	*** 0003c8	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0003cb	d1 e6 			shl	si,1
	*** 0003cd	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 0003d1	75 03 			jne	$JCC977
	*** 0003d3	e9 82 00 		jmp	$I1451
					$JCC977:
;|***         {
; Line 123
;|***         if(port_dmar_list[i]==1) outp(DMA_MASK_LO,5);
; Line 124
	*** 0003d6	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0003d9	83 c3 10 		add	bx,16	;0010H
	*** 0003dc	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0003df	d1 e6 			shl	si,1
	*** 0003e1	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 0003e5	74 03 			je	$JCC997
	*** 0003e7	e9 0c 00 		jmp	$I1452
					$JCC997:
	*** 0003ea	6a 05 			push	5
	*** 0003ec	6a 0a 			push	10	;000aH
	*** 0003ee	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0003f3	83 c4 04 		add	sp,4
;|***         if(port_dmar_list[i]==3) outp(DMA_MASK_LO,7);
; Line 125
					$I1452:
	*** 0003f6	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0003f9	83 c3 10 		add	bx,16	;0010H
	*** 0003fc	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0003ff	d1 e6 			shl	si,1
	*** 000401	26 83 38 03 		cmp	WORD PTR es:[bx][si],3
	*** 000405	74 03 			je	$JCC1029
	*** 000407	e9 0c 00 		jmp	$I1453
					$JCC1029:
	*** 00040a	6a 07 			push	7
	*** 00040c	6a 0a 			push	10	;000aH
	*** 00040e	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000413	83 c4 04 		add	sp,4
;|***         if(port_dmar_list[i]==5) outp(DMA_MASK_HI,5);
; Line 126
					$I1453:
	*** 000416	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000419	83 c3 10 		add	bx,16	;0010H
	*** 00041c	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00041f	d1 e6 			shl	si,1
	*** 000421	26 83 38 05 		cmp	WORD PTR es:[bx][si],5
	*** 000425	74 03 			je	$JCC1061
	*** 000427	e9 0d 00 		jmp	$I1454
					$JCC1061:
	*** 00042a	6a 05 			push	5
	*** 00042c	68 d4 00 		push	212	;00d4H
	*** 00042f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000434	83 c4 04 		add	sp,4
;|***         if(port_dmar_list[i]==7) outp(DMA_MASK_HI,7);
; Line 127
					$I1454:
	*** 000437	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00043a	83 c3 10 		add	bx,16	;0010H
	*** 00043d	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000440	d1 e6 			shl	si,1
	*** 000442	26 83 38 07 		cmp	WORD PTR es:[bx][si],7
	*** 000446	74 03 			je	$JCC1094
	*** 000448	e9 0d 00 		jmp	$I1455
					$JCC1094:
	*** 00044b	6a 07 			push	7
	*** 00044d	68 d4 00 		push	212	;00d4H
	*** 000450	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000455	83 c4 04 		add	sp,4
;|***         }
; Line 128
					$I1455:
;|***       }
; Line 129
					$I1451:
;|***     }
; Line 130
					$I1439:
	*** 000458	e9 7c fd 		jmp	$FC1437
					$FB1438:
;|***   
;|***   //walk the hooked IRQ list and replace the ISR's
;|***   for(i=0;i<next_irq;i++)
; Line 133
	*** 00045b	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000460	e9 03 00 		jmp	$F1456
					$FC1457:
	*** 000463	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1456:
	*** 000466	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 000469	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00046c	26 39 47 76 		cmp	WORD PTR es:[bx+118],ax
	*** 000470	77 03 			ja	$JCC1136
	*** 000472	e9 ad 01 		jmp	$FB1458
					$JCC1136:
;|***     {
; Line 134
;|***     if(hooked_irqs[i]<8)
; Line 135
	*** 000475	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000478	83 c3 14 		add	bx,20	;0014H
	*** 00047b	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00047e	d1 e6 			shl	si,1
	*** 000480	26 83 38 08 		cmp	WORD PTR es:[bx][si],8
	*** 000484	72 03 			jb	$JCC1156
	*** 000486	e9 c0 00 		jmp	$I1459
					$JCC1156:
;|***       {
; Line 136
;|***       _dos_setvect(hooked_irqs[i]+8,old_service_routines[i]);
; Line 137
	*** 000489	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00048c	83 c3 34 		add	bx,52	;0034H
	*** 00048f	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000492	c1 e6 02 		shl	si,2
	*** 000495	26 ff 70 02 		push	WORD PTR es:[bx+2][si]
	*** 000499	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00049c	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00049f	83 c3 14 		add	bx,20	;0014H
	*** 0004a2	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0004a5	d1 e6 			shl	si,1
	*** 0004a7	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0004aa	05 08 00 		add	ax,8
	*** 0004ad	50 			push	ax
	*** 0004ae	9a 00 00 00 00 		call	FAR PTR __dos_setvect
	*** 0004b3	83 c4 06 		add	sp,6
;|***       //be nice and mask the IRQ at the PIC...could be bad I suppose... but it is nicer
;|***       j = inp(0x21);
; Line 139
	*** 0004b6	6a 21 			push	33	;0021H
	*** 0004b8	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0004bd	83 c4 02 		add	sp,2
	*** 0004c0	89 46 fc 		mov	WORD PTR [bp-4],ax	;j
;|***       if(hooked_irqs[i] ==3) j = j|0x08;
; Line 140
	*** 0004c3	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0004c6	83 c3 14 		add	bx,20	;0014H
	*** 0004c9	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0004cc	d1 e6 			shl	si,1
	*** 0004ce	26 83 38 03 		cmp	WORD PTR es:[bx][si],3
	*** 0004d2	74 03 			je	$JCC1234
	*** 0004d4	e9 04 00 		jmp	$I1460
					$JCC1234:
	*** 0004d7	83 4e fc 08 		or	WORD PTR [bp-4],8	;j
;|***       if(hooked_irqs[i] ==4) j = j|0x10;
; Line 141
					$I1460:
	*** 0004db	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0004de	83 c3 14 		add	bx,20	;0014H
	*** 0004e1	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0004e4	d1 e6 			shl	si,1
	*** 0004e6	26 83 38 04 		cmp	WORD PTR es:[bx][si],4
	*** 0004ea	74 03 			je	$JCC1258
	*** 0004ec	e9 04 00 		jmp	$I1461
					$JCC1258:
	*** 0004ef	83 4e fc 10 		or	WORD PTR [bp-4],16	;0010H	;j
;|***       if(hooked_irqs[i] ==5) j = j|0x20;
; Line 142
					$I1461:
	*** 0004f3	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0004f6	83 c3 14 		add	bx,20	;0014H
	*** 0004f9	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0004fc	d1 e6 			shl	si,1
	*** 0004fe	26 83 38 05 		cmp	WORD PTR es:[bx][si],5
	*** 000502	74 03 			je	$JCC1282
	*** 000504	e9 04 00 		jmp	$I1462
					$JCC1282:
	*** 000507	83 4e fc 20 		or	WORD PTR [bp-4],32	;0020H	;j
;|***       if(hooked_irqs[i] ==6) j = j|0x40;
; Line 143
					$I1462:
	*** 00050b	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00050e	83 c3 14 		add	bx,20	;0014H
	*** 000511	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000514	d1 e6 			shl	si,1
	*** 000516	26 83 38 06 		cmp	WORD PTR es:[bx][si],6
	*** 00051a	74 03 			je	$JCC1306
	*** 00051c	e9 04 00 		jmp	$I1463
					$JCC1306:
	*** 00051f	83 4e fc 40 		or	WORD PTR [bp-4],64	;0040H	;j
;|***       if(hooked_irqs[i] ==7) j = j|0x80;
; Line 144
					$I1463:
	*** 000523	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000526	83 c3 14 		add	bx,20	;0014H
	*** 000529	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 00052c	d1 e6 			shl	si,1
	*** 00052e	26 83 38 07 		cmp	WORD PTR es:[bx][si],7
	*** 000532	74 03 			je	$JCC1330
	*** 000534	e9 05 00 		jmp	$I1464
					$JCC1330:
	*** 000537	81 4e fc 80 00 		or	WORD PTR [bp-4],128	;0080H	;j
;|***       outp(0x21,j);
; Line 145
					$I1464:
	*** 00053c	ff 76 fc 		push	WORD PTR [bp-4]	;j
	*** 00053f	6a 21 			push	33	;0021H
	*** 000541	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000546	83 c4 04 		add	sp,4
;|***       }
; Line 146
;|***         
;|***     if(hooked_irqs[i]>8)
; Line 148
					$I1459:
	*** 000549	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00054c	83 c3 14 		add	bx,20	;0014H
	*** 00054f	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000552	d1 e6 			shl	si,1
	*** 000554	26 83 38 08 		cmp	WORD PTR es:[bx][si],8
	*** 000558	77 03 			ja	$JCC1368
	*** 00055a	e9 c2 00 		jmp	$I1465
					$JCC1368:
;|***       {    
; Line 149
;|***       _dos_setvect(hooked_irqs[i]-8+0x70,old_service_routines[i]);
; Line 150
	*** 00055d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000560	83 c3 34 		add	bx,52	;0034H
	*** 000563	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000566	c1 e6 02 		shl	si,2
	*** 000569	26 ff 70 02 		push	WORD PTR es:[bx+2][si]
	*** 00056d	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 000570	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000573	83 c3 14 		add	bx,20	;0014H
	*** 000576	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000579	d1 e6 			shl	si,1
	*** 00057b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00057e	05 68 00 		add	ax,104	;0068H
	*** 000581	50 			push	ax
	*** 000582	9a 00 00 00 00 		call	FAR PTR __dos_setvect
	*** 000587	83 c4 06 		add	sp,6
;|***       j = inp(0xa1);
; Line 151
	*** 00058a	68 a1 00 		push	161	;00a1H
	*** 00058d	9a 00 00 00 00 		call	FAR PTR _inp
	*** 000592	83 c4 02 		add	sp,2
	*** 000595	89 46 fc 		mov	WORD PTR [bp-4],ax	;j
;|***       if(hooked_irqs[i] ==9)  j = j|0x02;
; Line 152
	*** 000598	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00059b	83 c3 14 		add	bx,20	;0014H
	*** 00059e	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0005a1	d1 e6 			shl	si,1
	*** 0005a3	26 83 38 09 		cmp	WORD PTR es:[bx][si],9
	*** 0005a7	74 03 			je	$JCC1447
	*** 0005a9	e9 04 00 		jmp	$I1466
					$JCC1447:
	*** 0005ac	83 4e fc 02 		or	WORD PTR [bp-4],2	;j
;|***       if(hooked_irqs[i] ==10) j = j|0x04;
; Line 153
					$I1466:
	*** 0005b0	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0005b3	83 c3 14 		add	bx,20	;0014H
	*** 0005b6	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0005b9	d1 e6 			shl	si,1
	*** 0005bb	26 83 38 0a 		cmp	WORD PTR es:[bx][si],10	;000aH
	*** 0005bf	74 03 			je	$JCC1471
	*** 0005c1	e9 04 00 		jmp	$I1467
					$JCC1471:
	*** 0005c4	83 4e fc 04 		or	WORD PTR [bp-4],4	;j
;|***       if(hooked_irqs[i] ==11) j = j|0x08;
; Line 154
					$I1467:
	*** 0005c8	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0005cb	83 c3 14 		add	bx,20	;0014H
	*** 0005ce	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0005d1	d1 e6 			shl	si,1
	*** 0005d3	26 83 38 0b 		cmp	WORD PTR es:[bx][si],11	;000bH
	*** 0005d7	74 03 			je	$JCC1495
	*** 0005d9	e9 04 00 		jmp	$I1468
					$JCC1495:
	*** 0005dc	83 4e fc 08 		or	WORD PTR [bp-4],8	;j
;|***       if(hooked_irqs[i] ==12) j = j|0x10;
; Line 155
					$I1468:
	*** 0005e0	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0005e3	83 c3 14 		add	bx,20	;0014H
	*** 0005e6	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 0005e9	d1 e6 			shl	si,1
	*** 0005eb	26 83 38 0c 		cmp	WORD PTR es:[bx][si],12	;000cH
	*** 0005ef	74 03 			je	$JCC1519
	*** 0005f1	e9 04 00 		jmp	$I1469
					$JCC1519:
	*** 0005f4	83 4e fc 10 		or	WORD PTR [bp-4],16	;0010H	;j
;|***       if(hooked_irqs[i] ==15) j = j|0x80;
; Line 156
					$I1469:
	*** 0005f8	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0005fb	83 c3 14 		add	bx,20	;0014H
	*** 0005fe	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000601	d1 e6 			shl	si,1
	*** 000603	26 83 38 0f 		cmp	WORD PTR es:[bx][si],15	;000fH
	*** 000607	74 03 			je	$JCC1543
	*** 000609	e9 05 00 		jmp	$I1470
					$JCC1543:
	*** 00060c	81 4e fc 80 00 		or	WORD PTR [bp-4],128	;0080H	;j
;|***       outp(0xa1,j);
; Line 157
					$I1470:
	*** 000611	ff 76 fc 		push	WORD PTR [bp-4]	;j
	*** 000614	68 a1 00 		push	161	;00a1H
	*** 000617	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00061c	83 c4 04 		add	sp,4
;|***       } 
; Line 158
;|***     }
; Line 159
					$I1465:
	*** 00061f	e9 41 fe 		jmp	$FC1457
					$FB1458:
;|***   }  // end destructor
; Line 160
	*** 000622	e9 00 00 		jmp	$EX1433
					$EX1433:
	*** 000625	5e 			pop	si
	*** 000626	5f 			pop	di
	*** 000627	c9 			leave	
	*** 000628	ca 04 00 		ret	4

??1Cescc@@REC@XZ	ENDP
	PUBLIC	?add_port@Cescc@@RECIIIIII@Z	; Cescc::add_port
?add_port@Cescc@@RECIIIIII@Z	PROC FAR	; Cescc::add_port
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::add_port(unsigned base, unsigned chan, unsigned irq, unsigned dmar, unsigned dmat)
;|***   {
; Line 167
	*** 00062b	c8 04 00 00 		enter	4,0
	*** 00062f	57 			push	di
	*** 000630	56 			push	si
;	i = -2
;	avail = -4
;	this = 6
;	base = 18
;	chan = 16
;	irq = 14
;	dmar = 12
;	dmat = 10
;|***   unsigned i;
;|***   unsigned avail;
;|***   
;|***   avail = next_port;      // next_port is reset to 0 in Cescc() contructor
; Line 171
	*** 000631	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000634	26 8b 47 74 		mov	ax,WORD PTR es:[bx+116]
	*** 000638	89 46 fc 		mov	WORD PTR [bp-4],ax	;avail
;|***                           // then incremented at end of this function  
;|***   for(i=0;i<=next_port;i++)
; Line 173
	*** 00063b	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000640	e9 03 00 		jmp	$F1480
					$FC1481:
	*** 000643	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1480:
	*** 000646	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 000649	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00064c	26 39 47 74 		cmp	WORD PTR es:[bx+116],ax
	*** 000650	73 03 			jae	$JCC1616
	*** 000652	e9 1d 00 		jmp	$FB1482
					$JCC1616:
;|***     {
; Line 174
;|***     if(port_list[i]==0)   //port_list is the table of escc base addresses for each port
; Line 175
	*** 000655	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;i
	*** 000658	d1 e3 			shl	bx,1
	*** 00065a	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00065d	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 000661	74 03 			je	$JCC1633
	*** 000663	e9 09 00 		jmp	$I1483
					$JCC1633:
;|***       {                   //find first unused (available) slot in port_list table
; Line 176
;|***       avail = i;          //and use the slot for the port you are adding now
; Line 177
	*** 000666	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 000669	89 46 fc 		mov	WORD PTR [bp-4],ax	;avail
;|***       break;
; Line 178
	*** 00066c	e9 03 00 		jmp	$FB1482
;|***       }
; Line 179
;|***     }
; Line 180
					$I1483:
	*** 00066f	e9 d1 ff 		jmp	$FC1481
					$FB1482:
;|***     
;|***   port_list[avail] = base;            //store port base address
; Line 182
	*** 000672	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;avail
	*** 000675	d1 e3 			shl	bx,1
	*** 000677	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00067a	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 00067d	26 89 00 		mov	WORD PTR es:[bx][si],ax
;|***   interrupt_list[avail] = irq;        //store port irq
; Line 183
	*** 000680	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;irq
	*** 000683	8b 76 fc 		mov	si,WORD PTR [bp-4]	;avail
	*** 000686	d1 e6 			shl	si,1
	*** 000688	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00068b	26 89 40 08 		mov	WORD PTR es:[bx+8][si],ax
;|***   port_dmar_list[avail] = dmar;       //store port rx dma channel
; Line 184
	*** 00068f	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;dmar
	*** 000692	8b 76 fc 		mov	si,WORD PTR [bp-4]	;avail
	*** 000695	d1 e6 			shl	si,1
	*** 000697	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00069a	26 89 40 10 		mov	WORD PTR es:[bx+16][si],ax
;|***   port_dmat_list[avail] = dmat;       //store port tx dma channel                     
; Line 185
	*** 00069e	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;dmat
	*** 0006a1	8b 76 fc 		mov	si,WORD PTR [bp-4]	;avail
	*** 0006a4	d1 e6 			shl	si,1
	*** 0006a6	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0006a9	26 89 40 0c 		mov	WORD PTR es:[bx+12][si],ax
;|***   channel[avail] = chan;              //store port channel number 0 or 1 (A or B)
; Line 186
	*** 0006ad	8b 46 10 		mov	ax,WORD PTR [bp+16]	;chan
	*** 0006b0	8b 76 fc 		mov	si,WORD PTR [bp-4]	;avail
	*** 0006b3	d1 e6 			shl	si,1
	*** 0006b5	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0006b8	26 89 80 9a 01 		mov	WORD PTR es:[bx+410][si],ax
;|*** 
;|***   //set up the ESCC port register so we can access both channels   
;|***   //note this *****MUST***** be the first access to the escc or we can't rely on talking to a specific
;|***   //channel (defaults to channel 1, or the upper channel when bit 0 is defined as an input)
;|***   //this is because bit 0 of the escc universal port is wired to select either channel A or B
;|***   outp(base+PCR,0xe0);  //bit 0 = channel select  (output; 0 selects channel A; 1 selects channel B)
; Line 192
	*** 0006bd	68 e0 00 		push	224	;00e0H
	*** 0006c0	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 0006c3	05 1e 00 		add	ax,30	;001eH
	*** 0006c6	50 			push	ax
	*** 0006c7	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0006cc	83 c4 04 		add	sp,4
;|***             //bit 1 = not used      (output)
;|***             //bit 2 = not used      (output)
;|***             //bit 3 = DTR channel 0   (output)
;|***             //bit 4 = DTR channel 1   (output)
;|***             //bit 5 = DSR channel 0   (input)
;|***             //bit 6 = DSR channel 1   (input)
;|***             //bit 7 = TC for DMA (off ISA bus)(input)
;|***             
;|***   outp(base+IPC,0x03);  //escc int pin must be slave mode active high push pull to work.
; Line 201
	*** 0006cf	6a 03 			push	3
	*** 0006d1	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 0006d4	05 19 00 		add	ax,25	;0019H
	*** 0006d7	50 			push	ax
	*** 0006d8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0006dd	83 c4 04 		add	sp,4
;|***   
;|***   //check current interrupts against ones that are hooked and hook new interrupt if necessary
;|***   for(i=0;i<16;i++)
; Line 204
	*** 0006e0	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 0006e5	e9 03 00 		jmp	$F1484
					$FC1485:
	*** 0006e8	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1484:
	*** 0006eb	83 7e fe 10 		cmp	WORD PTR [bp-2],16	;0010H	;i
	*** 0006ef	72 03 			jb	$JCC1775
	*** 0006f1	e9 1f 00 		jmp	$FB1486
					$JCC1775:
;|***     {
; Line 205
;|***     if(hooked_irqs[i]==irq) goto skip_irqsetup;
; Line 206
	*** 0006f4	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;irq
	*** 0006f7	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0006fa	83 c3 14 		add	bx,20	;0014H
	*** 0006fd	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000700	d1 e6 			shl	si,1
	*** 000702	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 000705	74 03 			je	$JCC1797
	*** 000707	e9 06 00 		jmp	$I1487
					$JCC1797:
	*** 00070a	e9 ee 01 		jmp	$TH161489
	*** 00070d	e9 cf 01 		jmp	$skip_irqsetup1488
;|***     }                                          
; Line 207
					$I1487:
	*** 000710	e9 d5 ff 		jmp	$FC1485
					$FB1486:
;|*** 
;|***   _disable();
; Line 209
	*** 000713	9a 00 00 00 00 		call	FAR PTR __disable
;|***   
;|***   //next_irq reset to 0 at end of Cescc constructor then incremented at end of add_port()
;|***   if(irq<8)
; Line 212
	*** 000718	83 7e 0e 08 		cmp	WORD PTR [bp+14],8	;irq
	*** 00071c	72 03 			jb	$JCC1820
	*** 00071e	e9 f3 00 		jmp	$I1490
					$JCC1820:
;|***     {
; Line 213
;|***     old_service_routines[next_irq] = _dos_getvect(irq+8); //get old vector and save
; Line 214
	*** 000721	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;irq
	*** 000724	05 08 00 		add	ax,8
	*** 000727	50 			push	ax
	*** 000728	9a 00 00 00 00 		call	FAR PTR __dos_getvect
	*** 00072d	83 c4 02 		add	sp,2
	*** 000730	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000733	26 8b 77 76 		mov	si,WORD PTR es:[bx+118]
	*** 000737	c1 e6 02 		shl	si,2
	*** 00073a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00073d	26 89 40 34 		mov	WORD PTR es:[bx+52][si],ax
	*** 000741	26 89 50 36 		mov	WORD PTR es:[bx+54][si],dx
;|***     _dos_setvect(irq+8,escc_isr);   //put in our routine
; Line 215
	*** 000745	68 00 00 		push	SEG ?escc_isr@Cescc@@JEAXXZ	;Cescc::escc_isr
	*** 000748	68 00 00 		push	OFFSET ?escc_isr@Cescc@@JEAXXZ	;Cescc::escc_isr
	*** 00074b	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;irq
	*** 00074e	05 08 00 		add	ax,8
	*** 000751	50 			push	ax
	*** 000752	9a 00 00 00 00 		call	FAR PTR __dos_setvect
	*** 000757	83 c4 06 		add	sp,6
;|***     outp(base+PVR,(inp(base+PVR)&0xfe)+chan); //set current channel (a or b)
; Line 216
	*** 00075a	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 00075d	05 1c 00 		add	ax,28	;001cH
	*** 000760	50 			push	ax
	*** 000761	9a 00 00 00 00 		call	FAR PTR _inp
	*** 000766	83 c4 02 		add	sp,2
	*** 000769	25 fe 00 		and	ax,254	;00feH
	*** 00076c	03 46 10 		add	ax,WORD PTR [bp+16]	;chan
	*** 00076f	50 			push	ax
	*** 000770	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 000773	05 1c 00 		add	ax,28	;001cH
	*** 000776	50 			push	ax
	*** 000777	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00077c	83 c4 04 		add	sp,4
;|***     outp(base+IMR0,0xff);//disable ints from uart
; Line 217
	*** 00077f	68 ff 00 		push	255	;00ffH
	*** 000782	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 000785	05 1a 00 		add	ax,26	;001aH
	*** 000788	50 			push	ax
	*** 000789	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00078e	83 c4 04 		add	sp,4
;|***     outp(base+IMR1,0xff);//disable ints from uart
; Line 218
	*** 000791	68 ff 00 		push	255	;00ffH
	*** 000794	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 000797	05 1b 00 		add	ax,27	;001bH
	*** 00079a	50 			push	ax
	*** 00079b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0007a0	83 c4 04 		add	sp,4
;|***     outp(base+PIM,0xff);//disable ints from universal port
; Line 219
	*** 0007a3	68 ff 00 		push	255	;00ffH
	*** 0007a6	8b 46 12 		mov	ax,WORD PTR [bp+18]	;base
	*** 0007a9	05 1d 00 		add	ax,29	;001dH
	*** 0007ac	50 			push	ax
	*** 0007ad	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0007b2	83 c4 04 		add	sp,4
;|***     i = inp(0x21);
; Line 220
	*** 0007b5	6a 21 			push	33	;0021H
	*** 0007b7	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0007bc	83 c4 02 		add	sp,2
	*** 0007bf	89 46 fe 		mov	WORD PTR [bp-2],ax	;i
;|***     if(irq ==3) i = i&0xf7;
; Line 221
	*** 0007c2	83 7e 0e 03 		cmp	WORD PTR [bp+14],3	;irq
	*** 0007c6	74 03 			je	$JCC1990
	*** 0007c8	e9 05 00 		jmp	$I1491
					$JCC1990:
	*** 0007cb	81 66 fe f7 00 		and	WORD PTR [bp-2],247	;00f7H	;i
;|***     if(irq ==4) i = i&0xef;
; Line 222
					$I1491:
	*** 0007d0	83 7e 0e 04 		cmp	WORD PTR [bp+14],4	;irq
	*** 0007d4	74 03 			je	$JCC2004
	*** 0007d6	e9 05 00 		jmp	$I1492
					$JCC2004:
	*** 0007d9	81 66 fe ef 00 		and	WORD PTR [bp-2],239	;00efH	;i
;|***     if(irq ==5) i = i&0xdf;
; Line 223
					$I1492:
	*** 0007de	83 7e 0e 05 		cmp	WORD PTR [bp+14],5	;irq
	*** 0007e2	74 03 			je	$JCC2018
	*** 0007e4	e9 05 00 		jmp	$I1493
					$JCC2018:
	*** 0007e7	81 66 fe df 00 		and	WORD PTR [bp-2],223	;00dfH	;i
;|***     if(irq ==6) i = i&0xbf;
; Line 224
					$I1493:
	*** 0007ec	83 7e 0e 06 		cmp	WORD PTR [bp+14],6	;irq
	*** 0007f0	74 03 			je	$JCC2032
	*** 0007f2	e9 05 00 		jmp	$I1494
					$JCC2032:
	*** 0007f5	81 66 fe bf 00 		and	WORD PTR [bp-2],191	;00bfH	;i
;|***     if(irq ==7) i = i&0x7f;
; Line 225
					$I1494:
	*** 0007fa	83 7e 0e 07 		cmp	WORD PTR [bp+14],7	;irq
	*** 0007fe	74 03 			je	$JCC2046
	*** 000800	e9 04 00 		jmp	$I1495
					$JCC2046:
	*** 000803	83 66 fe 7f 		and	WORD PTR [bp-2],127	;007fH	;i
;|***     outp(0x21,i);
; Line 226
					$I1495:
	*** 000807	ff 76 fe 		push	WORD PTR [bp-2]	;i
	*** 00080a	6a 21 			push	33	;0021H
	*** 00080c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000811	83 c4 04 		add	sp,4
;|***     }
; Line 227
;|*** 
;|***   if(irq>8)
; Line 229
					$I1490:
	*** 000814	83 7e 0e 08 		cmp	WORD PTR [bp+14],8	;irq
	*** 000818	77 03 			ja	$JCC2072
	*** 00081a	e9 a3 00 		jmp	$I1496
					$JCC2072:
;|***     {
; Line 230
;|***     old_service_routines[next_irq] = _dos_getvect(irq+0x70 -8);
; Line 231
	*** 00081d	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;irq
	*** 000820	05 68 00 		add	ax,104	;0068H
	*** 000823	50 			push	ax
	*** 000824	9a 00 00 00 00 		call	FAR PTR __dos_getvect
	*** 000829	83 c4 02 		add	sp,2
	*** 00082c	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00082f	26 8b 77 76 		mov	si,WORD PTR es:[bx+118]
	*** 000833	c1 e6 02 		shl	si,2
	*** 000836	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000839	26 89 40 34 		mov	WORD PTR es:[bx+52][si],ax
	*** 00083d	26 89 50 36 		mov	WORD PTR es:[bx+54][si],dx
;|***     _dos_setvect(irq+0x70-8,escc_isr);
; Line 232
	*** 000841	68 00 00 		push	SEG ?escc_isr@Cescc@@JEAXXZ	;Cescc::escc_isr
	*** 000844	68 00 00 		push	OFFSET ?escc_isr@Cescc@@JEAXXZ	;Cescc::escc_isr
	*** 000847	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;irq
	*** 00084a	05 68 00 		add	ax,104	;0068H
	*** 00084d	50 			push	ax
	*** 00084e	9a 00 00 00 00 		call	FAR PTR __dos_setvect
	*** 000853	83 c4 06 		add	sp,6
;|***     i = inp(0xa1);
; Line 233
	*** 000856	68 a1 00 		push	161	;00a1H
	*** 000859	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00085e	83 c4 02 		add	sp,2
	*** 000861	89 46 fe 		mov	WORD PTR [bp-2],ax	;i
;|***     if(irq ==9)         i = i&0xfd;
; Line 234
	*** 000864	83 7e 0e 09 		cmp	WORD PTR [bp+14],9	;irq
	*** 000868	74 03 			je	$JCC2152
	*** 00086a	e9 05 00 		jmp	$I1497
					$JCC2152:
	*** 00086d	81 66 fe fd 00 		and	WORD PTR [bp-2],253	;00fdH	;i
;|***     if(irq ==10)        i = i&0xfb;
; Line 235
					$I1497:
	*** 000872	83 7e 0e 0a 		cmp	WORD PTR [bp+14],10	;000aH	;irq
	*** 000876	74 03 			je	$JCC2166
	*** 000878	e9 05 00 		jmp	$I1498
					$JCC2166:
	*** 00087b	81 66 fe fb 00 		and	WORD PTR [bp-2],251	;00fbH	;i
;|***     if(irq ==11)        i = i&0xf7;
; Line 236
					$I1498:
	*** 000880	83 7e 0e 0b 		cmp	WORD PTR [bp+14],11	;000bH	;irq
	*** 000884	74 03 			je	$JCC2180
	*** 000886	e9 05 00 		jmp	$I1499
					$JCC2180:
	*** 000889	81 66 fe f7 00 		and	WORD PTR [bp-2],247	;00f7H	;i
;|***     if(irq ==12)        i = i&0xef;
; Line 237
					$I1499:
	*** 00088e	83 7e 0e 0c 		cmp	WORD PTR [bp+14],12	;000cH	;irq
	*** 000892	74 03 			je	$JCC2194
	*** 000894	e9 05 00 		jmp	$I1500
					$JCC2194:
	*** 000897	81 66 fe ef 00 		and	WORD PTR [bp-2],239	;00efH	;i
;|***     if(irq ==15)        i = i&0x7f;
; Line 238
					$I1500:
	*** 00089c	83 7e 0e 0f 		cmp	WORD PTR [bp+14],15	;000fH	;irq
	*** 0008a0	74 03 			je	$JCC2208
	*** 0008a2	e9 04 00 		jmp	$I1501
					$JCC2208:
	*** 0008a5	83 66 fe 7f 		and	WORD PTR [bp-2],127	;007fH	;i
;|***     outp(0xa1,i);
; Line 239
					$I1501:
	*** 0008a9	ff 76 fe 		push	WORD PTR [bp-2]	;i
	*** 0008ac	68 a1 00 		push	161	;00a1H
	*** 0008af	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0008b4	83 c4 04 		add	sp,4
;|***     upper_irq = 1;
; Line 240
	*** 0008b7	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0008ba	26 c7 47 78 01 00 	mov	WORD PTR es:[bx+120],1
;|***     }
; Line 241
;|***     
;|***   _enable();
; Line 243
					$I1496:
	*** 0008c0	9a 00 00 00 00 		call	FAR PTR __enable
;|*** 
;|***   hooked_irqs[next_irq] = irq;
; Line 245
	*** 0008c5	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;irq
	*** 0008c8	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0008cb	26 8b 77 76 		mov	si,WORD PTR es:[bx+118]
	*** 0008cf	d1 e6 			shl	si,1
	*** 0008d1	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0008d4	26 89 40 14 		mov	WORD PTR es:[bx+20][si],ax
;|***   next_irq++;
; Line 246
	*** 0008d8	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0008db	26 ff 47 76 		inc	WORD PTR es:[bx+118]
;|*** 
;|***   //note we will wait until we get the init_port call before enabling the ints at the uart
;|***   //this will prevent bad things from happening like not having a buffer to put data in !!:)  
;|***   skip_irqsetup:
; Line 250
					$skip_irqsetup1488:
;|***   if(avail==next_port) next_port++;
; Line 251
	*** 0008df	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;avail
	*** 0008e2	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0008e5	26 39 47 74 		cmp	WORD PTR es:[bx+116],ax
	*** 0008e9	74 03 			je	$JCC2281
	*** 0008eb	e9 07 00 		jmp	$I1502
					$JCC2281:
	*** 0008ee	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0008f1	26 ff 47 74 		inc	WORD PTR es:[bx+116]
;|***   return (avail);
; Line 252
					$I1502:
	*** 0008f5	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;avail
	*** 0008f8	e9 03 00 		jmp	$EX1477
;|***   }     //  end add_port()
; Line 253
					$TH161489:
	*** 0008fb	e9 e1 ff 		jmp	$skip_irqsetup1488
					$EX1477:
	*** 0008fe	5e 			pop	si
	*** 0008ff	5f 			pop	di
	*** 000900	c9 			leave	
	*** 000901	ca 0e 00 		ret	14	;0000000eH

?add_port@Cescc@@RECIIIIII@Z	ENDP
	PUBLIC	?kill_port@Cescc@@RECII@Z	; Cescc::kill_port
?kill_port@Cescc@@RECII@Z	PROC FAR	; Cescc::kill_port
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::kill_port(unsigned port)
;|***   {
; Line 259
	*** 000904	c8 02 00 00 		enter	2,0
	*** 000908	57 			push	di
	*** 000909	56 			push	si
;	i = -2
;	this = 6
;	port = 10
;|***   //here we should set the port list stuff to 0, and unhook the irq
;|***   //walk the port list and check the irq to see if any other ports are using it, if not then 
;|***   //unhook the irq, and mask it at the pic
;|***   
;|***   unsigned i;
;|***   
;|***   //free the buffers for this port
;|***   for(i=0;i<max_rxbuf[port];i++)
; Line 267
	*** 00090a	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 00090f	e9 03 00 		jmp	$F1507
					$FC1508:
	*** 000912	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1507:
	*** 000915	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 000918	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00091b	81 c3 82 01 		add	bx,386	;0182H
	*** 00091f	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 000922	d1 e6 			shl	si,1
	*** 000924	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 000927	77 03 			ja	$JCC2343
	*** 000929	e9 3b 00 		jmp	$FB1509
					$JCC2343:
;|***     {
; Line 268
;|***     _ffree(rxbuffer[port][i]);
; Line 269
	*** 00092c	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00092f	c1 e6 04 		shl	si,4
	*** 000932	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000935	c1 e6 02 		shl	si,2
	*** 000938	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00093b	26 ff 70 7c 		push	WORD PTR es:[bx+124][si]
	*** 00093f	26 ff 70 7a 		push	WORD PTR es:[bx+122][si]
	*** 000943	9a 00 00 00 00 		call	FAR PTR __ffree
	*** 000948	83 c4 04 		add	sp,4
;|***     rxbuffer[port][i] = NULL; //wipe them since they are now gone
; Line 270
	*** 00094b	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00094e	c1 e6 04 		shl	si,4
	*** 000951	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000954	c1 e6 02 		shl	si,2
	*** 000957	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00095a	2b c0 			sub	ax,ax
	*** 00095c	26 89 40 7c 		mov	WORD PTR es:[bx+124][si],ax
	*** 000960	26 89 40 7a 		mov	WORD PTR es:[bx+122][si],ax
;|***     }
; Line 271
	*** 000964	e9 ab ff 		jmp	$FC1508
					$FB1509:
;|***     
;|***   for(i=0;i<max_txbuf[port];i++)
; Line 273
	*** 000967	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 00096c	e9 03 00 		jmp	$F1510
					$FC1511:
	*** 00096f	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1510:
	*** 000972	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 000975	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000978	81 c3 86 01 		add	bx,390	;0186H
	*** 00097c	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00097f	d1 e6 			shl	si,1
	*** 000981	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 000984	77 03 			ja	$JCC2436
	*** 000986	e9 3f 00 		jmp	$FB1512
					$JCC2436:
;|***     {
; Line 274
;|***     _ffree(txbuffer[port][i]);
; Line 275
	*** 000989	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00098c	c1 e6 04 		shl	si,4
	*** 00098f	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000992	c1 e6 02 		shl	si,2
	*** 000995	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000998	26 ff b0 fc 00 		push	WORD PTR es:[bx+252][si]
	*** 00099d	26 ff b0 fa 00 		push	WORD PTR es:[bx+250][si]
	*** 0009a2	9a 00 00 00 00 		call	FAR PTR __ffree
	*** 0009a7	83 c4 04 		add	sp,4
;|***     txbuffer[port][i] = NULL;
; Line 276
	*** 0009aa	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0009ad	c1 e6 04 		shl	si,4
	*** 0009b0	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 0009b3	c1 e6 02 		shl	si,2
	*** 0009b6	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0009b9	2b c0 			sub	ax,ax
	*** 0009bb	26 89 80 fc 00 		mov	WORD PTR es:[bx+252][si],ax
	*** 0009c0	26 89 80 fa 00 		mov	WORD PTR es:[bx+250][si],ax
;|***     }
; Line 277
	*** 0009c5	e9 a7 ff 		jmp	$FC1511
					$FB1512:
;|***   
;|***   //we are done with the base address so kill the links
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]); //set current channel (a or b)
; Line 280
	*** 0009c8	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 0009cb	d1 e3 			shl	bx,1
	*** 0009cd	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0009d0	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0009d3	05 1c 00 		add	ax,28	;001cH
	*** 0009d6	50 			push	ax
	*** 0009d7	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0009dc	83 c4 02 		add	sp,2
	*** 0009df	25 fe 00 		and	ax,254	;00feH
	*** 0009e2	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0009e5	81 c3 9a 01 		add	bx,410	;019aH
	*** 0009e9	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0009ec	d1 e6 			shl	si,1
	*** 0009ee	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 0009f1	50 			push	ax
	*** 0009f2	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 0009f5	d1 e3 			shl	bx,1
	*** 0009f7	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0009fa	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0009fd	05 1c 00 		add	ax,28	;001cH
	*** 000a00	50 			push	ax
	*** 000a01	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000a06	83 c4 04 		add	sp,4
;|***   outp(port_list[port]+IMR0,0xff); //turn off channel specific interrupts
; Line 281
	*** 000a09	68 ff 00 		push	255	;00ffH
	*** 000a0c	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 000a0f	d1 e3 			shl	bx,1
	*** 000a11	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000a14	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000a17	05 1a 00 		add	ax,26	;001aH
	*** 000a1a	50 			push	ax
	*** 000a1b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000a20	83 c4 04 		add	sp,4
;|***   outp(port_list[port]+IMR1,0xff);
; Line 282
	*** 000a23	68 ff 00 		push	255	;00ffH
	*** 000a26	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 000a29	d1 e3 			shl	bx,1
	*** 000a2b	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000a2e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000a31	05 1b 00 		add	ax,27	;001bH
	*** 000a34	50 			push	ax
	*** 000a35	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000a3a	83 c4 04 		add	sp,4
;|***   //should also turn off DSR/DTR interrupts here...since we will no longer have the port address
;|***   //after the next line and if it fires we will have a stuck int line.
;|***   //need Interrupt masks stored somewhere since we cannot read them back (write only)
;|*** 
;|***   port_list[port] = 0;
; Line 287
	*** 000a3d	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 000a40	d1 e3 			shl	bx,1
	*** 000a42	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000a45	26 c7 00 00 00 		mov	WORD PTR es:[bx][si],0
;|***   port_open_list[port] = 0;
; Line 288
	*** 000a4a	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 000a4d	d1 e6 			shl	si,1
	*** 000a4f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000a52	26 c7 40 04 00 00 	mov	WORD PTR es:[bx+4][si],0
;|***   port_dmar_list[port] = 0;
; Line 289
	*** 000a58	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 000a5b	d1 e6 			shl	si,1
	*** 000a5d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000a60	26 c7 40 10 00 00 	mov	WORD PTR es:[bx+16][si],0
;|***   port_dmat_list[port] = 0;
; Line 290
	*** 000a66	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 000a69	d1 e6 			shl	si,1
	*** 000a6b	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000a6e	26 c7 40 0c 00 00 	mov	WORD PTR es:[bx+12][si],0
;|***   interrupt_list[port] = 0;
; Line 291
	*** 000a74	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 000a77	d1 e6 			shl	si,1
	*** 000a79	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000a7c	26 c7 40 08 00 00 	mov	WORD PTR es:[bx+8][si],0
;|***   
;|***   if(port == (next_port-1)) next_port--; //if it was the last port then we can safely decrement the
; Line 293
	*** 000a82	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000a85	26 8b 47 74 		mov	ax,WORD PTR es:[bx+116]
	*** 000a89	2b 46 0a 		sub	ax,WORD PTR [bp+10]	;port
	*** 000a8c	48 			dec	ax
	*** 000a8d	74 03 			je	$JCC2701
	*** 000a8f	e9 07 00 		jmp	$I1513
					$JCC2701:
	*** 000a92	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000a95	26 ff 4f 74 		dec	WORD PTR es:[bx+116]
;|***                                          //next_port specifier
;|***   return TRUE;
; Line 295
					$I1513:
	*** 000a99	b8 00 00 		mov	ax,0
	*** 000a9c	e9 00 00 		jmp	$EX1505
;|***   }  // end kill_port()
; Line 296
					$EX1505:
	*** 000a9f	5e 			pop	si
	*** 000aa0	5f 			pop	di
	*** 000aa1	c9 			leave	
	*** 000aa2	ca 06 00 		ret	6

?kill_port@Cescc@@RECII@Z	ENDP
	PUBLIC	?init_port@Cescc@@RECIIIPEUescc_regs@@II@Z	; Cescc::init_port
?init_port@Cescc@@RECIIIPEUescc_regs@@II@Z	PROC FAR	; Cescc::init_port
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::init_port(  unsigned port,
;|***               unsigned opmode,
;|***               struct escc_regs *esccregs,
;|***               unsigned rbufs,
;|***               unsigned tbufs)
;|***   {
; Line 306
	*** 000aa5	c8 06 00 00 		enter	6,0
	*** 000aa9	57 			push	di
	*** 000aaa	56 			push	si
;	timeout_cntr = -6
;	i = -2
;	this = 6
;	port = 20
;	opmode = 18
;	esccregs = 14
;	rbufs = 12
;	tbufs = 10
;|***   //set the port (from the list, make sure it is in the list...) to the settings given
;|***   //probably a good idea to verify all params before continuing
;|***   //set up the registers and reset the 82526 here
;|***   if(rbufs<2) return FALSE;
; Line 310
	*** 000aab	83 7e 0c 02 		cmp	WORD PTR [bp+12],2	;rbufs
	*** 000aaf	72 03 			jb	$JCC2735
	*** 000ab1	e9 06 00 		jmp	$I1521
					$JCC2735:
	*** 000ab4	b8 01 00 		mov	ax,1
	*** 000ab7	e9 51 0b 		jmp	$EX1520
;|***   if(rbufs>MAX_RBUFS) return FALSE;
; Line 311
					$I1521:
	*** 000aba	83 7e 0c 10 		cmp	WORD PTR [bp+12],16	;0010H	;rbufs
	*** 000abe	77 03 			ja	$JCC2750
	*** 000ac0	e9 06 00 		jmp	$I1522
					$JCC2750:
	*** 000ac3	b8 01 00 		mov	ax,1
	*** 000ac6	e9 42 0b 		jmp	$EX1520
;|***   if(tbufs<2) return FALSE;        
; Line 312
					$I1522:
	*** 000ac9	83 7e 0a 02 		cmp	WORD PTR [bp+10],2	;tbufs
	*** 000acd	72 03 			jb	$JCC2765
	*** 000acf	e9 06 00 		jmp	$I1523
					$JCC2765:
	*** 000ad2	b8 01 00 		mov	ax,1
	*** 000ad5	e9 33 0b 		jmp	$EX1520
;|***   if(tbufs>MAX_TBUFS) return FALSE;
; Line 313
					$I1523:
	*** 000ad8	83 7e 0a 10 		cmp	WORD PTR [bp+10],16	;0010H	;tbufs
	*** 000adc	77 03 			ja	$JCC2780
	*** 000ade	e9 06 00 		jmp	$I1524
					$JCC2780:
	*** 000ae1	b8 01 00 		mov	ax,1
	*** 000ae4	e9 24 0b 		jmp	$EX1520
;|***   if((opmode!=OPMODE_HDLC)&&(opmode!=OPMODE_BISYNC)&&(opmode!=OPMODE_ASYNC)) return FALSE;
; Line 314
					$I1524:
	*** 000ae7	83 7e 12 00 		cmp	WORD PTR [bp+18],0	;opmode
	*** 000aeb	75 03 			jne	$JCC2795
	*** 000aed	e9 18 00 		jmp	$I1525
					$JCC2795:
	*** 000af0	83 7e 12 02 		cmp	WORD PTR [bp+18],2	;opmode
	*** 000af4	75 03 			jne	$JCC2804
	*** 000af6	e9 0f 00 		jmp	$I1525
					$JCC2804:
	*** 000af9	83 7e 12 01 		cmp	WORD PTR [bp+18],1	;opmode
	*** 000afd	75 03 			jne	$JCC2813
	*** 000aff	e9 06 00 		jmp	$I1525
					$JCC2813:
	*** 000b02	b8 01 00 		mov	ax,1
	*** 000b05	e9 03 0b 		jmp	$EX1520
;|***   
;|***   //allocate the memory for the buffers
;|***   //unsigned long datasize;      
;|***   unsigned i;
; Line 318
					$I1525:
;|***   for(i=0;i<max_rxbuf[port];i++)
; Line 319
	*** 000b08	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000b0d	e9 03 00 		jmp	$F1527
					$FC1528:
	*** 000b10	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1527:
	*** 000b13	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 000b16	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000b19	81 c3 82 01 		add	bx,386	;0182H
	*** 000b1d	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000b20	d1 e6 			shl	si,1
	*** 000b22	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 000b25	77 03 			ja	$JCC2853
	*** 000b27	e9 3b 00 		jmp	$FB1529
					$JCC2853:
;|***     {
; Line 320
;|***     _ffree(rxbuffer[port][i]);//just in case this isn't the first call to here
; Line 321
	*** 000b2a	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000b2d	c1 e6 04 		shl	si,4
	*** 000b30	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000b33	c1 e6 02 		shl	si,2
	*** 000b36	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000b39	26 ff 70 7c 		push	WORD PTR es:[bx+124][si]
	*** 000b3d	26 ff 70 7a 		push	WORD PTR es:[bx+122][si]
	*** 000b41	9a 00 00 00 00 		call	FAR PTR __ffree
	*** 000b46	83 c4 04 		add	sp,4
;|***     rxbuffer[port][i]=NULL;   
; Line 322
	*** 000b49	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000b4c	c1 e6 04 		shl	si,4
	*** 000b4f	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000b52	c1 e6 02 		shl	si,2
	*** 000b55	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000b58	2b c0 			sub	ax,ax
	*** 000b5a	26 89 40 7c 		mov	WORD PTR es:[bx+124][si],ax
	*** 000b5e	26 89 40 7a 		mov	WORD PTR es:[bx+122][si],ax
;|***     }                       
; Line 323
	*** 000b62	e9 ab ff 		jmp	$FC1528
					$FB1529:
;|***   
;|***   for(i=0;i<max_txbuf[port];i++)
; Line 325
	*** 000b65	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000b6a	e9 03 00 		jmp	$F1530
					$FC1531:
	*** 000b6d	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1530:
	*** 000b70	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 000b73	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000b76	81 c3 86 01 		add	bx,390	;0186H
	*** 000b7a	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000b7d	d1 e6 			shl	si,1
	*** 000b7f	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 000b82	77 03 			ja	$JCC2946
	*** 000b84	e9 3f 00 		jmp	$FB1532
					$JCC2946:
;|***     {
; Line 326
;|***     _ffree(txbuffer[port][i]);//just in case this isn't the first call to here
; Line 327
	*** 000b87	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000b8a	c1 e6 04 		shl	si,4
	*** 000b8d	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000b90	c1 e6 02 		shl	si,2
	*** 000b93	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000b96	26 ff b0 fc 00 		push	WORD PTR es:[bx+252][si]
	*** 000b9b	26 ff b0 fa 00 		push	WORD PTR es:[bx+250][si]
	*** 000ba0	9a 00 00 00 00 		call	FAR PTR __ffree
	*** 000ba5	83 c4 04 		add	sp,4
;|***     txbuffer[port][i]=NULL;
; Line 328
	*** 000ba8	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000bab	c1 e6 04 		shl	si,4
	*** 000bae	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000bb1	c1 e6 02 		shl	si,2
	*** 000bb4	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000bb7	2b c0 			sub	ax,ax
	*** 000bb9	26 89 80 fc 00 		mov	WORD PTR es:[bx+252][si],ax
	*** 000bbe	26 89 80 fa 00 		mov	WORD PTR es:[bx+250][si],ax
;|***     }
; Line 329
	*** 000bc3	e9 a7 ff 		jmp	$FC1531
					$FB1532:
;|*** 
;|***   //datasize = (unsigned long)rbufs * sizeof(struct buf);
;|***   for(i=0;i<rbufs;i++)
; Line 332
	*** 000bc6	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000bcb	e9 03 00 		jmp	$F1533
					$FC1534:
	*** 000bce	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1533:
	*** 000bd1	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;rbufs
	*** 000bd4	39 46 fe 		cmp	WORD PTR [bp-2],ax	;i
	*** 000bd7	72 03 			jb	$JCC3031
	*** 000bd9	e9 47 00 		jmp	$FB1535
					$JCC3031:
;|***     {
; Line 333
;|***     rxbuffer[port][i] = (struct buf huge *)_fmalloc(sizeof(struct buf)); //create rxbuffers for this port
; Line 334
	*** 000bdc	68 06 04 		push	1030	;0406H
	*** 000bdf	9a 00 00 00 00 		call	FAR PTR __fmalloc
	*** 000be4	83 c4 02 		add	sp,2
	*** 000be7	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000bea	c1 e6 04 		shl	si,4
	*** 000bed	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000bf0	c1 e6 02 		shl	si,2
	*** 000bf3	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000bf6	26 89 40 7a 		mov	WORD PTR es:[bx+122][si],ax
	*** 000bfa	26 89 50 7c 		mov	WORD PTR es:[bx+124][si],dx
;|***     if(rxbuffer[port][i]==NULL) return FALSE;                            //something failed
; Line 335
	*** 000bfe	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000c01	c1 e6 04 		shl	si,4
	*** 000c04	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000c07	c1 e6 02 		shl	si,2
	*** 000c0a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000c0d	26 8b 40 7c 		mov	ax,WORD PTR es:[bx+124][si]
	*** 000c11	26 0b 40 7a 		or	ax,WORD PTR es:[bx+122][si]
	*** 000c15	74 03 			je	$JCC3093
	*** 000c17	e9 06 00 		jmp	$I1538
					$JCC3093:
	*** 000c1a	b8 01 00 		mov	ax,1
	*** 000c1d	e9 eb 09 		jmp	$EX1520
;|***     }
; Line 336
					$I1538:
	*** 000c20	e9 ab ff 		jmp	$FC1534
					$FB1535:
;|***   
;|***   //datasize = (unsigned long)tbufs * sizeof(struct buf);
;|***   for(i=0;i<tbufs;i++)
; Line 339
	*** 000c23	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000c28	e9 03 00 		jmp	$F1539
					$FC1540:
	*** 000c2b	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1539:
	*** 000c2e	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;tbufs
	*** 000c31	39 46 fe 		cmp	WORD PTR [bp-2],ax	;i
	*** 000c34	72 03 			jb	$JCC3124
	*** 000c36	e9 4b 00 		jmp	$FB1541
					$JCC3124:
;|***     {
; Line 340
;|***     txbuffer[port][i] = (struct buf huge *)_fmalloc(sizeof(struct buf)); //create txbuffers for this port     
; Line 341
	*** 000c39	68 06 04 		push	1030	;0406H
	*** 000c3c	9a 00 00 00 00 		call	FAR PTR __fmalloc
	*** 000c41	83 c4 02 		add	sp,2
	*** 000c44	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000c47	c1 e6 04 		shl	si,4
	*** 000c4a	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000c4d	c1 e6 02 		shl	si,2
	*** 000c50	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000c53	26 89 80 fa 00 		mov	WORD PTR es:[bx+250][si],ax
	*** 000c58	26 89 90 fc 00 		mov	WORD PTR es:[bx+252][si],dx
;|***     if(txbuffer[port][i]==NULL) return FALSE;
; Line 342
	*** 000c5d	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000c60	c1 e6 04 		shl	si,4
	*** 000c63	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000c66	c1 e6 02 		shl	si,2
	*** 000c69	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000c6c	26 8b 80 fc 00 		mov	ax,WORD PTR es:[bx+252][si]
	*** 000c71	26 0b 80 fa 00 		or	ax,WORD PTR es:[bx+250][si]
	*** 000c76	74 03 			je	$JCC3190
	*** 000c78	e9 06 00 		jmp	$I1544
					$JCC3190:
	*** 000c7b	b8 01 00 		mov	ax,1
	*** 000c7e	e9 8a 09 		jmp	$EX1520
;|***     }
; Line 343
					$I1544:
	*** 000c81	e9 a7 ff 		jmp	$FC1540
					$FB1541:
;|***     
;|***   current_rxbuf[port] = 0;
; Line 345
	*** 000c84	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000c87	d1 e6 			shl	si,1
	*** 000c89	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000c8c	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***   current_txbuf[port] = 0;
; Line 346
	*** 000c93	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000c96	d1 e6 			shl	si,1
	*** 000c98	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000c9b	26 c7 80 7e 01 00 00 	mov	WORD PTR es:[bx+382][si],0
;|***   max_rxbuf[port] = rbufs;
; Line 347
	*** 000ca2	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;rbufs
	*** 000ca5	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000ca8	d1 e6 			shl	si,1
	*** 000caa	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000cad	26 89 80 82 01 		mov	WORD PTR es:[bx+386][si],ax
;|***   max_txbuf[port] = tbufs;
; Line 348
	*** 000cb2	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;tbufs
	*** 000cb5	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000cb8	d1 e6 			shl	si,1
	*** 000cba	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000cbd	26 89 80 86 01 		mov	WORD PTR es:[bx+390][si],ax
;|*** 
;|***   for(i=0;i<rbufs;i++)
; Line 350
	*** 000cc2	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000cc7	e9 03 00 		jmp	$F1545
					$FC1546:
	*** 000cca	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1545:
	*** 000ccd	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;rbufs
	*** 000cd0	39 46 fe 		cmp	WORD PTR [bp-2],ax	;i
	*** 000cd3	72 03 			jb	$JCC3283
	*** 000cd5	e9 4d 00 		jmp	$FB1547
					$JCC3283:
;|***     {
; Line 351
;|***     rxbuffer[port][i]->valid = 0;
; Line 352
	*** 000cd8	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000cdb	c1 e6 04 		shl	si,4
	*** 000cde	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000ce1	c1 e6 02 		shl	si,2
	*** 000ce4	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000ce7	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 000ceb	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***     rxbuffer[port][i]->no_bytes = 0;
; Line 353
	*** 000cf0	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000cf3	c1 e6 04 		shl	si,4
	*** 000cf6	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000cf9	c1 e6 02 		shl	si,2
	*** 000cfc	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000cff	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 000d03	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***     rxbuffer[port][i]->max = 0;
; Line 354
	*** 000d09	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000d0c	c1 e6 04 		shl	si,4
	*** 000d0f	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000d12	c1 e6 02 		shl	si,2
	*** 000d15	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000d18	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 000d1c	26 c7 47 04 00 00 	mov	WORD PTR es:[bx+4],0
;|***     }
; Line 355
	*** 000d22	e9 a5 ff 		jmp	$FC1546
					$FB1547:
;|***   
;|***   for(i=0;i<tbufs;i++)
; Line 357
	*** 000d25	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000d2a	e9 03 00 		jmp	$F1548
					$FC1549:
	*** 000d2d	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1548:
	*** 000d30	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;tbufs
	*** 000d33	39 46 fe 		cmp	WORD PTR [bp-2],ax	;i
	*** 000d36	72 03 			jb	$JCC3382
	*** 000d38	e9 50 00 		jmp	$FB1550
					$JCC3382:
;|***     {
; Line 358
;|***     txbuffer[port][i]->valid = 0;      //valid indicates data (1) or garbage (0)
; Line 359
	*** 000d3b	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000d3e	c1 e6 04 		shl	si,4
	*** 000d41	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000d44	c1 e6 02 		shl	si,2
	*** 000d47	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000d4a	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 000d4f	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***     txbuffer[port][i]->no_bytes = 0;   //no_bytes is the number of bytes in the frame <= FRAME_SIZE
; Line 360
	*** 000d54	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000d57	c1 e6 04 		shl	si,4
	*** 000d5a	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000d5d	c1 e6 02 		shl	si,2
	*** 000d60	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000d63	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 000d68	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***     txbuffer[port][i]->max = 0;        //max is the number of bytes to be tx'ed this time <= 32
; Line 361
	*** 000d6e	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000d71	c1 e6 04 		shl	si,4
	*** 000d74	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 000d77	c1 e6 02 		shl	si,2
	*** 000d7a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000d7d	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 000d82	26 c7 47 04 00 00 	mov	WORD PTR es:[bx+4],0
;|***     }
; Line 362
	*** 000d88	e9 a2 ff 		jmp	$FC1549
					$FB1550:
;|*** 
;|***   //set channel for this port; PVR bit0 selects channel A (bit0 = 0) or B (bit0 = 1)
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);  //select channel A or B
; Line 365
	*** 000d8b	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000d8e	d1 e3 			shl	bx,1
	*** 000d90	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000d93	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000d96	05 1c 00 		add	ax,28	;001cH
	*** 000d99	50 			push	ax
	*** 000d9a	9a 00 00 00 00 		call	FAR PTR _inp
	*** 000d9f	83 c4 02 		add	sp,2
	*** 000da2	25 fe 00 		and	ax,254	;00feH
	*** 000da5	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000da8	81 c3 9a 01 		add	bx,410	;019aH
	*** 000dac	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000daf	d1 e6 			shl	si,1
	*** 000db1	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 000db4	50 			push	ax
	*** 000db5	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000db8	d1 e3 			shl	bx,1
	*** 000dba	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000dbd	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000dc0	05 1c 00 		add	ax,28	;001cH
	*** 000dc3	50 			push	ax
	*** 000dc4	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000dc9	83 c4 04 		add	sp,4
;|*** 
;|***   eopmode[port] = opmode;
; Line 367
	*** 000dcc	8b 46 12 		mov	ax,WORD PTR [bp+18]	;opmode
	*** 000dcf	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000dd2	d1 e6 			shl	si,1
	*** 000dd4	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000dd7	26 89 80 9e 01 		mov	WORD PTR es:[bx+414][si],ax
;|*** 
;|***   if(opmode == OPMODE_ASYNC)    //ASYNC not used by LN200 or biphase-M 5/18/98
; Line 369
	*** 000ddc	83 7e 12 01 		cmp	WORD PTR [bp+18],1	;opmode
	*** 000de0	74 03 			je	$JCC3552
	*** 000de2	e9 7b 01 		jmp	$I1551
					$JCC3552:
;|***     {
; Line 370
;|***     outp(port_list[port]+MODE,esccregs->mode);
; Line 371
	*** 000de5	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000de8	26 ff 77 02 		push	WORD PTR es:[bx+2]
	*** 000dec	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000def	d1 e3 			shl	bx,1
	*** 000df1	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000df4	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000df7	05 02 00 		add	ax,2
	*** 000dfa	50 			push	ax
	*** 000dfb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000e00	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+TIMR,esccregs->timr);
; Line 372
	*** 000e03	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000e06	26 ff 77 04 		push	WORD PTR es:[bx+4]
	*** 000e0a	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000e0d	d1 e3 			shl	bx,1
	*** 000e0f	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000e12	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000e15	05 03 00 		add	ax,3
	*** 000e18	50 			push	ax
	*** 000e19	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000e1e	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+TCR,esccregs->tcr);
; Line 373
	*** 000e21	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000e24	26 ff 77 34 		push	WORD PTR es:[bx+52]
	*** 000e28	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000e2b	d1 e3 			shl	bx,1
	*** 000e2d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000e30	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000e33	05 06 00 		add	ax,6
	*** 000e36	50 			push	ax
	*** 000e37	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000e3c	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+DAFO,esccregs->dafo);
; Line 374
	*** 000e3f	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000e42	26 ff 77 36 		push	WORD PTR es:[bx+54]
	*** 000e46	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000e49	d1 e3 			shl	bx,1
	*** 000e4b	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000e4e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000e51	05 07 00 		add	ax,7
	*** 000e54	50 			push	ax
	*** 000e55	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000e5a	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RFC,esccregs->rfc);
; Line 375
	*** 000e5d	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000e60	26 ff 77 38 		push	WORD PTR es:[bx+56]
	*** 000e64	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000e67	d1 e3 			shl	bx,1
	*** 000e69	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000e6c	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000e6f	05 08 00 		add	ax,8
	*** 000e72	50 			push	ax
	*** 000e73	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000e78	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XBCL,esccregs->xbcl);
; Line 376
	*** 000e7b	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000e7e	26 ff 77 06 		push	WORD PTR es:[bx+6]
	*** 000e82	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000e85	d1 e3 			shl	bx,1
	*** 000e87	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000e8a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000e8d	05 0a 00 		add	ax,10	;000aH
	*** 000e90	50 			push	ax
	*** 000e91	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000e96	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XBCH,esccregs->xbch);
; Line 377
	*** 000e99	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000e9c	26 ff 77 08 		push	WORD PTR es:[bx+8]
	*** 000ea0	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000ea3	d1 e3 			shl	bx,1
	*** 000ea5	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000ea8	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000eab	05 0b 00 		add	ax,11	;000bH
	*** 000eae	50 			push	ax
	*** 000eaf	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000eb4	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR0,esccregs->ccr0);
; Line 378
	*** 000eb7	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000eba	26 ff 77 0a 		push	WORD PTR es:[bx+10]
	*** 000ebe	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000ec1	d1 e3 			shl	bx,1
	*** 000ec3	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000ec6	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000ec9	05 0c 00 		add	ax,12	;000cH
	*** 000ecc	50 			push	ax
	*** 000ecd	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000ed2	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR1,esccregs->ccr1);
; Line 379
	*** 000ed5	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000ed8	26 ff 77 0c 		push	WORD PTR es:[bx+12]
	*** 000edc	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000edf	d1 e3 			shl	bx,1
	*** 000ee1	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000ee4	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000ee7	05 0d 00 		add	ax,13	;000dH
	*** 000eea	50 			push	ax
	*** 000eeb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000ef0	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR2,esccregs->ccr2);
; Line 380
	*** 000ef3	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000ef6	26 ff 77 0e 		push	WORD PTR es:[bx+14]
	*** 000efa	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000efd	d1 e3 			shl	bx,1
	*** 000eff	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000f02	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000f05	05 0e 00 		add	ax,14	;000eH
	*** 000f08	50 			push	ax
	*** 000f09	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000f0e	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+BGR,esccregs->bgr);
; Line 381
	*** 000f11	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000f14	26 ff 77 14 		push	WORD PTR es:[bx+20]
	*** 000f18	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000f1b	d1 e3 			shl	bx,1
	*** 000f1d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000f20	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000f23	05 14 00 		add	ax,20	;0014H
	*** 000f26	50 			push	ax
	*** 000f27	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000f2c	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+PVR,(esccregs->pvr&0xfe)+channel[port]);
; Line 382
	*** 000f2f	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000f32	26 8a 47 1e 		mov	al,BYTE PTR es:[bx+30]
	*** 000f36	25 fe 00 		and	ax,254	;00feH
	*** 000f39	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 000f3c	81 c3 9a 01 		add	bx,410	;019aH
	*** 000f40	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 000f43	d1 e6 			shl	si,1
	*** 000f45	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 000f48	50 			push	ax
	*** 000f49	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000f4c	d1 e3 			shl	bx,1
	*** 000f4e	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000f51	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000f54	05 1c 00 		add	ax,28	;001cH
	*** 000f57	50 			push	ax
	*** 000f58	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000f5d	83 c4 04 		add	sp,4
;|***     }
; Line 383
;|*** 
;|***   if(opmode==OPMODE_HDLC)
; Line 385
					$I1551:
	*** 000f60	83 7e 12 00 		cmp	WORD PTR [bp+18],0	;opmode
	*** 000f64	74 03 			je	$JCC3940
	*** 000f66	e9 4b 02 		jmp	$I1552
					$JCC3940:
;|***     {
; Line 386
;|***     //this is mode specific to hdlc/sdlc...need to do various things for different modes
;|***     //copy the regset to the escc in question
;|***     //outp(port_list[port]+register,esccregs->register);
;|*** 
;|***     outp(port_list[port]+CCR4,esccregs->ccr4); //code to access CCR4 for biphase-M
; Line 391
	*** 000f69	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000f6c	26 ff 77 12 		push	WORD PTR es:[bx+18]
	*** 000f70	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000f73	d1 e3 			shl	bx,1
	*** 000f75	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000f78	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000f7b	05 1f 00 		add	ax,31	;001fH
	*** 000f7e	50 			push	ax
	*** 000f7f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000f84	83 c4 04 		add	sp,4
;|***     
;|***     outp(port_list[port]+MODE,esccregs->mode);
; Line 393
	*** 000f87	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000f8a	26 ff 77 02 		push	WORD PTR es:[bx+2]
	*** 000f8e	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000f91	d1 e3 			shl	bx,1
	*** 000f93	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000f96	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000f99	05 02 00 		add	ax,2
	*** 000f9c	50 			push	ax
	*** 000f9d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000fa2	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+TIMR,esccregs->timr);
; Line 394
	*** 000fa5	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000fa8	26 ff 77 04 		push	WORD PTR es:[bx+4]
	*** 000fac	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000faf	d1 e3 			shl	bx,1
	*** 000fb1	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000fb4	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000fb7	05 03 00 		add	ax,3
	*** 000fba	50 			push	ax
	*** 000fbb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000fc0	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XAD1,esccregs->xad1);
; Line 395
	*** 000fc3	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000fc6	26 ff 77 24 		push	WORD PTR es:[bx+36]
	*** 000fca	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000fcd	d1 e3 			shl	bx,1
	*** 000fcf	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000fd2	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000fd5	05 04 00 		add	ax,4
	*** 000fd8	50 			push	ax
	*** 000fd9	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000fde	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XAD2,esccregs->xad2);
; Line 396
	*** 000fe1	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 000fe4	26 ff 77 26 		push	WORD PTR es:[bx+38]
	*** 000fe8	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 000feb	d1 e3 			shl	bx,1
	*** 000fed	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 000ff0	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 000ff3	05 05 00 		add	ax,5
	*** 000ff6	50 			push	ax
	*** 000ff7	9a 00 00 00 00 		call	FAR PTR _outp
	*** 000ffc	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAH1,esccregs->rah1);
; Line 397
	*** 000fff	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001002	26 ff 77 28 		push	WORD PTR es:[bx+40]
	*** 001006	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001009	d1 e3 			shl	bx,1
	*** 00100b	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00100e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001011	05 06 00 		add	ax,6
	*** 001014	50 			push	ax
	*** 001015	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00101a	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAH2,esccregs->rah2);
; Line 398
	*** 00101d	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001020	26 ff 77 2a 		push	WORD PTR es:[bx+42]
	*** 001024	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001027	d1 e3 			shl	bx,1
	*** 001029	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00102c	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00102f	05 07 00 		add	ax,7
	*** 001032	50 			push	ax
	*** 001033	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001038	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAL1,esccregs->ral1);
; Line 399
	*** 00103b	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00103e	26 ff 77 2c 		push	WORD PTR es:[bx+44]
	*** 001042	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001045	d1 e3 			shl	bx,1
	*** 001047	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00104a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00104d	05 08 00 		add	ax,8
	*** 001050	50 			push	ax
	*** 001051	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001056	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAL2,esccregs->ral2);
; Line 400
	*** 001059	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00105c	26 ff 77 2e 		push	WORD PTR es:[bx+46]
	*** 001060	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001063	d1 e3 			shl	bx,1
	*** 001065	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001068	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00106b	05 09 00 		add	ax,9
	*** 00106e	50 			push	ax
	*** 00106f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001074	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XBCL,esccregs->xbcl);
; Line 401
	*** 001077	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00107a	26 ff 77 06 		push	WORD PTR es:[bx+6]
	*** 00107e	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001081	d1 e3 			shl	bx,1
	*** 001083	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001086	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001089	05 0a 00 		add	ax,10	;000aH
	*** 00108c	50 			push	ax
	*** 00108d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001092	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XBCH,esccregs->xbch);
; Line 402
	*** 001095	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001098	26 ff 77 08 		push	WORD PTR es:[bx+8]
	*** 00109c	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00109f	d1 e3 			shl	bx,1
	*** 0010a1	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0010a4	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0010a7	05 0b 00 		add	ax,11	;000bH
	*** 0010aa	50 			push	ax
	*** 0010ab	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0010b0	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR0,esccregs->ccr0);
; Line 403
	*** 0010b3	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0010b6	26 ff 77 0a 		push	WORD PTR es:[bx+10]
	*** 0010ba	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0010bd	d1 e3 			shl	bx,1
	*** 0010bf	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0010c2	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0010c5	05 0c 00 		add	ax,12	;000cH
	*** 0010c8	50 			push	ax
	*** 0010c9	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0010ce	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR1,esccregs->ccr1);
; Line 404
	*** 0010d1	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0010d4	26 ff 77 0c 		push	WORD PTR es:[bx+12]
	*** 0010d8	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0010db	d1 e3 			shl	bx,1
	*** 0010dd	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0010e0	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0010e3	05 0d 00 		add	ax,13	;000dH
	*** 0010e6	50 			push	ax
	*** 0010e7	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0010ec	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR2,esccregs->ccr2);
; Line 405
	*** 0010ef	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0010f2	26 ff 77 0e 		push	WORD PTR es:[bx+14]
	*** 0010f6	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0010f9	d1 e3 			shl	bx,1
	*** 0010fb	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0010fe	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001101	05 0e 00 		add	ax,14	;000eH
	*** 001104	50 			push	ax
	*** 001105	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00110a	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR3,esccregs->ccr3);
; Line 406
	*** 00110d	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001110	26 ff 77 10 		push	WORD PTR es:[bx+16]
	*** 001114	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001117	d1 e3 			shl	bx,1
	*** 001119	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00111c	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00111f	05 0f 00 		add	ax,15	;000fH
	*** 001122	50 			push	ax
	*** 001123	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001128	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+BGR,esccregs->bgr);
; Line 407
	*** 00112b	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00112e	26 ff 77 14 		push	WORD PTR es:[bx+20]
	*** 001132	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001135	d1 e3 			shl	bx,1
	*** 001137	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00113a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00113d	05 14 00 		add	ax,20	;0014H
	*** 001140	50 			push	ax
	*** 001141	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001146	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RLCR,esccregs->rlcr);
; Line 408
	*** 001149	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00114c	26 ff 77 30 		push	WORD PTR es:[bx+48]
	*** 001150	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001153	d1 e3 			shl	bx,1
	*** 001155	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001158	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00115b	05 15 00 		add	ax,21	;0015H
	*** 00115e	50 			push	ax
	*** 00115f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001164	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+PRE,esccregs->pre);
; Line 409
	*** 001167	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00116a	26 ff 77 32 		push	WORD PTR es:[bx+50]
	*** 00116e	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001171	d1 e3 			shl	bx,1
	*** 001173	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001176	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001179	40 			inc	ax
	*** 00117a	50 			push	ax
	*** 00117b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001180	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+PVR,(esccregs->pvr&0xfe)+channel[port]);
; Line 410
	*** 001183	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001186	26 8a 47 1e 		mov	al,BYTE PTR es:[bx+30]
	*** 00118a	25 fe 00 		and	ax,254	;00feH
	*** 00118d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001190	81 c3 9a 01 		add	bx,410	;019aH
	*** 001194	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 001197	d1 e6 			shl	si,1
	*** 001199	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 00119c	50 			push	ax
	*** 00119d	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0011a0	d1 e3 			shl	bx,1
	*** 0011a2	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0011a5	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0011a8	05 1c 00 		add	ax,28	;001cH
	*** 0011ab	50 			push	ax
	*** 0011ac	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0011b1	83 c4 04 		add	sp,4
;|***     }
; Line 411
;|*** 
;|***   if(opmode == OPMODE_BISYNC)
; Line 413
					$I1552:
	*** 0011b4	83 7e 12 02 		cmp	WORD PTR [bp+18],2	;opmode
	*** 0011b8	74 03 			je	$JCC4536
	*** 0011ba	e9 f1 01 		jmp	$I1553
					$JCC4536:
;|***     {
; Line 414
;|***     outp(port_list[port]+MODE,esccregs->mode);
; Line 415
	*** 0011bd	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0011c0	26 ff 77 02 		push	WORD PTR es:[bx+2]
	*** 0011c4	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0011c7	d1 e3 			shl	bx,1
	*** 0011c9	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0011cc	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0011cf	05 02 00 		add	ax,2
	*** 0011d2	50 			push	ax
	*** 0011d3	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0011d8	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+TIMR,esccregs->timr);
; Line 416
	*** 0011db	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0011de	26 ff 77 04 		push	WORD PTR es:[bx+4]
	*** 0011e2	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0011e5	d1 e3 			shl	bx,1
	*** 0011e7	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0011ea	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0011ed	05 03 00 		add	ax,3
	*** 0011f0	50 			push	ax
	*** 0011f1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0011f6	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XAD1,esccregs->synl);
; Line 417
	*** 0011f9	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0011fc	26 ff 77 3a 		push	WORD PTR es:[bx+58]
	*** 001200	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001203	d1 e3 			shl	bx,1
	*** 001205	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001208	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00120b	05 04 00 		add	ax,4
	*** 00120e	50 			push	ax
	*** 00120f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001214	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XAD2,esccregs->synh);
; Line 418
	*** 001217	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00121a	26 ff 77 3c 		push	WORD PTR es:[bx+60]
	*** 00121e	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001221	d1 e3 			shl	bx,1
	*** 001223	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001226	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001229	05 05 00 		add	ax,5
	*** 00122c	50 			push	ax
	*** 00122d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001232	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAH1,esccregs->tcr);
; Line 419
	*** 001235	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001238	26 ff 77 34 		push	WORD PTR es:[bx+52]
	*** 00123c	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00123f	d1 e3 			shl	bx,1
	*** 001241	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001244	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001247	05 06 00 		add	ax,6
	*** 00124a	50 			push	ax
	*** 00124b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001250	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAH2,esccregs->dafo);
; Line 420
	*** 001253	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001256	26 ff 77 36 		push	WORD PTR es:[bx+54]
	*** 00125a	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00125d	d1 e3 			shl	bx,1
	*** 00125f	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001262	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001265	05 07 00 		add	ax,7
	*** 001268	50 			push	ax
	*** 001269	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00126e	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAL1,esccregs->rfc);
; Line 421
	*** 001271	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001274	26 ff 77 38 		push	WORD PTR es:[bx+56]
	*** 001278	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00127b	d1 e3 			shl	bx,1
	*** 00127d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001280	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001283	05 08 00 		add	ax,8
	*** 001286	50 			push	ax
	*** 001287	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00128c	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XBCL,esccregs->xbcl);
; Line 422
	*** 00128f	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001292	26 ff 77 06 		push	WORD PTR es:[bx+6]
	*** 001296	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001299	d1 e3 			shl	bx,1
	*** 00129b	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00129e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0012a1	05 0a 00 		add	ax,10	;000aH
	*** 0012a4	50 			push	ax
	*** 0012a5	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0012aa	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XBCH,esccregs->xbch);
; Line 423
	*** 0012ad	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0012b0	26 ff 77 08 		push	WORD PTR es:[bx+8]
	*** 0012b4	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0012b7	d1 e3 			shl	bx,1
	*** 0012b9	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0012bc	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0012bf	05 0b 00 		add	ax,11	;000bH
	*** 0012c2	50 			push	ax
	*** 0012c3	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0012c8	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR0,esccregs->ccr0);
; Line 424
	*** 0012cb	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0012ce	26 ff 77 0a 		push	WORD PTR es:[bx+10]
	*** 0012d2	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0012d5	d1 e3 			shl	bx,1
	*** 0012d7	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0012da	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0012dd	05 0c 00 		add	ax,12	;000cH
	*** 0012e0	50 			push	ax
	*** 0012e1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0012e6	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR1,esccregs->ccr1);
; Line 425
	*** 0012e9	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0012ec	26 ff 77 0c 		push	WORD PTR es:[bx+12]
	*** 0012f0	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0012f3	d1 e3 			shl	bx,1
	*** 0012f5	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0012f8	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0012fb	05 0d 00 		add	ax,13	;000dH
	*** 0012fe	50 			push	ax
	*** 0012ff	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001304	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR2,esccregs->ccr2);
; Line 426
	*** 001307	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 00130a	26 ff 77 0e 		push	WORD PTR es:[bx+14]
	*** 00130e	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001311	d1 e3 			shl	bx,1
	*** 001313	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001316	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001319	05 0e 00 		add	ax,14	;000eH
	*** 00131c	50 			push	ax
	*** 00131d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001322	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+CCR3,esccregs->ccr3);
; Line 427
	*** 001325	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001328	26 ff 77 10 		push	WORD PTR es:[bx+16]
	*** 00132c	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00132f	d1 e3 			shl	bx,1
	*** 001331	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001334	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001337	05 0f 00 		add	ax,15	;000fH
	*** 00133a	50 			push	ax
	*** 00133b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001340	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+BGR,esccregs->bgr);
; Line 428
	*** 001343	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001346	26 ff 77 14 		push	WORD PTR es:[bx+20]
	*** 00134a	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00134d	d1 e3 			shl	bx,1
	*** 00134f	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001352	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001355	05 14 00 		add	ax,20	;0014H
	*** 001358	50 			push	ax
	*** 001359	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00135e	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+PRE,esccregs->pre);
; Line 429
	*** 001361	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001364	26 ff 77 32 		push	WORD PTR es:[bx+50]
	*** 001368	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00136b	d1 e3 			shl	bx,1
	*** 00136d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001370	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001373	40 			inc	ax
	*** 001374	50 			push	ax
	*** 001375	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00137a	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+PVR,(esccregs->pvr&0xfe)+channel[port]);
; Line 430
	*** 00137d	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001380	26 8a 47 1e 		mov	al,BYTE PTR es:[bx+30]
	*** 001384	25 fe 00 		and	ax,254	;00feH
	*** 001387	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00138a	81 c3 9a 01 		add	bx,410	;019aH
	*** 00138e	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 001391	d1 e6 			shl	si,1
	*** 001393	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 001396	50 			push	ax
	*** 001397	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00139a	d1 e3 			shl	bx,1
	*** 00139c	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00139f	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0013a2	05 1c 00 		add	ax,28	;001cH
	*** 0013a5	50 			push	ax
	*** 0013a6	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0013ab	83 c4 04 		add	sp,4
;|***     }
; Line 431
;|*** 
;|***   //not really necessary because it will be done in txframe but just in case....
;|***   if(port_dmar_list[port]!=0) setupdmar(port,rxbuffer[port][current_rxbuf[port]]->frame);
; Line 434
					$I1553:
	*** 0013ae	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0013b1	83 c3 10 		add	bx,16	;0010H
	*** 0013b4	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 0013b7	d1 e6 			shl	si,1
	*** 0013b9	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 0013bd	75 03 			jne	$JCC5053
	*** 0013bf	e9 36 00 		jmp	$I1554
					$JCC5053:
	*** 0013c2	ff 76 14 		push	WORD PTR [bp+20]	;port
	*** 0013c5	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0013c8	81 c3 7a 01 		add	bx,378	;017aH
	*** 0013cc	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 0013cf	d1 e6 			shl	si,1
	*** 0013d1	8b 7e 14 		mov	di,WORD PTR [bp+20]	;port
	*** 0013d4	c1 e7 04 		shl	di,4
	*** 0013d7	26 03 38 		add	di,WORD PTR es:[bx][si]
	*** 0013da	c1 e7 02 		shl	di,2
	*** 0013dd	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0013e0	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 0013e4	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 0013e8	05 06 00 		add	ax,6
	*** 0013eb	52 			push	dx
	*** 0013ec	50 			push	ax
	*** 0013ed	ff 76 08 		push	WORD PTR [bp+8]
	*** 0013f0	ff 76 06 		push	WORD PTR [bp+6]	;this
	*** 0013f3	9a 00 00 00 00 		call	FAR PTR ?setupdmar@Cescc@@JECXIPEX@Z	; Cescc::setupdmar
;|***   if(port_dmat_list[port]!=0) setupdmat(port,txbuffer[port][current_txbuf[port]]->frame,FRAME_SIZE);
; Line 435
					$I1554:
	*** 0013f8	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0013fb	83 c3 0c 		add	bx,12	;000cH
	*** 0013fe	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 001401	d1 e6 			shl	si,1
	*** 001403	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 001407	75 03 			jne	$JCC5127
	*** 001409	e9 3b 00 		jmp	$I1555
					$JCC5127:
	*** 00140c	ff 76 14 		push	WORD PTR [bp+20]	;port
	*** 00140f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001412	81 c3 7e 01 		add	bx,382	;017eH
	*** 001416	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 001419	d1 e6 			shl	si,1
	*** 00141b	8b 7e 14 		mov	di,WORD PTR [bp+20]	;port
	*** 00141e	c1 e7 04 		shl	di,4
	*** 001421	26 03 38 		add	di,WORD PTR es:[bx][si]
	*** 001424	c1 e7 02 		shl	di,2
	*** 001427	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00142a	26 8b 81 fa 00 		mov	ax,WORD PTR es:[bx+250][di]
	*** 00142f	26 8b 91 fc 00 		mov	dx,WORD PTR es:[bx+252][di]
	*** 001434	05 06 00 		add	ax,6
	*** 001437	52 			push	dx
	*** 001438	50 			push	ax
	*** 001439	68 00 04 		push	1024	;0400H
	*** 00143c	ff 76 08 		push	WORD PTR [bp+8]
	*** 00143f	ff 76 06 		push	WORD PTR [bp+6]	;this
	*** 001442	9a 00 00 00 00 		call	FAR PTR ?setupdmat@Cescc@@JECXIPEXI@Z	; Cescc::setupdmat
;|***   
;|***   outp(port_list[port]+CMDR,XRES);//reset transmitter
; Line 437
					$I1555:
	*** 001447	6a 01 			push	1
	*** 001449	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00144c	d1 e3 			shl	bx,1
	*** 00144e	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001451	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001454	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001459	83 c4 04 		add	sp,4
;|***   
;|***   unsigned long timeout_cntr = 0;
; Line 439
	*** 00145c	2b c0 			sub	ax,ax
	*** 00145e	89 46 fc 		mov	WORD PTR [bp-4],ax
	*** 001461	89 46 fa 		mov	WORD PTR [bp-6],ax	;timeout_cntr
;|*** 
;|***   while((inp(port_list[port]+STAR)&CEC)==CEC)
; Line 441
					$FC1558:
	*** 001464	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001467	d1 e3 			shl	bx,1
	*** 001469	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00146c	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00146f	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001474	83 c4 02 		add	sp,2
	*** 001477	24 04 			and	al,4
	*** 001479	3c 04 			cmp	al,4
	*** 00147b	74 03 			je	$JCC5243
	*** 00147d	e9 5d 00 		jmp	$FB1559
					$JCC5243:
;|***     {
; Line 442
;|***     timeout_cntr++;
; Line 443
	*** 001480	83 46 fa 01 		add	WORD PTR [bp-6],1	;timeout_cntr
	*** 001484	83 56 fc 00 		adc	WORD PTR [bp-4],0
;|***     if(timeout_cntr>1000000)
; Line 444
	*** 001488	83 7e fc 0f 		cmp	WORD PTR [bp-4],15	;000fH
	*** 00148c	73 03 			jae	$JCC5260
	*** 00148e	e9 49 00 		jmp	$I1560
					$JCC5260:
	*** 001491	76 03 			jbe	$JCC5265
	*** 001493	e9 0a 00 		jmp	$L2037
					$JCC5265:
	*** 001496	81 7e fa 40 42 		cmp	WORD PTR [bp-6],16960	;4240H	;timeout_cntr
	*** 00149b	77 03 			ja	$JCC5275
	*** 00149d	e9 3a 00 		jmp	$I1560
					$JCC5275:
					$L2037:
;|***       {
; Line 445
;|***       //bad error condition here must indicate that we are not ready for business
;|***       outp(port_list[port]+IMR0,0xff);
; Line 447
	*** 0014a0	68 ff 00 		push	255	;00ffH
	*** 0014a3	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0014a6	d1 e3 			shl	bx,1
	*** 0014a8	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0014ab	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0014ae	05 1a 00 		add	ax,26	;001aH
	*** 0014b1	50 			push	ax
	*** 0014b2	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0014b7	83 c4 04 		add	sp,4
;|***       outp(port_list[port]+IMR1,0xff);
; Line 448
	*** 0014ba	68 ff 00 		push	255	;00ffH
	*** 0014bd	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0014c0	d1 e3 			shl	bx,1
	*** 0014c2	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0014c5	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0014c8	05 1b 00 		add	ax,27	;001bH
	*** 0014cb	50 			push	ax
	*** 0014cc	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0014d1	83 c4 04 		add	sp,4
;|***       return FALSE;
; Line 449
	*** 0014d4	b8 01 00 		mov	ax,1
	*** 0014d7	e9 31 01 		jmp	$EX1520
;|***       }
; Line 450
;|***     }//wait for CEC = 0//need a timeout loop here (only wait so long...now it could be infinite if no txclock input to hscx)
; Line 451
					$I1560:
	*** 0014da	e9 87 ff 		jmp	$FC1558
					$FB1559:
;|***   
;|***   outp(port_list[port]+CMDR,RHR); //reset receiver
; Line 453
	*** 0014dd	6a 40 			push	64	;0040H
	*** 0014df	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0014e2	d1 e3 			shl	bx,1
	*** 0014e4	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0014e7	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 0014ea	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0014ef	83 c4 04 		add	sp,4
;|***   timeout_cntr=0;
; Line 454
	*** 0014f2	2b c0 			sub	ax,ax
	*** 0014f4	89 46 fc 		mov	WORD PTR [bp-4],ax
	*** 0014f7	89 46 fa 		mov	WORD PTR [bp-6],ax	;timeout_cntr
;|***   while((inp(port_list[port]+STAR)&CEC)==CEC)
; Line 455
					$FC1562:
	*** 0014fa	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0014fd	d1 e3 			shl	bx,1
	*** 0014ff	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001502	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001505	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00150a	83 c4 02 		add	sp,2
	*** 00150d	24 04 			and	al,4
	*** 00150f	3c 04 			cmp	al,4
	*** 001511	74 03 			je	$JCC5393
	*** 001513	e9 5d 00 		jmp	$FB1563
					$JCC5393:
;|***     {
; Line 456
;|***     timeout_cntr++;
; Line 457
	*** 001516	83 46 fa 01 		add	WORD PTR [bp-6],1	;timeout_cntr
	*** 00151a	83 56 fc 00 		adc	WORD PTR [bp-4],0
;|***     if(timeout_cntr>1000000)
; Line 458
	*** 00151e	83 7e fc 0f 		cmp	WORD PTR [bp-4],15	;000fH
	*** 001522	73 03 			jae	$JCC5410
	*** 001524	e9 49 00 		jmp	$I1564
					$JCC5410:
	*** 001527	76 03 			jbe	$JCC5415
	*** 001529	e9 0a 00 		jmp	$L2038
					$JCC5415:
	*** 00152c	81 7e fa 40 42 		cmp	WORD PTR [bp-6],16960	;4240H	;timeout_cntr
	*** 001531	77 03 			ja	$JCC5425
	*** 001533	e9 3a 00 		jmp	$I1564
					$JCC5425:
					$L2038:
;|***       {
; Line 459
;|***       //bad error condition here must indicate that we are not ready for business
;|***       outp(port_list[port]+IMR0,0xff);//mask all interrupts 
; Line 461
	*** 001536	68 ff 00 		push	255	;00ffH
	*** 001539	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00153c	d1 e3 			shl	bx,1
	*** 00153e	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001541	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001544	05 1a 00 		add	ax,26	;001aH
	*** 001547	50 			push	ax
	*** 001548	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00154d	83 c4 04 		add	sp,4
;|***       outp(port_list[port]+IMR1,0xff);
; Line 462
	*** 001550	68 ff 00 		push	255	;00ffH
	*** 001553	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 001556	d1 e3 			shl	bx,1
	*** 001558	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00155b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00155e	05 1b 00 		add	ax,27	;001bH
	*** 001561	50 			push	ax
	*** 001562	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001567	83 c4 04 		add	sp,4
;|***       return FALSE;
; Line 463
	*** 00156a	b8 01 00 		mov	ax,1
	*** 00156d	e9 9b 00 		jmp	$EX1520
;|***       }
; Line 464
;|***     }//wait for CEC = 0//need a timeout loop here (only wait so long...now it could be infinite if no txclock input to hscx)
; Line 465
					$I1564:
	*** 001570	e9 87 ff 		jmp	$FC1562
					$FB1563:
;|*** 
;|***   port_open_list[port] = 1;  //flag this port open
; Line 467
	*** 001573	8b 76 14 		mov	si,WORD PTR [bp+20]	;port
	*** 001576	d1 e6 			shl	si,1
	*** 001578	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00157b	26 c7 40 04 01 00 	mov	WORD PTR es:[bx+4][si],1
;|***   
;|***   outp(port_list[port]+IMR0,esccregs->imr0);//flame on, unmask escc interrupts
; Line 469
	*** 001581	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 001584	26 ff 77 1a 		push	WORD PTR es:[bx+26]
	*** 001588	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 00158b	d1 e3 			shl	bx,1
	*** 00158d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001590	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001593	05 1a 00 		add	ax,26	;001aH
	*** 001596	50 			push	ax
	*** 001597	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00159c	83 c4 04 		add	sp,4
;|***   outp(port_list[port]+IMR1,esccregs->imr1);
; Line 470
	*** 00159f	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0015a2	26 ff 77 1c 		push	WORD PTR es:[bx+28]
	*** 0015a6	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0015a9	d1 e3 			shl	bx,1
	*** 0015ab	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0015ae	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0015b1	05 1b 00 		add	ax,27	;001bH
	*** 0015b4	50 			push	ax
	*** 0015b5	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0015ba	83 c4 04 		add	sp,4
;|***   outp(port_list[port]+PIM,esccregs->pim);
; Line 471
	*** 0015bd	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0015c0	26 ff 77 20 		push	WORD PTR es:[bx+32]
	*** 0015c4	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0015c7	d1 e3 			shl	bx,1
	*** 0015c9	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0015cc	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0015cf	05 1d 00 		add	ax,29	;001dH
	*** 0015d2	50 			push	ax
	*** 0015d3	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0015d8	83 c4 04 		add	sp,4
;|***   
;|***   if(opmode==OPMODE_BISYNC) outp(port_list[port]+CMDR,HUNT);//start receive engine...search for SYN
; Line 473
	*** 0015db	83 7e 12 02 		cmp	WORD PTR [bp+18],2	;opmode
	*** 0015df	74 03 			je	$JCC5599
	*** 0015e1	e9 15 00 		jmp	$I1565
					$JCC5599:
	*** 0015e4	6a 04 			push	4
	*** 0015e6	8b 5e 14 		mov	bx,WORD PTR [bp+20]	;port
	*** 0015e9	d1 e3 			shl	bx,1
	*** 0015eb	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0015ee	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 0015f1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0015f6	83 c4 04 		add	sp,4
;|***   if(esccregs->cmdr !=0);//could write the command if we wanted to but we won't for now
; Line 474
					$I1565:
	*** 0015f9	c4 5e 0e 		les	bx,DWORD PTR [bp+14]	;esccregs
	*** 0015fc	26 83 3f 00 		cmp	WORD PTR es:[bx],0
	*** 001600	75 03 			jne	$JCC5632
	*** 001602	e9 00 00 		jmp	$I1566
					$JCC5632:
;|***   return TRUE;
; Line 475
					$I1566:
	*** 001605	b8 00 00 		mov	ax,0
	*** 001608	e9 00 00 		jmp	$EX1520
;|***   }  //  end init_port()
; Line 476
					$EX1520:
	*** 00160b	5e 			pop	si
	*** 00160c	5f 			pop	di
	*** 00160d	c9 			leave	
	*** 00160e	ca 10 00 		ret	16	;00000010H

?init_port@Cescc@@RECIIIPEUescc_regs@@II@Z	ENDP
	PUBLIC	?rx_port@Cescc@@RECIIPEDI@Z	; Cescc::rx_port
?rx_port@Cescc@@RECIIPEDI@Z	PROC FAR	; Cescc::rx_port
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::rx_port(unsigned port,char far *buf, unsigned num_bytes)
;|***   {
; Line 484
	*** 001611	c8 04 00 00 		enter	4,0
	*** 001615	57 			push	di
	*** 001616	56 			push	si
;	i = -2
;	j = -4
;	this = 6
;	port = 16
;	buf = 12
;	num_bytes = 10
;|***   //returns the number of bytes transfered to buf (one frame worth)
;|***   //retval = rxbuffer[port][next_rbuf].no_bytes
;|***   //buf = rxbuffer[port][next_rbuf].frame
;|***   //rxbuffer[port][next_rbuf].valid = 0;
;|***   // next_rbuf++;
;|***   // if (next_rbuf > max_rbufs) next_rbuf =0 ;
;|***   unsigned i,j;
;|***   
;|***   // select channel A or B
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);
; Line 494
	*** 001617	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 00161a	d1 e3 			shl	bx,1
	*** 00161c	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00161f	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001622	05 1c 00 		add	ax,28	;001cH
	*** 001625	50 			push	ax
	*** 001626	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00162b	83 c4 02 		add	sp,2
	*** 00162e	25 fe 00 		and	ax,254	;00feH
	*** 001631	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001634	81 c3 9a 01 		add	bx,410	;019aH
	*** 001638	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 00163b	d1 e6 			shl	si,1
	*** 00163d	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 001640	50 			push	ax
	*** 001641	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 001644	d1 e3 			shl	bx,1
	*** 001646	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001649	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00164c	05 1c 00 		add	ax,28	;001cH
	*** 00164f	50 			push	ax
	*** 001650	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001655	83 c4 04 		add	sp,4
;|***   
;|***   // this is the section for autonomous model jtm
;|***   if((eopmode[port]==OPMODE_HDLC)||(eopmode[port]==OPMODE_BISYNC))
; Line 497
	*** 001658	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00165b	81 c3 9e 01 		add	bx,414	;019eH
	*** 00165f	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001662	d1 e6 			shl	si,1
	*** 001664	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 001668	75 03 			jne	$JCC5736
	*** 00166a	e9 15 00 		jmp	$I1575
					$JCC5736:
	*** 00166d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001670	81 c3 9e 01 		add	bx,414	;019eH
	*** 001674	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001677	d1 e6 			shl	si,1
	*** 001679	26 83 38 02 		cmp	WORD PTR es:[bx][si],2
	*** 00167d	74 03 			je	$JCC5757
	*** 00167f	e9 1e 01 		jmp	$I1574
					$JCC5757:
					$I1575:
;|***     {
; Line 498
;|***     // select the escc buffer pool assigned to this channel
;|***     i = current_rxbuf[port];
; Line 500
	*** 001682	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001685	81 c3 7a 01 		add	bx,378	;017aH
	*** 001689	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 00168c	d1 e6 			shl	si,1
	*** 00168e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001691	89 46 fe 		mov	WORD PTR [bp-2],ax	;i
;|***     i++;
; Line 501
	*** 001694	ff 46 fe 		inc	WORD PTR [bp-2]	;i
;|***     if(i==max_rxbuf[port]) i = 0;
; Line 502
	*** 001697	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 00169a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00169d	81 c3 82 01 		add	bx,386	;0182H
	*** 0016a1	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0016a4	d1 e6 			shl	si,1
	*** 0016a6	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0016a9	74 03 			je	$JCC5801
	*** 0016ab	e9 05 00 		jmp	$I1576
					$JCC5801:
	*** 0016ae	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
;|***     
;|***     // step through the buffer pool to see if any has a message
;|***     do{
; Line 505
					$I1576:
					$D1577:
;|***       if(rxbuffer[port][i]->valid == 1)
; Line 506
	*** 0016b3	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0016b6	c1 e6 04 		shl	si,4
	*** 0016b9	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 0016bc	c1 e6 02 		shl	si,2
	*** 0016bf	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0016c2	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 0016c6	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 0016ca	74 03 			je	$JCC5834
	*** 0016cc	e9 95 00 		jmp	$I1580
					$JCC5834:
;|***         {
; Line 507
;|***         // this escc buffer claims it has a message
;|***         // check for error conditions
;|***         // fail if the escc buffer holds more than the user's buffer can hold
;|***         if(rxbuffer[port][i]->no_bytes > num_bytes) return 0;
; Line 511
	*** 0016cf	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 0016d2	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0016d5	c1 e6 04 		shl	si,4
	*** 0016d8	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 0016db	c1 e6 02 		shl	si,2
	*** 0016de	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0016e1	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 0016e5	26 39 47 02 		cmp	WORD PTR es:[bx+2],ax
	*** 0016e9	77 03 			ja	$JCC5865
	*** 0016eb	e9 06 00 		jmp	$I1581
					$JCC5865:
	*** 0016ee	b8 00 00 		mov	ax,0
	*** 0016f1	e9 e5 01 		jmp	$EX1571
;|***         
;|***         // user's buffer is ok so copy the message over
;|***         for(j=0;j<rxbuffer[port][i]->no_bytes;j++)
; Line 514
					$I1581:
	*** 0016f4	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;j
	*** 0016f9	e9 03 00 		jmp	$F1582
					$FC1583:
	*** 0016fc	ff 46 fc 		inc	WORD PTR [bp-4]	;j
					$F1582:
	*** 0016ff	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;j
	*** 001702	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001705	c1 e6 04 		shl	si,4
	*** 001708	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 00170b	c1 e6 02 		shl	si,2
	*** 00170e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001711	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 001715	26 39 47 02 		cmp	WORD PTR es:[bx+2],ax
	*** 001719	77 03 			ja	$JCC5913
	*** 00171b	e9 28 00 		jmp	$FB1584
					$JCC5913:
;|***           {
; Line 515
;|***           buf[j] = (rxbuffer[port][i]->frame[j]);
; Line 516
	*** 00171e	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001721	c1 e6 04 		shl	si,4
	*** 001724	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 001727	c1 e6 02 		shl	si,2
	*** 00172a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00172d	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 001731	83 c3 06 		add	bx,6
	*** 001734	8b 76 fc 		mov	si,WORD PTR [bp-4]	;j
	*** 001737	26 8a 00 		mov	al,BYTE PTR es:[bx][si]
	*** 00173a	c4 5e 0c 		les	bx,DWORD PTR [bp+12]	;buf
	*** 00173d	8b 76 fc 		mov	si,WORD PTR [bp-4]	;j
	*** 001740	26 88 00 		mov	BYTE PTR es:[bx][si],al
;|***           }
; Line 517
	*** 001743	e9 b6 ff 		jmp	$FC1583
					$FB1584:
;|***         
;|***         // release the escc buffer to be used again  
;|***         rxbuffer[port][i]->valid = 0;
; Line 520
	*** 001746	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001749	c1 e6 04 		shl	si,4
	*** 00174c	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 00174f	c1 e6 02 		shl	si,2
	*** 001752	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001755	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 001759	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***         
;|***         // tell the user how many chars were in the message
;|***         return j;
; Line 523
	*** 00175e	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;j
	*** 001761	e9 75 01 		jmp	$EX1571
;|***         }
; Line 524
;|***       
;|***       i++; // this escc buffer has no message so try the next one
; Line 526
					$I1580:
	*** 001764	ff 46 fe 		inc	WORD PTR [bp-2]	;i
;|***       
;|***       //wrap back to 0 if at end of buffer pool
;|***       if(i==max_rxbuf[port])i = 0;
; Line 529
	*** 001767	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 00176a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00176d	81 c3 82 01 		add	bx,386	;0182H
	*** 001771	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001774	d1 e6 			shl	si,1
	*** 001776	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 001779	74 03 			je	$JCC6009
	*** 00177b	e9 05 00 		jmp	$I1585
					$JCC6009:
	*** 00177e	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
;|***       
;|***       // repeat the do loop until you've checked all the buffers
;|***       // or until you find one with a message
;|***       }while(i!=current_rxbuf[port]);
; Line 533
					$I1585:
					$DC1578:
	*** 001783	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 001786	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001789	81 c3 7a 01 		add	bx,378	;017aH
	*** 00178d	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001790	d1 e6 			shl	si,1
	*** 001792	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 001795	74 03 			je	$JCC6037
	*** 001797	e9 19 ff 		jmp	$D1577
					$JCC6037:
					$DB1579:
;|***     
;|***     // tell the user that no messages were found
;|***     return 0;
; Line 536
	*** 00179a	b8 00 00 		mov	ax,0
	*** 00179d	e9 39 01 		jmp	$EX1571
;|***     }
; Line 537
;|*** 
;|***   if(eopmode[port]==OPMODE_ASYNC)
; Line 539
					$I1574:
	*** 0017a0	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0017a3	81 c3 9e 01 		add	bx,414	;019eH
	*** 0017a7	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0017aa	d1 e6 			shl	si,1
	*** 0017ac	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 0017b0	74 03 			je	$JCC6064
	*** 0017b2	e9 1e 01 		jmp	$I1586
					$JCC6064:
;|***     {
; Line 540
;|***     i = current_rxbuf[port];
; Line 541
	*** 0017b5	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0017b8	81 c3 7a 01 		add	bx,378	;017aH
	*** 0017bc	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0017bf	d1 e6 			shl	si,1
	*** 0017c1	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0017c4	89 46 fe 		mov	WORD PTR [bp-2],ax	;i
;|***     i++;
; Line 542
	*** 0017c7	ff 46 fe 		inc	WORD PTR [bp-2]	;i
;|***     if(i==max_rxbuf[port]) i = 0;
; Line 543
	*** 0017ca	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 0017cd	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0017d0	81 c3 82 01 		add	bx,386	;0182H
	*** 0017d4	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0017d7	d1 e6 			shl	si,1
	*** 0017d9	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0017dc	74 03 			je	$JCC6108
	*** 0017de	e9 05 00 		jmp	$I1587
					$JCC6108:
	*** 0017e1	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
;|***     do{
; Line 544
					$I1587:
					$D1588:
;|***       if(rxbuffer[port][i]->valid ==1)
; Line 545
	*** 0017e6	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0017e9	c1 e6 04 		shl	si,4
	*** 0017ec	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 0017ef	c1 e6 02 		shl	si,2
	*** 0017f2	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0017f5	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 0017f9	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 0017fd	74 03 			je	$JCC6141
	*** 0017ff	e9 95 00 		jmp	$I1591
					$JCC6141:
;|***         {
; Line 546
;|***         //we got a frame so copy the .frame to the buf and invalidate it 
;|***         //always assume that async will store both byte and status 
;|***         //such that data is allways multiples of 2
;|***         if((rxbuffer[port][i]->no_bytes) > num_bytes) return 0;
; Line 550
	*** 001802	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 001805	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001808	c1 e6 04 		shl	si,4
	*** 00180b	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 00180e	c1 e6 02 		shl	si,2
	*** 001811	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001814	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 001818	26 39 47 02 		cmp	WORD PTR es:[bx+2],ax
	*** 00181c	77 03 			ja	$JCC6172
	*** 00181e	e9 06 00 		jmp	$I1592
					$JCC6172:
	*** 001821	b8 00 00 		mov	ax,0
	*** 001824	e9 b2 00 		jmp	$EX1571
;|***         for(j=0;j<(rxbuffer[port][i]->no_bytes);j++)
; Line 551
					$I1592:
	*** 001827	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;j
	*** 00182c	e9 03 00 		jmp	$F1593
					$FC1594:
	*** 00182f	ff 46 fc 		inc	WORD PTR [bp-4]	;j
					$F1593:
	*** 001832	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;j
	*** 001835	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001838	c1 e6 04 		shl	si,4
	*** 00183b	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 00183e	c1 e6 02 		shl	si,2
	*** 001841	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001844	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 001848	26 39 47 02 		cmp	WORD PTR es:[bx+2],ax
	*** 00184c	77 03 			ja	$JCC6220
	*** 00184e	e9 28 00 		jmp	$FB1595
					$JCC6220:
;|***         buf[j] = (rxbuffer[port][i]->frame[j]);//copy to user buffer
; Line 552
	*** 001851	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001854	c1 e6 04 		shl	si,4
	*** 001857	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 00185a	c1 e6 02 		shl	si,2
	*** 00185d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001860	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 001864	83 c3 06 		add	bx,6
	*** 001867	8b 76 fc 		mov	si,WORD PTR [bp-4]	;j
	*** 00186a	26 8a 00 		mov	al,BYTE PTR es:[bx][si]
	*** 00186d	c4 5e 0c 		les	bx,DWORD PTR [bp+12]	;buf
	*** 001870	8b 76 fc 		mov	si,WORD PTR [bp-4]	;j
	*** 001873	26 88 00 		mov	BYTE PTR es:[bx][si],al
	*** 001876	e9 b6 ff 		jmp	$FC1594
					$FB1595:
;|***         rxbuffer[port][i]->valid = 0;//invalidate so it can be used again
; Line 553
	*** 001879	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 00187c	c1 e6 04 		shl	si,4
	*** 00187f	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 001882	c1 e6 02 		shl	si,2
	*** 001885	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001888	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 00188c	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***         return j; //give back the # bytes copied
; Line 554
	*** 001891	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;j
	*** 001894	e9 42 00 		jmp	$EX1571
;|***         }
; Line 555
;|***         
;|***       i++;  //try the next one
; Line 557
					$I1591:
	*** 001897	ff 46 fe 		inc	WORD PTR [bp-2]	;i
;|***       if(i==max_rxbuf[port])i = 0;//wrap to 0 if at end of buffers
; Line 558
	*** 00189a	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 00189d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0018a0	81 c3 82 01 		add	bx,386	;0182H
	*** 0018a4	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0018a7	d1 e6 			shl	si,1
	*** 0018a9	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0018ac	74 03 			je	$JCC6316
	*** 0018ae	e9 05 00 		jmp	$I1596
					$JCC6316:
	*** 0018b1	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
;|***       
;|***       }while(i!=current_rxbuf[port]);
; Line 560
					$I1596:
					$DC1589:
	*** 0018b6	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 0018b9	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0018bc	81 c3 7a 01 		add	bx,378	;017aH
	*** 0018c0	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0018c3	d1 e6 			shl	si,1
	*** 0018c5	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0018c8	74 03 			je	$JCC6344
	*** 0018ca	e9 19 ff 		jmp	$D1588
					$JCC6344:
					$DB1590:
;|***   
;|***     return 0; //no received frames so no bytes xfred
; Line 562
	*** 0018cd	b8 00 00 		mov	ax,0
	*** 0018d0	e9 06 00 		jmp	$EX1571
;|***     }
; Line 563
;|***   return 0;
; Line 564
					$I1586:
	*** 0018d3	b8 00 00 		mov	ax,0
	*** 0018d6	e9 00 00 		jmp	$EX1571
;|***   }   //  end rx_port(); returns # bytes transfered, 0 if fails
; Line 565
					$EX1571:
	*** 0018d9	5e 			pop	si
	*** 0018da	5f 			pop	di
	*** 0018db	c9 			leave	
	*** 0018dc	ca 0c 00 		ret	12	;0000000cH

?rx_port@Cescc@@RECIIPEDI@Z	ENDP
	PUBLIC	?tx_port@Cescc@@RECIIPEDI@Z	; Cescc::tx_port
?tx_port@Cescc@@RECIIPEDI@Z	PROC FAR	; Cescc::tx_port
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|***   // tx_port() does only a small portion of the actual tx processing.
;|***   // escc_isr() does most of the work.
;|*** unsigned Cescc::tx_port(unsigned port,char far *buf, unsigned num_bytes)
;|***   {
; Line 574
	*** 0018df	c8 08 00 00 		enter	8,0
	*** 0018e3	57 			push	di
	*** 0018e4	56 			push	si
;	bloc = -4
;	i = -6
;	j = -8
;	this = 6
;	port = 16
;	buf = 12
;	num_bytes = 10
;|***   unsigned far *bloc;
;|***   if(num_bytes==0) return  -1;
; Line 576
	*** 0018e5	83 7e 0a 00 		cmp	WORD PTR [bp+10],0	;num_bytes
	*** 0018e9	74 03 			je	$JCC6377
	*** 0018eb	e9 06 00 		jmp	$I1603
					$JCC6377:
	*** 0018ee	b8 ff ff 		mov	ax,-1	;ffffH
	*** 0018f1	e9 dd 03 		jmp	$EX1601
;|***   if(num_bytes>FRAME_SIZE) return -2;
; Line 577
					$I1603:
	*** 0018f4	81 7e 0a 00 04 		cmp	WORD PTR [bp+10],1024	;0400H	;num_bytes
	*** 0018f9	77 03 			ja	$JCC6393
	*** 0018fb	e9 06 00 		jmp	$I1604
					$JCC6393:
	*** 0018fe	b8 fe ff 		mov	ax,-2	;fffeH
	*** 001901	e9 cd 03 		jmp	$EX1601
;|***   
;|***   unsigned i,j;
; Line 579
					$I1604:
;|***   
;|***   bloc = (unsigned far*)buf;
; Line 581
	*** 001904	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;buf
	*** 001907	8b 56 0e 		mov	dx,WORD PTR [bp+14]
	*** 00190a	89 46 fc 		mov	WORD PTR [bp-4],ax	;bloc
	*** 00190d	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***   
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]); //select channel A or B
; Line 583
	*** 001910	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 001913	d1 e3 			shl	bx,1
	*** 001915	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001918	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00191b	05 1c 00 		add	ax,28	;001cH
	*** 00191e	50 			push	ax
	*** 00191f	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001924	83 c4 02 		add	sp,2
	*** 001927	25 fe 00 		and	ax,254	;00feH
	*** 00192a	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00192d	81 c3 9a 01 		add	bx,410	;019aH
	*** 001931	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001934	d1 e6 			shl	si,1
	*** 001936	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 001939	50 			push	ax
	*** 00193a	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 00193d	d1 e3 			shl	bx,1
	*** 00193f	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001942	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001945	05 1c 00 		add	ax,28	;001cH
	*** 001948	50 			push	ax
	*** 001949	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00194e	83 c4 04 		add	sp,4
;|***   
;|***   //all of this is operating mode specific,...need different cases for async, hdlc, bisync
;|***   i = current_txbuf[port];
; Line 586
	*** 001951	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001954	81 c3 7e 01 		add	bx,382	;017eH
	*** 001958	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 00195b	d1 e6 			shl	si,1
	*** 00195d	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001960	89 46 fa 		mov	WORD PTR [bp-6],ax	;i
;|***   
;|***   // The following do loop cycles through this port's txbuffers once,
;|***   // starting with current_txbuf[], then (in the first if statement)
;|***   // examines each txbuffer until it finds an an empty one
;|***   do  //while(i!=current_txbuf[port]) //Search through txbuffers.....
; Line 591
					$D1608:
;|***     {
; Line 592
;|***     if(txbuffer[port][i]->valid ==0)  //.....and find an empty one.
; Line 593
	*** 001963	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001966	c1 e6 04 		shl	si,4
	*** 001969	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 00196c	c1 e6 02 		shl	si,2
	*** 00196f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001972	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001977	26 83 3f 00 		cmp	WORD PTR es:[bx],0
	*** 00197b	74 03 			je	$JCC6523
	*** 00197d	e9 15 03 		jmp	$I1611
					$JCC6523:
;|***       {                               
; Line 594
;|***       if(port_dmat_list[port]==0)     //If we are not using DMA transfers to FIFO.....
; Line 595
	*** 001980	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001983	83 c3 0c 		add	bx,12	;000cH
	*** 001986	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001989	d1 e6 			shl	si,1
	*** 00198b	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 00198f	74 03 			je	$JCC6543
	*** 001991	e9 ef 01 		jmp	$I1612
					$JCC6543:
;|***         {
; Line 596
;|***         if((istxing[port]==0)&&(num_bytes<=32))//.....and this port is not currently txing a frame.....
; Line 597
	*** 001994	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001997	81 c3 92 01 		add	bx,402	;0192H
	*** 00199b	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 00199e	d1 e6 			shl	si,1
	*** 0019a0	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 0019a4	74 03 			je	$JCC6564
	*** 0019a6	e9 98 00 		jmp	$I1613
					$JCC6564:
	*** 0019a9	83 7e 0a 20 		cmp	WORD PTR [bp+10],32	;0020H	;num_bytes
	*** 0019ad	76 03 			jbe	$JCC6573
	*** 0019af	e9 8f 00 		jmp	$I1613
					$JCC6573:
;|***           {                                    //.....and we only need to fill the FIFO once (<=32 bytes)......
; Line 598
;|***                                              //.....then we can complete the send here and now.....
;|***           //printf("sending =<32\n\r");        //.....WITHOUT using a txbuffer.
;|***           txbuffer[port][i]->valid = 0;        //???  So declare this txbuffer free.....
; Line 601
	*** 0019b2	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0019b5	c1 e6 04 		shl	si,4
	*** 0019b8	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 0019bb	c1 e6 02 		shl	si,2
	*** 0019be	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0019c1	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 0019c6	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           for(j=0;j<num_bytes;j++)
; Line 602
	*** 0019cb	c7 46 f8 00 00 		mov	WORD PTR [bp-8],0	;j
	*** 0019d0	e9 03 00 		jmp	$F1614
					$FC1615:
	*** 0019d3	ff 46 f8 		inc	WORD PTR [bp-8]	;j
					$F1614:
	*** 0019d6	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 0019d9	39 46 f8 		cmp	WORD PTR [bp-8],ax	;j
	*** 0019dc	72 03 			jb	$JCC6620
	*** 0019de	e9 25 00 		jmp	$FB1616
					$JCC6620:
;|***             outp(port_list[port]+FIFO,buf[j]);//and write directly to FIFO from user's buffer
; Line 603
	*** 0019e1	c4 5e 0c 		les	bx,DWORD PTR [bp+12]	;buf
	*** 0019e4	8b 76 f8 		mov	si,WORD PTR [bp-8]	;j
	*** 0019e7	26 8a 00 		mov	al,BYTE PTR es:[bx][si]
	*** 0019ea	98 			cbw	
	*** 0019eb	50 			push	ax
	*** 0019ec	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 0019ef	d1 e3 			shl	bx,1
	*** 0019f1	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0019f4	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0019f7	05 20 00 		add	ax,32	;0020H
	*** 0019fa	50 			push	ax
	*** 0019fb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001a00	83 c4 04 		add	sp,4
	*** 001a03	e9 cd ff 		jmp	$FC1615
					$FB1616:
;|***           istxing[port] = 1;   //flag that this port is actively txing
; Line 604
	*** 001a06	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001a09	d1 e6 			shl	si,1
	*** 001a0b	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001a0e	26 c7 80 92 01 01 00 	mov	WORD PTR es:[bx+402][si],1
;|***           outp(port_list[port]+CMDR,tx_type[port]+XME); //send XTF+XME command to escc
; Line 605
	*** 001a15	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001a18	81 c3 8e 01 		add	bx,398	;018eH
	*** 001a1c	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001a1f	d1 e6 			shl	si,1
	*** 001a21	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001a24	05 02 00 		add	ax,2
	*** 001a27	50 			push	ax
	*** 001a28	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 001a2b	d1 e3 			shl	bx,1
	*** 001a2d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001a30	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001a33	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001a38	83 c4 04 		add	sp,4
;|***           return num_bytes; //done
; Line 606
	*** 001a3b	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 001a3e	e9 90 02 		jmp	$EX1601
;|***           }
; Line 607
;|***         
;|***         // If the message is too big to fit in the FIFO (> 32 bytes)
;|***         // or if this port is currently txing, 
;|***         // then we need to store the message in a txbuffer.
;|***         for(j=0;j<num_bytes;j++)   // so load the message into a txbuffer
; Line 612
					$I1613:
	*** 001a41	c7 46 f8 00 00 		mov	WORD PTR [bp-8],0	;j
	*** 001a46	e9 03 00 		jmp	$F1617
					$FC1618:
	*** 001a49	ff 46 f8 		inc	WORD PTR [bp-8]	;j
					$F1617:
	*** 001a4c	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 001a4f	39 46 f8 		cmp	WORD PTR [bp-8],ax	;j
	*** 001a52	72 03 			jb	$JCC6738
	*** 001a54	e9 2a 00 		jmp	$FB1619
					$JCC6738:
;|***           txbuffer[port][i]->frame[j] = buf[j];
; Line 613
	*** 001a57	c4 5e 0c 		les	bx,DWORD PTR [bp+12]	;buf
	*** 001a5a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;j
	*** 001a5d	26 8a 00 		mov	al,BYTE PTR es:[bx][si]
	*** 001a60	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;j
	*** 001a63	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001a66	c1 e6 04 		shl	si,4
	*** 001a69	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001a6c	c1 e6 02 		shl	si,2
	*** 001a6f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001a72	26 c4 b0 fa 00 		les	si,DWORD PTR es:[bx+250][si]
	*** 001a77	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;j
	*** 001a7a	26 88 40 06 		mov	BYTE PTR es:[bx+6][si],al
	*** 001a7e	e9 c8 ff 		jmp	$FC1618
					$FB1619:
;|***         txbuffer[port][i]->valid = 1; //flag the isr that this txbuffer has a pending message,
; Line 614
	*** 001a81	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001a84	c1 e6 04 		shl	si,4
	*** 001a87	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001a8a	c1 e6 02 		shl	si,2
	*** 001a8d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001a90	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001a95	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***         txbuffer[port][i]->max = num_bytes; //and record how many bytes are to be tx'ed.
; Line 615
	*** 001a9a	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 001a9d	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001aa0	c1 e6 04 		shl	si,4
	*** 001aa3	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001aa6	c1 e6 02 		shl	si,2
	*** 001aa9	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001aac	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001ab1	26 89 47 04 		mov	WORD PTR es:[bx+4],ax
;|***         txbuffer[port][i]->no_bytes = 0;    //no_bytes is number actually sent
; Line 616
	*** 001ab5	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001ab8	c1 e6 04 		shl	si,4
	*** 001abb	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001abe	c1 e6 02 		shl	si,2
	*** 001ac1	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001ac4	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001ac9	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***         //current_txbuf[port]++;
;|***         //if(current_txbuf[port]==max_txbuf[port]) current_txbuf[port] = 0;
;|***         if(istxing[port]==1) //If this port is currently txing, we will let the isr
; Line 619
	*** 001acf	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001ad2	81 c3 92 01 		add	bx,402	;0192H
	*** 001ad6	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001ad9	d1 e6 			shl	si,1
	*** 001adb	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 001adf	74 03 			je	$JCC6879
	*** 001ae1	e9 09 00 		jmp	$I1620
					$JCC6879:
;|***           {          //reload the FIFO and tx the data when an XPR occurs.
; Line 620
;|***           //printf("txing queued\n\r");
;|***           return j;//return number of bytes xfred       //j==num_bytes after previous for loop
; Line 622
	*** 001ae4	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;j
	*** 001ae7	e9 e7 01 		jmp	$EX1601
;|***           }
; Line 623
;|***         else // If this port is not currently txing
; Line 624
	*** 001aea	e9 93 00 		jmp	$I1621
					$I1620:
;|***              // we will load the FIFO and issue the tx command.
;|***           {
; Line 626
;|***           //printf("initiating transfer\n\r");
;|***           //outp(port_list[port]+CMDR,XRES);           //will force a tx interrupt and send the frame
;|***           if(num_bytes>32)
; Line 629
	*** 001aed	83 7e 0a 20 		cmp	WORD PTR [bp+10],32	;0020H	;num_bytes
	*** 001af1	77 03 			ja	$JCC6897
	*** 001af3	e9 84 00 		jmp	$I1622
					$JCC6897:
;|***             {
; Line 630
;|***             //printf("sending =32\n\r");
;|***             txbuffer[port][i]->no_bytes = 32;
; Line 632
	*** 001af6	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001af9	c1 e6 04 		shl	si,4
	*** 001afc	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001aff	c1 e6 02 		shl	si,2
	*** 001b02	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001b05	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001b0a	26 c7 47 02 20 00 	mov	WORD PTR es:[bx+2],32	;0020H
;|***             for(j=0;j<16;j++)
; Line 633
	*** 001b10	c7 46 f8 00 00 		mov	WORD PTR [bp-8],0	;j
	*** 001b15	e9 03 00 		jmp	$F1623
					$FC1624:
	*** 001b18	ff 46 f8 		inc	WORD PTR [bp-8]	;j
					$F1623:
	*** 001b1b	83 7e f8 10 		cmp	WORD PTR [bp-8],16	;0010H	;j
	*** 001b1f	72 03 			jb	$JCC6943
	*** 001b21	e9 25 00 		jmp	$FB1625
					$JCC6943:
;|***               outpw(port_list[port]+FIFO,bloc[j]);   //load next 32 bytes into fifo
; Line 634
	*** 001b24	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;j
	*** 001b27	d1 e3 			shl	bx,1
	*** 001b29	c4 76 fc 		les	si,DWORD PTR [bp-4]	;bloc
	*** 001b2c	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001b2f	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 001b32	d1 e3 			shl	bx,1
	*** 001b34	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001b37	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001b3a	05 20 00 		add	ax,32	;0020H
	*** 001b3d	50 			push	ax
	*** 001b3e	9a 00 00 00 00 		call	FAR PTR _outpw
	*** 001b43	83 c4 04 		add	sp,4
	*** 001b46	e9 cf ff 		jmp	$FC1624
					$FB1625:
;|***             istxing[port]=1;
; Line 635
	*** 001b49	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001b4c	d1 e6 			shl	si,1
	*** 001b4e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001b51	26 c7 80 92 01 01 00 	mov	WORD PTR es:[bx+402][si],1
;|***             outp(port_list[port]+CMDR,tx_type[port]);               //command escc to tx
; Line 636
	*** 001b58	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001b5b	81 c3 8e 01 		add	bx,398	;018eH
	*** 001b5f	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001b62	d1 e6 			shl	si,1
	*** 001b64	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001b67	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 001b6a	d1 e3 			shl	bx,1
	*** 001b6c	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001b6f	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001b72	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001b77	83 c4 04 		add	sp,4
;|***             }
; Line 637
;|***           return num_bytes; //return number of bytes xfrd
; Line 638
					$I1622:
	*** 001b7a	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 001b7d	e9 51 01 		jmp	$EX1601
;|***           }  // end else this port is not txing
; Line 639
					$I1621:
;|***         }  // end not dma
; Line 640
;|***       
;|***       else  // do a DMA style transfer
; Line 642
	*** 001b80	e9 12 01 		jmp	$I1626
					$I1612:
;|***         {
; Line 643
;|***         // printf("txing DMA style\n\r");
;|***         //
;|***         // copy the contents of the char string supplied to
;|***         // the tx_port function to the next available tx buffer
;|***         for(j=0;j<num_bytes;j++)
; Line 648
	*** 001b83	c7 46 f8 00 00 		mov	WORD PTR [bp-8],0	;j
	*** 001b88	e9 03 00 		jmp	$F1627
					$FC1628:
	*** 001b8b	ff 46 f8 		inc	WORD PTR [bp-8]	;j
					$F1627:
	*** 001b8e	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 001b91	39 46 f8 		cmp	WORD PTR [bp-8],ax	;j
	*** 001b94	72 03 			jb	$JCC7060
	*** 001b96	e9 2a 00 		jmp	$FB1629
					$JCC7060:
;|***           txbuffer[port][i]->frame[j] = buf[j];
; Line 649
	*** 001b99	c4 5e 0c 		les	bx,DWORD PTR [bp+12]	;buf
	*** 001b9c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;j
	*** 001b9f	26 8a 00 		mov	al,BYTE PTR es:[bx][si]
	*** 001ba2	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;j
	*** 001ba5	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001ba8	c1 e6 04 		shl	si,4
	*** 001bab	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001bae	c1 e6 02 		shl	si,2
	*** 001bb1	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001bb4	26 c4 b0 fa 00 		les	si,DWORD PTR es:[bx+250][si]
	*** 001bb9	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;j
	*** 001bbc	26 88 40 06 		mov	BYTE PTR es:[bx+6][si],al
	*** 001bc0	e9 c8 ff 		jmp	$FC1628
					$FB1629:
;|***         txbuffer[port][i]->valid = 1;  // mark the tx buffer as containing valid data
; Line 650
	*** 001bc3	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001bc6	c1 e6 04 		shl	si,4
	*** 001bc9	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001bcc	c1 e6 02 		shl	si,2
	*** 001bcf	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001bd2	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001bd7	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***         txbuffer[port][i]->max = num_bytes;  // max stores number of bytes to be tx'ed
; Line 651
	*** 001bdc	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;num_bytes
	*** 001bdf	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001be2	c1 e6 04 		shl	si,4
	*** 001be5	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001be8	c1 e6 02 		shl	si,2
	*** 001beb	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001bee	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001bf3	26 89 47 04 		mov	WORD PTR es:[bx+4],ax
;|***         txbuffer[port][i]->no_bytes = 0;   // 
; Line 652
	*** 001bf7	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001bfa	c1 e6 04 		shl	si,4
	*** 001bfd	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001c00	c1 e6 02 		shl	si,2
	*** 001c03	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001c06	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 001c0b	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***         
;|***         if(istxing[port]==1)  // if this port is already txing
; Line 654
	*** 001c11	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001c14	81 c3 92 01 		add	bx,402	;0192H
	*** 001c18	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001c1b	d1 e6 			shl	si,1
	*** 001c1d	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 001c21	74 03 			je	$JCC7201
	*** 001c23	e9 09 00 		jmp	$I1630
					$JCC7201:
;|***           { 
; Line 655
;|***           //printf("txing queued\n\r");
;|***           return j;// just return the number of bytes xfred
; Line 657
	*** 001c26	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;j
	*** 001c29	e9 a5 00 		jmp	$EX1601
;|***           }
; Line 658
;|***           
;|***         else   // this port is NOT already txing
; Line 660
	*** 001c2c	e9 66 00 		jmp	$I1631
					$I1630:
;|***           {
; Line 661
;|***           //ok here we initiate the dma transfer
;|***           //the num_bytes passed to the dma controller needs to be modified as the 
;|***           //16 bit dma's use half the transfers for the same num_bytes...
;|***           setupdmat(port,txbuffer[port][i]->frame,num_bytes);
; Line 665
	*** 001c2f	ff 76 10 		push	WORD PTR [bp+16]	;port
	*** 001c32	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001c35	c1 e6 04 		shl	si,4
	*** 001c38	03 76 fa 		add	si,WORD PTR [bp-6]	;i
	*** 001c3b	c1 e6 02 		shl	si,2
	*** 001c3e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001c41	26 8b 80 fa 00 		mov	ax,WORD PTR es:[bx+250][si]
	*** 001c46	26 8b 90 fc 00 		mov	dx,WORD PTR es:[bx+252][si]
	*** 001c4b	05 06 00 		add	ax,6
	*** 001c4e	52 			push	dx
	*** 001c4f	50 			push	ax
	*** 001c50	ff 76 0a 		push	WORD PTR [bp+10]	;num_bytes
	*** 001c53	ff 76 08 		push	WORD PTR [bp+8]
	*** 001c56	ff 76 06 		push	WORD PTR [bp+6]	;this
	*** 001c59	9a 00 00 00 00 		call	FAR PTR ?setupdmat@Cescc@@JECXIPEXI@Z	; Cescc::setupdmat
;|***           istxing[port] = 1;
; Line 666
	*** 001c5e	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001c61	d1 e6 			shl	si,1
	*** 001c63	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001c66	26 c7 80 92 01 01 00 	mov	WORD PTR es:[bx+402][si],1
;|***           outp(port_list[port]+CMDR,tx_type[port]);
; Line 667
	*** 001c6d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001c70	81 c3 8e 01 		add	bx,398	;018eH
	*** 001c74	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001c77	d1 e6 			shl	si,1
	*** 001c79	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001c7c	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 001c7f	d1 e3 			shl	bx,1
	*** 001c81	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001c84	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001c87	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001c8c	83 c4 04 		add	sp,4
;|***           return j;
; Line 668
	*** 001c8f	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;j
	*** 001c92	e9 3c 00 		jmp	$EX1601
;|***           }  // end else
; Line 669
					$I1631:
;|***         }  // end dma style
; Line 670
					$I1626:
;|***       }  // end if this txbuffer avaiable
; Line 671
;|***     i++; //look at next txbuffer
; Line 672
					$I1611:
	*** 001c95	ff 46 fa 		inc	WORD PTR [bp-6]	;i
;|***     if(i==max_txbuf[port]) i = 0; //if this is highest buffer, then reset to first buffer
; Line 673
	*** 001c98	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;i
	*** 001c9b	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001c9e	81 c3 86 01 		add	bx,390	;0186H
	*** 001ca2	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001ca5	d1 e6 			shl	si,1
	*** 001ca7	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 001caa	74 03 			je	$JCC7338
	*** 001cac	e9 05 00 		jmp	$I1632
					$JCC7338:
	*** 001caf	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0	;i
;|***     
;|***     }while(i!=current_txbuf[port]); //continue looking for available txbuffer until cycled through buffers once
; Line 675
					$I1632:
					$DC1609:
	*** 001cb4	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;i
	*** 001cb7	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001cba	81 c3 7e 01 		add	bx,382	;017eH
	*** 001cbe	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 001cc1	d1 e6 			shl	si,1
	*** 001cc3	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 001cc6	74 03 			je	$JCC7366
	*** 001cc8	e9 98 fc 		jmp	$D1608
					$JCC7366:
					$DB1610:
;|***   
;|***   //if here then there are no txbufs available so indicate no bytes xfred
;|***   return -3;
; Line 678
	*** 001ccb	b8 fd ff 		mov	ax,-3	;fffdH
	*** 001cce	e9 00 00 		jmp	$EX1601
;|***   }         //  end tx_port(); returns # bytes transfered,0 if fails
; Line 679
					$EX1601:
	*** 001cd1	5e 			pop	si
	*** 001cd2	5f 			pop	di
	*** 001cd3	c9 			leave	
	*** 001cd4	ca 0c 00 		ret	12	;0000000cH

?tx_port@Cescc@@RECIIPEDI@Z	ENDP
	PUBLIC	?set_control_lines@Cescc@@RECIIII@Z	; Cescc::set_control_lines
?set_control_lines@Cescc@@RECIIII@Z	PROC FAR	; Cescc::set_control_lines
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::set_control_lines(unsigned port, unsigned dtr, unsigned rts)
;|***   {
; Line 686
	*** 001cd7	c8 00 00 00 		enter	0,0
	*** 001cdb	57 			push	di
	*** 001cdc	56 			push	si
;	this = 6
;	port = 14
;	dtr = 12
;	rts = 10
;|***   
;|***   if(port_open_list!=0)
; Line 688
	*** 001cdd	8b 46 06 		mov	ax,WORD PTR [bp+6]	;this
	*** 001ce0	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 001ce3	05 04 00 		add	ax,4
	*** 001ce6	0b d0 			or	dx,ax
	*** 001ce8	75 03 			jne	$JCC7400
	*** 001cea	e9 b1 01 		jmp	$I1638
					$JCC7400:
;|***     {                                                                         
; Line 689
;|***     outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]); //select channel A or B
; Line 690
	*** 001ced	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001cf0	d1 e3 			shl	bx,1
	*** 001cf2	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001cf5	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001cf8	05 1c 00 		add	ax,28	;001cH
	*** 001cfb	50 			push	ax
	*** 001cfc	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001d01	83 c4 02 		add	sp,2
	*** 001d04	25 fe 00 		and	ax,254	;00feH
	*** 001d07	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001d0a	81 c3 9a 01 		add	bx,410	;019aH
	*** 001d0e	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 001d11	d1 e6 			shl	si,1
	*** 001d13	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 001d16	50 			push	ax
	*** 001d17	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001d1a	d1 e3 			shl	bx,1
	*** 001d1c	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001d1f	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001d22	05 1c 00 		add	ax,28	;001cH
	*** 001d25	50 			push	ax
	*** 001d26	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001d2b	83 c4 04 		add	sp,4
;|***     //needs modified for correct registers on escc
;|***     if(dtr ==1) outp(port_list[port]+PVR,inp(port_list[port]+PVR)|(1<<(3+channel[port])));//set DTR
; Line 692
	*** 001d2e	83 7e 0c 01 		cmp	WORD PTR [bp+12],1	;dtr
	*** 001d32	74 03 			je	$JCC7474
	*** 001d34	e9 48 00 		jmp	$I1639
					$JCC7474:
	*** 001d37	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001d3a	d1 e3 			shl	bx,1
	*** 001d3c	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001d3f	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001d42	05 1c 00 		add	ax,28	;001cH
	*** 001d45	50 			push	ax
	*** 001d46	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001d4b	83 c4 02 		add	sp,2
	*** 001d4e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001d51	81 c3 9a 01 		add	bx,410	;019aH
	*** 001d55	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 001d58	d1 e6 			shl	si,1
	*** 001d5a	26 8a 08 		mov	cl,BYTE PTR es:[bx][si]
	*** 001d5d	80 c1 03 		add	cl,3
	*** 001d60	ba 01 00 		mov	dx,1
	*** 001d63	d3 e2 			shl	dx,cl
	*** 001d65	0b d0 			or	dx,ax
	*** 001d67	52 			push	dx
	*** 001d68	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001d6b	d1 e3 			shl	bx,1
	*** 001d6d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001d70	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001d73	05 1c 00 		add	ax,28	;001cH
	*** 001d76	50 			push	ax
	*** 001d77	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001d7c	83 c4 04 		add	sp,4
;|***     if(channel[port]==0) if(dtr ==0) outp(port_list[port]+PVR,inp(port_list[port]+PVR)&0xf7);//clear DTR
; Line 693
					$I1639:
	*** 001d7f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001d82	81 c3 9a 01 		add	bx,410	;019aH
	*** 001d86	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 001d89	d1 e6 			shl	si,1
	*** 001d8b	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 001d8f	74 03 			je	$JCC7567
	*** 001d91	e9 3b 00 		jmp	$I1640
					$JCC7567:
	*** 001d94	83 7e 0c 00 		cmp	WORD PTR [bp+12],0	;dtr
	*** 001d98	74 03 			je	$JCC7576
	*** 001d9a	e9 32 00 		jmp	$I1641
					$JCC7576:
	*** 001d9d	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001da0	d1 e3 			shl	bx,1
	*** 001da2	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001da5	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001da8	05 1c 00 		add	ax,28	;001cH
	*** 001dab	50 			push	ax
	*** 001dac	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001db1	83 c4 02 		add	sp,2
	*** 001db4	25 f7 00 		and	ax,247	;00f7H
	*** 001db7	50 			push	ax
	*** 001db8	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001dbb	d1 e3 			shl	bx,1
	*** 001dbd	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001dc0	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001dc3	05 1c 00 		add	ax,28	;001cH
	*** 001dc6	50 			push	ax
	*** 001dc7	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001dcc	83 c4 04 		add	sp,4
;|***     if(channel[port]==1) if(dtr ==0) outp(port_list[port]+PVR,inp(port_list[port]+PVR)&0xef);
; Line 694
					$I1641:
					$I1640:
	*** 001dcf	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001dd2	81 c3 9a 01 		add	bx,410	;019aH
	*** 001dd6	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 001dd9	d1 e6 			shl	si,1
	*** 001ddb	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 001ddf	74 03 			je	$JCC7647
	*** 001de1	e9 3b 00 		jmp	$I1642
					$JCC7647:
	*** 001de4	83 7e 0c 00 		cmp	WORD PTR [bp+12],0	;dtr
	*** 001de8	74 03 			je	$JCC7656
	*** 001dea	e9 32 00 		jmp	$I1643
					$JCC7656:
	*** 001ded	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001df0	d1 e3 			shl	bx,1
	*** 001df2	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001df5	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001df8	05 1c 00 		add	ax,28	;001cH
	*** 001dfb	50 			push	ax
	*** 001dfc	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001e01	83 c4 02 		add	sp,2
	*** 001e04	25 ef 00 		and	ax,239	;00efH
	*** 001e07	50 			push	ax
	*** 001e08	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001e0b	d1 e3 			shl	bx,1
	*** 001e0d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001e10	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001e13	05 1c 00 		add	ax,28	;001cH
	*** 001e16	50 			push	ax
	*** 001e17	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001e1c	83 c4 04 		add	sp,4
;|***     if(rts ==1) outp(port_list[port]+MODE,inp(port_list[port]+MODE)|0x04);//set the rts bit in MODE
; Line 695
					$I1643:
					$I1642:
	*** 001e1f	83 7e 0a 01 		cmp	WORD PTR [bp+10],1	;rts
	*** 001e23	74 03 			je	$JCC7715
	*** 001e25	e9 32 00 		jmp	$I1644
					$JCC7715:
	*** 001e28	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001e2b	d1 e3 			shl	bx,1
	*** 001e2d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001e30	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001e33	05 02 00 		add	ax,2
	*** 001e36	50 			push	ax
	*** 001e37	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001e3c	83 c4 02 		add	sp,2
	*** 001e3f	0d 04 00 		or	ax,4
	*** 001e42	50 			push	ax
	*** 001e43	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001e46	d1 e3 			shl	bx,1
	*** 001e48	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001e4b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001e4e	05 02 00 		add	ax,2
	*** 001e51	50 			push	ax
	*** 001e52	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001e57	83 c4 04 		add	sp,4
;|***     if(rts ==0) outp(port_list[port]+MODE,inp(port_list[port]+MODE)&0xfb);//clear the RTS bit in mode
; Line 696
					$I1644:
	*** 001e5a	83 7e 0a 00 		cmp	WORD PTR [bp+10],0	;rts
	*** 001e5e	74 03 			je	$JCC7774
	*** 001e60	e9 32 00 		jmp	$I1645
					$JCC7774:
	*** 001e63	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001e66	d1 e3 			shl	bx,1
	*** 001e68	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001e6b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001e6e	05 02 00 		add	ax,2
	*** 001e71	50 			push	ax
	*** 001e72	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001e77	83 c4 02 		add	sp,2
	*** 001e7a	25 fb 00 		and	ax,251	;00fbH
	*** 001e7d	50 			push	ax
	*** 001e7e	8b 5e 0e 		mov	bx,WORD PTR [bp+14]	;port
	*** 001e81	d1 e3 			shl	bx,1
	*** 001e83	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001e86	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001e89	05 02 00 		add	ax,2
	*** 001e8c	50 			push	ax
	*** 001e8d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001e92	83 c4 04 		add	sp,4
;|***     return TRUE;
; Line 697
					$I1645:
	*** 001e95	b8 00 00 		mov	ax,0
	*** 001e98	e9 09 00 		jmp	$EX1637
;|***     }
; Line 698
;|***   else return FALSE;
; Line 699
	*** 001e9b	e9 06 00 		jmp	$I1646
					$I1638:
	*** 001e9e	b8 01 00 		mov	ax,1
	*** 001ea1	e9 00 00 		jmp	$EX1637
					$I1646:
;|***   }
; Line 700
					$EX1637:
	*** 001ea4	5e 			pop	si
	*** 001ea5	5f 			pop	di
	*** 001ea6	c9 			leave	
	*** 001ea7	ca 0a 00 		ret	10	;0000000aH

?set_control_lines@Cescc@@RECIIII@Z	ENDP
	PUBLIC	?get_control_lines@Cescc@@RECII@Z	; Cescc::get_control_lines
?get_control_lines@Cescc@@RECII@Z	PROC FAR	; Cescc::get_control_lines
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::get_control_lines(unsigned port)
;|***   {
; Line 708
	*** 001eaa	c8 0c 00 00 		enter	12,0
	*** 001eae	57 			push	di
	*** 001eaf	56 			push	si
;	cts = -2
;	dsr = -4
;	dcd = -6
;	dtr = -8
;	rts = -10
;	retval = -12
;	this = 6
;	port = 10
;|***   unsigned cts,dsr,dcd,dtr,rts;
;|***   unsigned retval;
;|***   
;|***   if(port_open_list!=0)
; Line 712
	*** 001eb0	8b 46 06 		mov	ax,WORD PTR [bp+6]	;this
	*** 001eb3	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 001eb6	05 04 00 		add	ax,4
	*** 001eb9	0b d0 			or	dx,ax
	*** 001ebb	75 03 			jne	$JCC7867
	*** 001ebd	e9 21 01 		jmp	$I1656
					$JCC7867:
;|***     {
; Line 713
;|***     outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]); //select channel A or B
; Line 714
	*** 001ec0	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 001ec3	d1 e3 			shl	bx,1
	*** 001ec5	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001ec8	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001ecb	05 1c 00 		add	ax,28	;001cH
	*** 001ece	50 			push	ax
	*** 001ecf	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001ed4	83 c4 02 		add	sp,2
	*** 001ed7	25 fe 00 		and	ax,254	;00feH
	*** 001eda	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001edd	81 c3 9a 01 		add	bx,410	;019aH
	*** 001ee1	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 001ee4	d1 e6 			shl	si,1
	*** 001ee6	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 001ee9	50 			push	ax
	*** 001eea	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 001eed	d1 e3 			shl	bx,1
	*** 001eef	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001ef2	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001ef5	05 1c 00 		add	ax,28	;001cH
	*** 001ef8	50 			push	ax
	*** 001ef9	9a 00 00 00 00 		call	FAR PTR _outp
	*** 001efe	83 c4 04 		add	sp,4
;|***     //needs modified for correct registers on escc
;|***     dsr = (inp(port_list[port]+PVR)>>5+channel[port])&0x01;
; Line 716
	*** 001f01	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 001f04	d1 e3 			shl	bx,1
	*** 001f06	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001f09	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001f0c	05 1c 00 		add	ax,28	;001cH
	*** 001f0f	50 			push	ax
	*** 001f10	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001f15	83 c4 02 		add	sp,2
	*** 001f18	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001f1b	81 c3 9a 01 		add	bx,410	;019aH
	*** 001f1f	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 001f22	d1 e6 			shl	si,1
	*** 001f24	26 8a 08 		mov	cl,BYTE PTR es:[bx][si]
	*** 001f27	80 c1 05 		add	cl,5
	*** 001f2a	d3 f8 			sar	ax,cl
	*** 001f2c	25 01 00 		and	ax,1
	*** 001f2f	89 46 fc 		mov	WORD PTR [bp-4],ax	;dsr
;|***     dtr = (inp(port_list[port]+PVR)>>3+channel[port])&1;
; Line 717
	*** 001f32	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 001f35	d1 e3 			shl	bx,1
	*** 001f37	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001f3a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001f3d	05 1c 00 		add	ax,28	;001cH
	*** 001f40	50 			push	ax
	*** 001f41	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001f46	83 c4 02 		add	sp,2
	*** 001f49	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001f4c	81 c3 9a 01 		add	bx,410	;019aH
	*** 001f50	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 001f53	d1 e6 			shl	si,1
	*** 001f55	26 8a 08 		mov	cl,BYTE PTR es:[bx][si]
	*** 001f58	80 c1 03 		add	cl,3
	*** 001f5b	d3 f8 			sar	ax,cl
	*** 001f5d	25 01 00 		and	ax,1
	*** 001f60	89 46 f8 		mov	WORD PTR [bp-8],ax	;dtr
;|***     rts = (inp(port_list[port]+MODE)>>2)&1;
; Line 718
	*** 001f63	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 001f66	d1 e3 			shl	bx,1
	*** 001f68	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001f6b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001f6e	05 02 00 		add	ax,2
	*** 001f71	50 			push	ax
	*** 001f72	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001f77	83 c4 02 		add	sp,2
	*** 001f7a	25 04 00 		and	ax,4
	*** 001f7d	c1 f8 02 		sar	ax,2
	*** 001f80	89 46 f6 		mov	WORD PTR [bp-10],ax	;rts
;|***     dcd = (inp(port_list[port]+VSTR)>>7)&1;
; Line 719
	*** 001f83	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 001f86	d1 e3 			shl	bx,1
	*** 001f88	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001f8b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 001f8e	05 14 00 		add	ax,20	;0014H
	*** 001f91	50 			push	ax
	*** 001f92	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001f97	83 c4 02 		add	sp,2
	*** 001f9a	25 80 00 		and	ax,128	;0080H
	*** 001f9d	c1 f8 07 		sar	ax,7
	*** 001fa0	89 46 fa 		mov	WORD PTR [bp-6],ax	;dcd
;|***     cts = (inp(port_list[port]+STAR)>>1)&1;
; Line 720
	*** 001fa3	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 001fa6	d1 e3 			shl	bx,1
	*** 001fa8	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 001fab	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 001fae	9a 00 00 00 00 		call	FAR PTR _inp
	*** 001fb3	83 c4 02 		add	sp,2
	*** 001fb6	25 02 00 		and	ax,2
	*** 001fb9	d1 f8 			sar	ax,1
	*** 001fbb	89 46 fe 		mov	WORD PTR [bp-2],ax	;cts
;|***     retval = (dsr<<4)+(dtr<<3)+(dcd<<2)+(cts<<1)+rts;
; Line 721
	*** 001fbe	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;dsr
	*** 001fc1	d1 e0 			shl	ax,1
	*** 001fc3	03 46 f8 		add	ax,WORD PTR [bp-8]	;dtr
	*** 001fc6	d1 e0 			shl	ax,1
	*** 001fc8	03 46 fa 		add	ax,WORD PTR [bp-6]	;dcd
	*** 001fcb	d1 e0 			shl	ax,1
	*** 001fcd	03 46 fe 		add	ax,WORD PTR [bp-2]	;cts
	*** 001fd0	d1 e0 			shl	ax,1
	*** 001fd2	03 46 f6 		add	ax,WORD PTR [bp-10]	;rts
	*** 001fd5	89 46 f4 		mov	WORD PTR [bp-12],ax	;retval
;|***     return retval;  //return  = bit flags  X X X DSR DTR DCD CTS RTS
; Line 722
	*** 001fd8	8b 46 f4 		mov	ax,WORD PTR [bp-12]	;retval
	*** 001fdb	e9 09 00 		jmp	$EX1649
;|***     }
; Line 723
;|***   else return 0;
; Line 724
	*** 001fde	e9 06 00 		jmp	$I1657
					$I1656:
	*** 001fe1	b8 00 00 		mov	ax,0
	*** 001fe4	e9 00 00 		jmp	$EX1649
					$I1657:
;|***   }
; Line 725
					$EX1649:
	*** 001fe7	5e 			pop	si
	*** 001fe8	5f 			pop	di
	*** 001fe9	c9 			leave	
	*** 001fea	ca 06 00 		ret	6

?get_control_lines@Cescc@@RECII@Z	ENDP
	PUBLIC	?get_port_status@Cescc@@RECII@Z	; Cescc::get_port_status
?get_port_status@Cescc@@RECII@Z	PROC FAR	; Cescc::get_port_status
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::get_port_status(unsigned port)
;|***   {
; Line 733
	*** 001fed	c8 02 00 00 		enter	2,0
	*** 001ff1	57 			push	di
	*** 001ff2	56 			push	si
;	st = -2
;	this = 6
;	port = 10
;|***   unsigned st;
;|***   
;|***   if(port_open_list[port]!=0)
; Line 736
	*** 001ff3	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 001ff6	83 c3 04 		add	bx,4
	*** 001ff9	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 001ffc	d1 e6 			shl	si,1
	*** 001ffe	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 002002	75 03 			jne	$JCC8194
	*** 002004	e9 2a 00 		jmp	$I1662
					$JCC8194:
;|***     {
; Line 737
;|***     st = port_status[port];
; Line 738
	*** 002007	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00200a	81 c3 96 01 		add	bx,406	;0196H
	*** 00200e	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002011	d1 e6 			shl	si,1
	*** 002013	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002016	89 46 fe 		mov	WORD PTR [bp-2],ax	;st
;|***     port_status[port] = 0;
; Line 739
	*** 002019	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00201c	d1 e6 			shl	si,1
	*** 00201e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002021	26 c7 80 96 01 00 00 	mov	WORD PTR es:[bx+406][si],0
;|***     return st;
; Line 740
	*** 002028	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;st
	*** 00202b	e9 09 00 		jmp	$EX1660
;|***     }
; Line 741
;|***   else return 0;
; Line 742
	*** 00202e	e9 06 00 		jmp	$I1663
					$I1662:
	*** 002031	b8 00 00 		mov	ax,0
	*** 002034	e9 00 00 		jmp	$EX1660
					$I1663:
;|***   }
; Line 743
					$EX1660:
	*** 002037	5e 			pop	si
	*** 002038	5f 			pop	di
	*** 002039	c9 			leave	
	*** 00203a	ca 06 00 		ret	6

?get_port_status@Cescc@@RECII@Z	ENDP
	PUBLIC	?clear_rx_buffer@Cescc@@RECII@Z	; Cescc::clear_rx_buffer
?clear_rx_buffer@Cescc@@RECII@Z	PROC FAR	; Cescc::clear_rx_buffer
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::clear_rx_buffer(unsigned port)
;|***   {
; Line 751
	*** 00203d	c8 02 00 00 		enter	2,0
	*** 002041	57 			push	di
	*** 002042	56 			push	si
;	i = -2
;	this = 6
;	port = 10
;|***   //set all rxbuffer[port][..].valid = 0 here                             
;|***   //and reset the receiver on the 82526
;|***   unsigned i;
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);  //select channel A or B
; Line 755
	*** 002043	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 002046	d1 e3 			shl	bx,1
	*** 002048	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00204b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00204e	05 1c 00 		add	ax,28	;001cH
	*** 002051	50 			push	ax
	*** 002052	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002057	83 c4 02 		add	sp,2
	*** 00205a	25 fe 00 		and	ax,254	;00feH
	*** 00205d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002060	81 c3 9a 01 		add	bx,410	;019aH
	*** 002064	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002067	d1 e6 			shl	si,1
	*** 002069	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 00206c	50 			push	ax
	*** 00206d	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 002070	d1 e3 			shl	bx,1
	*** 002072	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002075	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002078	05 1c 00 		add	ax,28	;001cH
	*** 00207b	50 			push	ax
	*** 00207c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002081	83 c4 04 		add	sp,4
;|***   if(port_open_list[port] != 0)
; Line 756
	*** 002084	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002087	83 c3 04 		add	bx,4
	*** 00208a	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00208d	d1 e6 			shl	si,1
	*** 00208f	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 002093	75 03 			jne	$JCC8339
	*** 002095	e9 9c 00 		jmp	$I1668
					$JCC8339:
;|***     {
; Line 757
;|***     if(rxbuffer[port]!=NULL)
; Line 758
	*** 002098	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;port
	*** 00209b	c1 e0 06 		shl	ax,6
	*** 00209e	03 46 06 		add	ax,WORD PTR [bp+6]	;this
	*** 0020a1	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 0020a4	05 7a 00 		add	ax,122	;007aH
	*** 0020a7	0b d0 			or	dx,ax
	*** 0020a9	75 03 			jne	$JCC8361
	*** 0020ab	e9 86 00 		jmp	$I1669
					$JCC8361:
;|***       {
; Line 759
;|***       for(i=0;i<max_rxbuf[port];i++) rxbuffer[port][i]->valid = 0;//wipe all received frames
; Line 760
	*** 0020ae	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 0020b3	e9 03 00 		jmp	$F1670
					$FC1671:
	*** 0020b6	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1670:
	*** 0020b9	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 0020bc	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0020bf	81 c3 82 01 		add	bx,386	;0182H
	*** 0020c3	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0020c6	d1 e6 			shl	si,1
	*** 0020c8	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0020cb	77 03 			ja	$JCC8395
	*** 0020cd	e9 1b 00 		jmp	$FB1672
					$JCC8395:
	*** 0020d0	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0020d3	c1 e6 04 		shl	si,4
	*** 0020d6	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 0020d9	c1 e6 02 		shl	si,2
	*** 0020dc	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0020df	26 c4 58 7a 		les	bx,DWORD PTR es:[bx+122][si]
	*** 0020e3	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
	*** 0020e8	e9 cb ff 		jmp	$FC1671
					$FB1672:
;|***       current_rxbuf[port] = 0;  
; Line 761
	*** 0020eb	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0020ee	d1 e6 			shl	si,1
	*** 0020f0	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0020f3	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***       port_status[port] = port_status[port]&0xfdff;//reset the rxready condition
; Line 762
	*** 0020fa	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0020fd	81 c3 96 01 		add	bx,406	;0196H
	*** 002101	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002104	d1 e6 			shl	si,1
	*** 002106	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002109	25 ff fd 		and	ax,-513	;fdffH
	*** 00210c	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00210f	d1 e6 			shl	si,1
	*** 002111	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002114	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***       outp(port_list[port]+CMDR,RHR); //reset the HDLC receiver
; Line 763
	*** 002119	6a 40 			push	64	;0040H
	*** 00211b	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 00211e	d1 e3 			shl	bx,1
	*** 002120	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002123	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 002126	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00212b	83 c4 04 		add	sp,4
;|***       return TRUE;                    //success 
; Line 764
	*** 00212e	b8 00 00 		mov	ax,0
	*** 002131	e9 06 00 		jmp	$EX1666
;|***       }
; Line 765
;|***     }
; Line 766
					$I1669:
;|***     
;|***   return FALSE;         //no rxbuffer pointer so port not open (failed)
; Line 768
					$I1668:
	*** 002134	b8 01 00 		mov	ax,1
	*** 002137	e9 00 00 		jmp	$EX1666
;|***   }
; Line 769
					$EX1666:
	*** 00213a	5e 			pop	si
	*** 00213b	5f 			pop	di
	*** 00213c	c9 			leave	
	*** 00213d	ca 06 00 		ret	6

?clear_rx_buffer@Cescc@@RECII@Z	ENDP
	PUBLIC	?clear_tx_buffer@Cescc@@RECII@Z	; Cescc::clear_tx_buffer
?clear_tx_buffer@Cescc@@RECII@Z	PROC FAR	; Cescc::clear_tx_buffer
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::clear_tx_buffer(unsigned port)
;|***   {          
; Line 776
	*** 002140	c8 02 00 00 		enter	2,0
	*** 002144	57 			push	di
	*** 002145	56 			push	si
;	i = -2
;	this = 6
;	port = 10
;|***   unsigned i;
;|***   //set all txbuffer[port][..].valid = 0 here
;|***   //and reset the transmitter on the 82526
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]); //select channel A or B
; Line 780
	*** 002146	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 002149	d1 e3 			shl	bx,1
	*** 00214b	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00214e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002151	05 1c 00 		add	ax,28	;001cH
	*** 002154	50 			push	ax
	*** 002155	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00215a	83 c4 02 		add	sp,2
	*** 00215d	25 fe 00 		and	ax,254	;00feH
	*** 002160	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002163	81 c3 9a 01 		add	bx,410	;019aH
	*** 002167	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00216a	d1 e6 			shl	si,1
	*** 00216c	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 00216f	50 			push	ax
	*** 002170	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 002173	d1 e3 			shl	bx,1
	*** 002175	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002178	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00217b	05 1c 00 		add	ax,28	;001cH
	*** 00217e	50 			push	ax
	*** 00217f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002184	83 c4 04 		add	sp,4
;|***   if(port_open_list[port] != 0)                                             
; Line 781
	*** 002187	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00218a	83 c3 04 		add	bx,4
	*** 00218d	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002190	d1 e6 			shl	si,1
	*** 002192	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 002196	75 03 			jne	$JCC8598
	*** 002198	e9 8d 00 		jmp	$I1677
					$JCC8598:
;|***     {
; Line 782
;|***     if(txbuffer[port]!=NULL)
; Line 783
	*** 00219b	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;port
	*** 00219e	c1 e0 06 		shl	ax,6
	*** 0021a1	03 46 06 		add	ax,WORD PTR [bp+6]	;this
	*** 0021a4	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 0021a7	05 fa 00 		add	ax,250	;00faH
	*** 0021aa	0b d0 			or	dx,ax
	*** 0021ac	75 03 			jne	$JCC8620
	*** 0021ae	e9 77 00 		jmp	$I1678
					$JCC8620:
;|***       {          
; Line 784
;|***       for(i=0;i<max_txbuf[port];i++) txbuffer[port][i]->valid = 0; //wipe all data frames to be sent
; Line 785
	*** 0021b1	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 0021b6	e9 03 00 		jmp	$F1679
					$FC1680:
	*** 0021b9	ff 46 fe 		inc	WORD PTR [bp-2]	;i
					$F1679:
	*** 0021bc	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;i
	*** 0021bf	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0021c2	81 c3 86 01 		add	bx,390	;0186H
	*** 0021c6	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0021c9	d1 e6 			shl	si,1
	*** 0021cb	26 39 00 		cmp	WORD PTR es:[bx][si],ax
	*** 0021ce	77 03 			ja	$JCC8654
	*** 0021d0	e9 1c 00 		jmp	$FB1681
					$JCC8654:
	*** 0021d3	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0021d6	c1 e6 04 		shl	si,4
	*** 0021d9	03 76 fe 		add	si,WORD PTR [bp-2]	;i
	*** 0021dc	c1 e6 02 		shl	si,2
	*** 0021df	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0021e2	26 c4 98 fa 00 		les	bx,DWORD PTR es:[bx+250][si]
	*** 0021e7	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
	*** 0021ec	e9 ca ff 		jmp	$FC1680
					$FB1681:
;|***       istxing[port] = 0;  //not sending anymore
; Line 786
	*** 0021ef	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0021f2	d1 e6 			shl	si,1
	*** 0021f4	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0021f7	26 c7 80 92 01 00 00 	mov	WORD PTR es:[bx+402][si],0
;|***       current_txbuf[port] = 0;
; Line 787
	*** 0021fe	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002201	d1 e6 			shl	si,1
	*** 002203	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002206	26 c7 80 7e 01 00 00 	mov	WORD PTR es:[bx+382][si],0
;|***       outp(port_list[port]+CMDR,XRES);//reset the transmitter
; Line 788
	*** 00220d	6a 01 			push	1
	*** 00220f	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 002212	d1 e3 			shl	bx,1
	*** 002214	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002217	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00221a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00221f	83 c4 04 		add	sp,4
;|***       return TRUE;
; Line 789
	*** 002222	b8 00 00 		mov	ax,0
	*** 002225	e9 06 00 		jmp	$EX1675
;|***       }
; Line 790
;|***     }
; Line 791
					$I1678:
;|***   return FALSE; //port not open or buffer not allocated return false (failed)
; Line 792
					$I1677:
	*** 002228	b8 01 00 		mov	ax,1
	*** 00222b	e9 00 00 		jmp	$EX1675
;|***   }
; Line 793
					$EX1675:
	*** 00222e	5e 			pop	si
	*** 00222f	5f 			pop	di
	*** 002230	c9 			leave	
	*** 002231	ca 06 00 		ret	6

?clear_tx_buffer@Cescc@@RECII@Z	ENDP
	PUBLIC	?set_tx_type@Cescc@@RECIII@Z	; Cescc::set_tx_type
?set_tx_type@Cescc@@RECIII@Z	PROC FAR	; Cescc::set_tx_type
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::set_tx_type(unsigned port,unsigned type)
;|***   {
; Line 801
	*** 002234	c8 00 00 00 		enter	0,0
	*** 002238	57 			push	di
	*** 002239	56 			push	si
;	this = 6
;	port = 12
;	type = 10
;|***   //quite specific to hdlc/sdlc
;|***   if(type==AUTO_MODE) tx_type[port]=0x04;
; Line 803
	*** 00223a	83 7e 0a 00 		cmp	WORD PTR [bp+10],0	;type
	*** 00223e	74 03 			je	$JCC8766
	*** 002240	e9 0f 00 		jmp	$I1686
					$JCC8766:
	*** 002243	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 002246	d1 e6 			shl	si,1
	*** 002248	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00224b	26 c7 80 8e 01 04 00 	mov	WORD PTR es:[bx+398][si],4
;|***   if(type==TRANSPARENT_MODE) tx_type[port] = 0x08;
; Line 804
					$I1686:
	*** 002252	83 7e 0a 01 		cmp	WORD PTR [bp+10],1	;type
	*** 002256	74 03 			je	$JCC8790
	*** 002258	e9 0f 00 		jmp	$I1687
					$JCC8790:
	*** 00225b	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 00225e	d1 e6 			shl	si,1
	*** 002260	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002263	26 c7 80 8e 01 08 00 	mov	WORD PTR es:[bx+398][si],8
;|***   return TRUE;
; Line 805
					$I1687:
	*** 00226a	b8 00 00 		mov	ax,0
	*** 00226d	e9 00 00 		jmp	$EX1685
;|***   }
; Line 806
					$EX1685:
	*** 002270	5e 			pop	si
	*** 002271	5f 			pop	di
	*** 002272	c9 			leave	
	*** 002273	ca 08 00 		ret	8

?set_tx_type@Cescc@@RECIII@Z	ENDP
	PUBLIC	?set_tx_address@Cescc@@RECIII@Z	; Cescc::set_tx_address
?set_tx_address@Cescc@@RECIII@Z	PROC FAR	; Cescc::set_tx_address
;|***   
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::set_tx_address(unsigned port,unsigned address)
;|***   {
; Line 812
	*** 002276	c8 00 00 00 		enter	0,0
	*** 00227a	57 			push	di
	*** 00227b	56 			push	si
;	this = 6
;	port = 12
;	address = 10
;|***   //xad1 is high byte
;|***   //xad2 is low byte
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);
; Line 815
	*** 00227c	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 00227f	d1 e3 			shl	bx,1
	*** 002281	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002284	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002287	05 1c 00 		add	ax,28	;001cH
	*** 00228a	50 			push	ax
	*** 00228b	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002290	83 c4 02 		add	sp,2
	*** 002293	25 fe 00 		and	ax,254	;00feH
	*** 002296	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002299	81 c3 9a 01 		add	bx,410	;019aH
	*** 00229d	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 0022a0	d1 e6 			shl	si,1
	*** 0022a2	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 0022a5	50 			push	ax
	*** 0022a6	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 0022a9	d1 e3 			shl	bx,1
	*** 0022ab	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0022ae	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0022b1	05 1c 00 		add	ax,28	;001cH
	*** 0022b4	50 			push	ax
	*** 0022b5	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0022ba	83 c4 04 		add	sp,4
;|***   if(port_open_list[port] != 0)
; Line 816
	*** 0022bd	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0022c0	83 c3 04 		add	bx,4
	*** 0022c3	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 0022c6	d1 e6 			shl	si,1
	*** 0022c8	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 0022cc	75 03 			jne	$JCC8908
	*** 0022ce	e9 43 00 		jmp	$I1692
					$JCC8908:
;|***     {
; Line 817
;|***     outp(port_list[port]+XAD2,address&0xff);
; Line 818
	*** 0022d1	8a 46 0a 		mov	al,BYTE PTR [bp+10]	;address
	*** 0022d4	2a e4 			sub	ah,ah
	*** 0022d6	50 			push	ax
	*** 0022d7	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 0022da	d1 e3 			shl	bx,1
	*** 0022dc	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0022df	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0022e2	05 05 00 		add	ax,5
	*** 0022e5	50 			push	ax
	*** 0022e6	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0022eb	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+XAD1,address>>8);
; Line 819
	*** 0022ee	8a 46 0b 		mov	al,BYTE PTR [bp+11]
	*** 0022f1	2a e4 			sub	ah,ah
	*** 0022f3	50 			push	ax
	*** 0022f4	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 0022f7	d1 e3 			shl	bx,1
	*** 0022f9	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0022fc	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0022ff	05 04 00 		add	ax,4
	*** 002302	50 			push	ax
	*** 002303	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002308	83 c4 04 		add	sp,4
;|***     return TRUE;
; Line 820
	*** 00230b	b8 00 00 		mov	ax,0
	*** 00230e	e9 09 00 		jmp	$EX1691
;|***     }
; Line 821
;|***   else return FALSE;
; Line 822
	*** 002311	e9 06 00 		jmp	$I1693
					$I1692:
	*** 002314	b8 01 00 		mov	ax,1
	*** 002317	e9 00 00 		jmp	$EX1691
					$I1693:
;|***   }
; Line 823
					$EX1691:
	*** 00231a	5e 			pop	si
	*** 00231b	5f 			pop	di
	*** 00231c	c9 			leave	
	*** 00231d	ca 08 00 		ret	8

?set_tx_address@Cescc@@RECIII@Z	ENDP
	PUBLIC	?set_rx_address1@Cescc@@RECIII@Z	; Cescc::set_rx_address1
?set_rx_address1@Cescc@@RECIII@Z	PROC FAR	; Cescc::set_rx_address1
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::set_rx_address1(unsigned port,unsigned address)
;|***   {                                                                         
; Line 831
	*** 002320	c8 00 00 00 		enter	0,0
	*** 002324	57 			push	di
	*** 002325	56 			push	si
;	this = 6
;	port = 12
;	address = 10
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);  //select channel A or B
; Line 832
	*** 002326	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 002329	d1 e3 			shl	bx,1
	*** 00232b	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00232e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002331	05 1c 00 		add	ax,28	;001cH
	*** 002334	50 			push	ax
	*** 002335	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00233a	83 c4 02 		add	sp,2
	*** 00233d	25 fe 00 		and	ax,254	;00feH
	*** 002340	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002343	81 c3 9a 01 		add	bx,410	;019aH
	*** 002347	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 00234a	d1 e6 			shl	si,1
	*** 00234c	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 00234f	50 			push	ax
	*** 002350	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 002353	d1 e3 			shl	bx,1
	*** 002355	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002358	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00235b	05 1c 00 		add	ax,28	;001cH
	*** 00235e	50 			push	ax
	*** 00235f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002364	83 c4 04 		add	sp,4
;|***   if(port_open_list[port] != 0)
; Line 833
	*** 002367	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00236a	83 c3 04 		add	bx,4
	*** 00236d	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 002370	d1 e6 			shl	si,1
	*** 002372	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 002376	75 03 			jne	$JCC9078
	*** 002378	e9 43 00 		jmp	$I1698
					$JCC9078:
;|***     {
; Line 834
;|***     outp(port_list[port]+RAL1,address&0xff);
; Line 835
	*** 00237b	8a 46 0a 		mov	al,BYTE PTR [bp+10]	;address
	*** 00237e	2a e4 			sub	ah,ah
	*** 002380	50 			push	ax
	*** 002381	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 002384	d1 e3 			shl	bx,1
	*** 002386	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002389	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00238c	05 08 00 		add	ax,8
	*** 00238f	50 			push	ax
	*** 002390	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002395	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAH1,address>>8);
; Line 836
	*** 002398	8a 46 0b 		mov	al,BYTE PTR [bp+11]
	*** 00239b	2a e4 			sub	ah,ah
	*** 00239d	50 			push	ax
	*** 00239e	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 0023a1	d1 e3 			shl	bx,1
	*** 0023a3	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0023a6	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0023a9	05 06 00 		add	ax,6
	*** 0023ac	50 			push	ax
	*** 0023ad	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0023b2	83 c4 04 		add	sp,4
;|***     return TRUE;
; Line 837
	*** 0023b5	b8 00 00 		mov	ax,0
	*** 0023b8	e9 09 00 		jmp	$EX1697
;|***     }
; Line 838
;|***   else return FALSE;
; Line 839
	*** 0023bb	e9 06 00 		jmp	$I1699
					$I1698:
	*** 0023be	b8 01 00 		mov	ax,1
	*** 0023c1	e9 00 00 		jmp	$EX1697
					$I1699:
;|***   }
; Line 840
					$EX1697:
	*** 0023c4	5e 			pop	si
	*** 0023c5	5f 			pop	di
	*** 0023c6	c9 			leave	
	*** 0023c7	ca 08 00 		ret	8

?set_rx_address1@Cescc@@RECIII@Z	ENDP
	PUBLIC	?set_rx_address2@Cescc@@RECIII@Z	; Cescc::set_rx_address2
?set_rx_address2@Cescc@@RECIII@Z	PROC FAR	; Cescc::set_rx_address2
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::set_rx_address2(unsigned port,unsigned address)
;|***   {                                                                         
; Line 848
	*** 0023ca	c8 00 00 00 		enter	0,0
	*** 0023ce	57 			push	di
	*** 0023cf	56 			push	si
;	this = 6
;	port = 12
;	address = 10
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);
; Line 849
	*** 0023d0	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 0023d3	d1 e3 			shl	bx,1
	*** 0023d5	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0023d8	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0023db	05 1c 00 		add	ax,28	;001cH
	*** 0023de	50 			push	ax
	*** 0023df	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0023e4	83 c4 02 		add	sp,2
	*** 0023e7	25 fe 00 		and	ax,254	;00feH
	*** 0023ea	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0023ed	81 c3 9a 01 		add	bx,410	;019aH
	*** 0023f1	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 0023f4	d1 e6 			shl	si,1
	*** 0023f6	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 0023f9	50 			push	ax
	*** 0023fa	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 0023fd	d1 e3 			shl	bx,1
	*** 0023ff	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002402	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002405	05 1c 00 		add	ax,28	;001cH
	*** 002408	50 			push	ax
	*** 002409	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00240e	83 c4 04 		add	sp,4
;|***   if(port_open_list[port] != 0)
; Line 850
	*** 002411	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002414	83 c3 04 		add	bx,4
	*** 002417	8b 76 0c 		mov	si,WORD PTR [bp+12]	;port
	*** 00241a	d1 e6 			shl	si,1
	*** 00241c	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 002420	75 03 			jne	$JCC9248
	*** 002422	e9 43 00 		jmp	$I1704
					$JCC9248:
;|***     {
; Line 851
;|***     outp(port_list[port]+RAL2,address&0xff);
; Line 852
	*** 002425	8a 46 0a 		mov	al,BYTE PTR [bp+10]	;address
	*** 002428	2a e4 			sub	ah,ah
	*** 00242a	50 			push	ax
	*** 00242b	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 00242e	d1 e3 			shl	bx,1
	*** 002430	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002433	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002436	05 09 00 		add	ax,9
	*** 002439	50 			push	ax
	*** 00243a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00243f	83 c4 04 		add	sp,4
;|***     outp(port_list[port]+RAH2,address>>8);
; Line 853
	*** 002442	8a 46 0b 		mov	al,BYTE PTR [bp+11]
	*** 002445	2a e4 			sub	ah,ah
	*** 002447	50 			push	ax
	*** 002448	8b 5e 0c 		mov	bx,WORD PTR [bp+12]	;port
	*** 00244b	d1 e3 			shl	bx,1
	*** 00244d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002450	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002453	05 07 00 		add	ax,7
	*** 002456	50 			push	ax
	*** 002457	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00245c	83 c4 04 		add	sp,4
;|***     return TRUE;
; Line 854
	*** 00245f	b8 00 00 		mov	ax,0
	*** 002462	e9 09 00 		jmp	$EX1703
;|***     }
; Line 855
;|***   else return FALSE;
; Line 856
	*** 002465	e9 06 00 		jmp	$I1705
					$I1704:
	*** 002468	b8 01 00 		mov	ax,1
	*** 00246b	e9 00 00 		jmp	$EX1703
					$I1705:
;|***   }
; Line 857
					$EX1703:
	*** 00246e	5e 			pop	si
	*** 00246f	5f 			pop	di
	*** 002470	c9 			leave	
	*** 002471	ca 08 00 		ret	8

?set_rx_address2@Cescc@@RECIII@Z	ENDP
	PUBLIC	?start_timer@Cescc@@RECII@Z	; Cescc::start_timer
?start_timer@Cescc@@RECII@Z	PROC FAR	; Cescc::start_timer
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::start_timer(unsigned port)
;|***   {                                                                         
; Line 865
	*** 002474	c8 00 00 00 		enter	0,0
	*** 002478	57 			push	di
	*** 002479	56 			push	si
;	this = 6
;	port = 10
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);
; Line 866
	*** 00247a	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 00247d	d1 e3 			shl	bx,1
	*** 00247f	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002482	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002485	05 1c 00 		add	ax,28	;001cH
	*** 002488	50 			push	ax
	*** 002489	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00248e	83 c4 02 		add	sp,2
	*** 002491	25 fe 00 		and	ax,254	;00feH
	*** 002494	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002497	81 c3 9a 01 		add	bx,410	;019aH
	*** 00249b	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00249e	d1 e6 			shl	si,1
	*** 0024a0	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 0024a3	50 			push	ax
	*** 0024a4	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 0024a7	d1 e3 			shl	bx,1
	*** 0024a9	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0024ac	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0024af	05 1c 00 		add	ax,28	;001cH
	*** 0024b2	50 			push	ax
	*** 0024b3	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0024b8	83 c4 04 		add	sp,4
;|***   if(port_open_list[port] != 0)
; Line 867
	*** 0024bb	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0024be	83 c3 04 		add	bx,4
	*** 0024c1	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0024c4	d1 e6 			shl	si,1
	*** 0024c6	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 0024ca	75 03 			jne	$JCC9418
	*** 0024cc	e9 2d 00 		jmp	$I1709
					$JCC9418:
;|***     {
; Line 868
;|***     timer_status[port] = 0;
; Line 869
	*** 0024cf	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0024d2	d1 e6 			shl	si,1
	*** 0024d4	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0024d7	26 c7 80 8a 01 00 00 	mov	WORD PTR es:[bx+394][si],0
;|***     outp(port_list[port]+CMDR,STI);//send start timer command
; Line 870
	*** 0024de	6a 10 			push	16	;0010H
	*** 0024e0	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 0024e3	d1 e3 			shl	bx,1
	*** 0024e5	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 0024e8	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 0024eb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0024f0	83 c4 04 		add	sp,4
;|***     return TRUE;
; Line 871
	*** 0024f3	b8 00 00 		mov	ax,0
	*** 0024f6	e9 09 00 		jmp	$EX1708
;|***     }
; Line 872
;|***   else return FALSE;
; Line 873
	*** 0024f9	e9 06 00 		jmp	$I1710
					$I1709:
	*** 0024fc	b8 01 00 		mov	ax,1
	*** 0024ff	e9 00 00 		jmp	$EX1708
					$I1710:
;|***   }                 
; Line 874
					$EX1708:
	*** 002502	5e 			pop	si
	*** 002503	5f 			pop	di
	*** 002504	c9 			leave	
	*** 002505	ca 06 00 		ret	6

?start_timer@Cescc@@RECII@Z	ENDP
	PUBLIC	?stop_timer@Cescc@@RECII@Z	; Cescc::stop_timer
?stop_timer@Cescc@@RECII@Z	PROC FAR	; Cescc::stop_timer
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::stop_timer(unsigned port)                                 
;|***   {
; Line 882
	*** 002508	c8 00 00 00 		enter	0,0
	*** 00250c	57 			push	di
	*** 00250d	56 			push	si
;	this = 6
;	port = 10
;|***   outp(port_list[port]+PVR,(inp(port_list[port]+PVR)&0xfe)+channel[port]);
; Line 883
	*** 00250e	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 002511	d1 e3 			shl	bx,1
	*** 002513	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002516	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002519	05 1c 00 		add	ax,28	;001cH
	*** 00251c	50 			push	ax
	*** 00251d	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002522	83 c4 02 		add	sp,2
	*** 002525	25 fe 00 		and	ax,254	;00feH
	*** 002528	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 00252b	81 c3 9a 01 		add	bx,410	;019aH
	*** 00252f	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002532	d1 e6 			shl	si,1
	*** 002534	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 002537	50 			push	ax
	*** 002538	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 00253b	d1 e3 			shl	bx,1
	*** 00253d	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002540	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002543	05 1c 00 		add	ax,28	;001cH
	*** 002546	50 			push	ax
	*** 002547	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00254c	83 c4 04 		add	sp,4
;|***   if(port_open_list[port] != 0)
; Line 884
	*** 00254f	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002552	83 c3 04 		add	bx,4
	*** 002555	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002558	d1 e6 			shl	si,1
	*** 00255a	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 00255e	75 03 			jne	$JCC9566
	*** 002560	e9 38 00 		jmp	$I1714
					$JCC9566:
;|***     {
; Line 885
;|***     outp(port_list[port]+TIMR,inp(port_list[port]+TIMR));//writing the timr register stops the timer
; Line 886
	*** 002563	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 002566	d1 e3 			shl	bx,1
	*** 002568	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00256b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00256e	05 03 00 		add	ax,3
	*** 002571	50 			push	ax
	*** 002572	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002577	83 c4 02 		add	sp,2
	*** 00257a	50 			push	ax
	*** 00257b	8b 5e 0a 		mov	bx,WORD PTR [bp+10]	;port
	*** 00257e	d1 e3 			shl	bx,1
	*** 002580	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 002583	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002586	05 03 00 		add	ax,3
	*** 002589	50 			push	ax
	*** 00258a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00258f	83 c4 04 		add	sp,4
;|***     return TRUE;
; Line 887
	*** 002592	b8 00 00 		mov	ax,0
	*** 002595	e9 09 00 		jmp	$EX1713
;|***     }
; Line 888
;|***   else return FALSE;
; Line 889
	*** 002598	e9 06 00 		jmp	$I1715
					$I1714:
	*** 00259b	b8 01 00 		mov	ax,1
	*** 00259e	e9 00 00 		jmp	$EX1713
					$I1715:
;|***   }                 
; Line 890
					$EX1713:
	*** 0025a1	5e 			pop	si
	*** 0025a2	5f 			pop	di
	*** 0025a3	c9 			leave	
	*** 0025a4	ca 06 00 		ret	6

?stop_timer@Cescc@@RECII@Z	ENDP
	PUBLIC	?is_timer_expired@Cescc@@RECII@Z	; Cescc::is_timer_expired
?is_timer_expired@Cescc@@RECII@Z	PROC FAR	; Cescc::is_timer_expired
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::is_timer_expired(unsigned port)
;|***   {
; Line 898
	*** 0025a7	c8 00 00 00 		enter	0,0
	*** 0025ab	57 			push	di
	*** 0025ac	56 			push	si
;	this = 6
;	port = 10
;|***   if(port_open_list[port] != 0)
; Line 899
	*** 0025ad	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0025b0	83 c3 04 		add	bx,4
	*** 0025b3	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0025b6	d1 e6 			shl	si,1
	*** 0025b8	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 0025bc	75 03 			jne	$JCC9660
	*** 0025be	e9 52 00 		jmp	$I1719
					$JCC9660:
;|***     {
; Line 900
;|***     if(timer_status[port]==1)
; Line 901
	*** 0025c1	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0025c4	81 c3 8a 01 		add	bx,394	;018aH
	*** 0025c8	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0025cb	d1 e6 			shl	si,1
	*** 0025cd	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 0025d1	74 03 			je	$JCC9681
	*** 0025d3	e9 37 00 		jmp	$I1720
					$JCC9681:
;|***       {
; Line 902
;|***       timer_status[port] =0;
; Line 903
	*** 0025d6	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0025d9	d1 e6 			shl	si,1
	*** 0025db	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0025de	26 c7 80 8a 01 00 00 	mov	WORD PTR es:[bx+394][si],0
;|***       port_status[port] = port_status[port]&(~TIMER_INTERRUPT);
; Line 904
	*** 0025e5	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0025e8	81 c3 96 01 		add	bx,406	;0196H
	*** 0025ec	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0025ef	d1 e6 			shl	si,1
	*** 0025f1	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0025f4	25 ff fe 		and	ax,-257	;feffH
	*** 0025f7	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0025fa	d1 e6 			shl	si,1
	*** 0025fc	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0025ff	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***       return TRUE;
; Line 905
	*** 002604	b8 00 00 		mov	ax,0
	*** 002607	e9 0f 00 		jmp	$EX1718
;|***       }
; Line 906
;|***     else return FALSE;
; Line 907
	*** 00260a	e9 06 00 		jmp	$I1721
					$I1720:
	*** 00260d	b8 01 00 		mov	ax,1
	*** 002610	e9 06 00 		jmp	$EX1718
					$I1721:
;|***     }
; Line 908
;|***   return FALSE;
; Line 909
					$I1719:
	*** 002613	b8 01 00 		mov	ax,1
	*** 002616	e9 00 00 		jmp	$EX1718
;|***   }
; Line 910
					$EX1718:
	*** 002619	5e 			pop	si
	*** 00261a	5f 			pop	di
	*** 00261b	c9 			leave	
	*** 00261c	ca 06 00 		ret	6

?is_timer_expired@Cescc@@RECII@Z	ENDP
	PUBLIC	?wait_for_timer_expired@Cescc@@RECII@Z	; Cescc::wait_for_timer_expired
?wait_for_timer_expired@Cescc@@RECII@Z	PROC FAR	; Cescc::wait_for_timer_expired
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::wait_for_timer_expired(unsigned port)
;|***   {
; Line 919
	*** 00261f	c8 04 00 00 		enter	4,0
	*** 002623	57 			push	di
	*** 002624	56 			push	si
;	timer_timeout = -4
;	this = 6
;	port = 10
;|***   unsigned long timer_timeout;
;|***   timer_timeout = 0;
; Line 921
	*** 002625	2b c0 			sub	ax,ax
	*** 002627	89 46 fe 		mov	WORD PTR [bp-2],ax
	*** 00262a	89 46 fc 		mov	WORD PTR [bp-4],ax	;timer_timeout
;|***   
;|***   if(port_open_list[port]!=0)
; Line 923
	*** 00262d	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002630	83 c3 04 		add	bx,4
	*** 002633	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002636	d1 e6 			shl	si,1
	*** 002638	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 00263c	75 03 			jne	$JCC9788
	*** 00263e	e9 75 00 		jmp	$I1726
					$JCC9788:
;|***     {
; Line 924
;|***     while(timer_status[port]==0)
; Line 925
					$FC1728:
	*** 002641	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002644	81 c3 8a 01 		add	bx,394	;018aH
	*** 002648	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00264b	d1 e6 			shl	si,1
	*** 00264d	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 002651	74 03 			je	$JCC9809
	*** 002653	e9 29 00 		jmp	$FB1729
					$JCC9809:
;|***       {
; Line 926
;|***       timer_timeout++;
; Line 927
	*** 002656	83 46 fc 01 		add	WORD PTR [bp-4],1	;timer_timeout
	*** 00265a	83 56 fe 00 		adc	WORD PTR [bp-2],0
;|***       if(timer_timeout>1000000)
; Line 928
	*** 00265e	83 7e fe 0f 		cmp	WORD PTR [bp-2],15	;000fH
	*** 002662	73 03 			jae	$JCC9826
	*** 002664	e9 15 00 		jmp	$I1730
					$JCC9826:
	*** 002667	76 03 			jbe	$JCC9831
	*** 002669	e9 0a 00 		jmp	$L2039
					$JCC9831:
	*** 00266c	81 7e fc 40 42 		cmp	WORD PTR [bp-4],16960	;4240H	;timer_timeout
	*** 002671	77 03 			ja	$JCC9841
	*** 002673	e9 06 00 		jmp	$I1730
					$JCC9841:
					$L2039:
;|***         {
; Line 929
;|***         return FALSE;
; Line 930
	*** 002676	b8 01 00 		mov	ax,1
	*** 002679	e9 40 00 		jmp	$EX1724
;|***         }
; Line 931
;|***       }
; Line 932
					$I1730:
	*** 00267c	e9 c2 ff 		jmp	$FC1728
					$FB1729:
;|***     timer_status[port] = 0;
; Line 933
	*** 00267f	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002682	d1 e6 			shl	si,1
	*** 002684	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002687	26 c7 80 8a 01 00 00 	mov	WORD PTR es:[bx+394][si],0
;|***     port_status[port] = port_status[port]&(~TIMER_INTERRUPT);
; Line 934
	*** 00268e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 002691	81 c3 96 01 		add	bx,406	;0196H
	*** 002695	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 002698	d1 e6 			shl	si,1
	*** 00269a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00269d	25 ff fe 		and	ax,-257	;feffH
	*** 0026a0	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0026a3	d1 e6 			shl	si,1
	*** 0026a5	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 0026a8	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***     return TRUE;
; Line 935
	*** 0026ad	b8 00 00 		mov	ax,0
	*** 0026b0	e9 09 00 		jmp	$EX1724
;|***     }
; Line 936
;|***     
;|***   else return FALSE;
; Line 938
	*** 0026b3	e9 06 00 		jmp	$I1731
					$I1726:
	*** 0026b6	b8 01 00 		mov	ax,1
	*** 0026b9	e9 00 00 		jmp	$EX1724
					$I1731:
;|***   }
; Line 939
					$EX1724:
	*** 0026bc	5e 			pop	si
	*** 0026bd	5f 			pop	di
	*** 0026be	c9 			leave	
	*** 0026bf	ca 06 00 		ret	6

?wait_for_timer_expired@Cescc@@RECII@Z	ENDP
	PUBLIC	?escc_isr@Cescc@@JEAXXZ	; Cescc::escc_isr
?escc_isr@Cescc@@JEAXXZ	PROC FAR	; Cescc::escc_isr
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** void interrupt far Cescc::escc_isr(void)
;|***   {
; Line 947
	*** 0026c2	60 			pusha
	*** 0026c3	1e 			push	ds
	*** 0026c4	06 			push	es
	*** 0026c5	8b ec 			mov	bp,sp
	*** 0026c7	81 ec 24 00 		sub	sp,36	;0024H
	*** 0026cb	1e 			push	ds
	*** 0026cc	b8 00 00 		mov	ax,DGROUP
	*** 0026cf	8e d8 			mov	ds,ax
	ASSUME DS: DGROUP
	*** 0026d1	fc 			cld	
;	isr0 = -2
;	isr1 = -4
;	pis = -6
;	i = -8
;	chanstor = -10
;	j = -12
;	k = -14
;	inthit = -16
;	lsb = -18
;	msb = -20
;	bloc = -24
;	ok_to_tx = -26
;	irxbuf = -30
;	itxbuf = -34
;	this = 0
;|***   unsigned isr0;
;|***   unsigned isr1;
;|***   unsigned pis;
;|***   unsigned i; 
;|***   unsigned chanstor;
;|***   unsigned j,k;
;|***   unsigned inthit;
;|***   unsigned lsb = 0;
; Line 955
	*** 0026d2	c7 46 ee 00 00 		mov	WORD PTR [bp-18],0	;lsb
;|***   unsigned msb = 0;
; Line 956
	*** 0026d7	c7 46 ec 00 00 		mov	WORD PTR [bp-20],0	;msb
;|***   unsigned far *bloc;
;|***   unsigned ok_to_tx = 0;
; Line 958
	*** 0026dc	c7 46 e6 00 00 		mov	WORD PTR [bp-26],0	;ok_to_tx
;|*** 
;|***   extern unsigned long frame;
;|***   extern LN200 ln200;
;|***   extern TIMER ln200_time;
;|***   extern TIMER sys_timer; 
;|***   extern unsigned long ln200_rx_num;
;|*** 
;|***   struct buf far *irxbuf;
;|***   struct buf far *itxbuf;
;|***   
;|***   //_disable();
;|***   //_enable();      //12/8/03 rem out
;|***   
;|***   isr0 = 0;
; Line 972
	*** 0026e1	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;isr0
;|***   isr1 = 0;
; Line 973
	*** 0026e6	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;isr1
;|***   pis = 0;
; Line 974
	*** 0026eb	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0	;pis
;|***   j = 0;
; Line 975
	*** 0026f0	c7 46 f4 00 00 		mov	WORD PTR [bp-12],0	;j
;|***   
;|*** 
;|***   startisr:
; Line 978
					$startisr1754:
;|***   
;|***   inthit = 0; // clear any lingering garbage
; Line 980
	*** 0026f5	c7 46 f0 00 00 		mov	WORD PTR [bp-16],0	;inthit
;|***   
;|***   for(i=0;i<t1->next_port;i++) // for all opened ports
; Line 982
	*** 0026fa	c7 46 f8 00 00 		mov	WORD PTR [bp-8],0	;i
	*** 0026ff	e9 03 00 		jmp	$F1755
					$FC1756:
	*** 002702	ff 46 f8 		inc	WORD PTR [bp-8]	;i
					$F1755:
	*** 002705	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;i
	*** 002708	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00270c	26 39 47 74 		cmp	WORD PTR es:[bx+116],ax
	*** 002710	77 03 			ja	$JCC10000
	*** 002712	e9 66 1f 		jmp	$FB1757
					$JCC10000:
;|***     {
; Line 983
;|***     // store the active channel (A or B) to be restored when ISR terminates
;|***     chanstor = inp(t1->port_list[i]+PVR)&0x1;
; Line 985
	*** 002715	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002718	d1 e3 			shl	bx,1
	*** 00271a	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00271e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002721	05 1c 00 		add	ax,28	;001cH
	*** 002724	50 			push	ax
	*** 002725	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00272a	83 c4 02 		add	sp,2
	*** 00272d	25 01 00 		and	ax,1
	*** 002730	89 46 f6 		mov	WORD PTR [bp-10],ax	;chanstor
;|***   
;|***     // set the active channel to A or B as selected by the for-loop index                                    
;|***     outp(t1->port_list[i]+PVR,(inp(t1->port_list[i]+PVR)&0xfe)+t1->channel[i]); //set channel A or B
; Line 988
	*** 002733	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002736	d1 e3 			shl	bx,1
	*** 002738	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00273c	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00273f	05 1c 00 		add	ax,28	;001cH
	*** 002742	50 			push	ax
	*** 002743	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002748	83 c4 02 		add	sp,2
	*** 00274b	25 fe 00 		and	ax,254	;00feH
	*** 00274e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002751	d1 e6 			shl	si,1
	*** 002753	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002757	26 03 80 9a 01 		add	ax,WORD PTR es:[bx+410][si]
	*** 00275c	50 			push	ax
	*** 00275d	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002760	d1 e3 			shl	bx,1
	*** 002762	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002766	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002769	05 1c 00 		add	ax,28	;001cH
	*** 00276c	50 			push	ax
	*** 00276d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002772	83 c4 04 		add	sp,4
;|*** 
;|***     // shut this channel down if it was never properly initialized
;|***     if(t1->port_open_list[i]==0)
; Line 991
	*** 002775	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002778	d1 e6 			shl	si,1
	*** 00277a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00277e	26 83 78 04 00 		cmp	WORD PTR es:[bx+4][si],0
	*** 002783	74 03 			je	$JCC10115
	*** 002785	e9 4e 00 		jmp	$I1758
					$JCC10115:
;|***       {
; Line 992
;|***       if(t1->port_list[i]!=0) // the channel was never assigned a base address
; Line 993
	*** 002788	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00278b	d1 e3 			shl	bx,1
	*** 00278d	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002791	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 002795	75 03 			jne	$JCC10133
	*** 002797	e9 3c 00 		jmp	$I1759
					$JCC10133:
;|***         {
; Line 994
;|***         outp(t1->port_list[i]+IMR0,0xff);  // so shut off all its interrupts
; Line 995
	*** 00279a	68 ff 00 		push	255	;00ffH
	*** 00279d	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0027a0	d1 e3 			shl	bx,1
	*** 0027a2	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0027a6	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0027a9	05 1a 00 		add	ax,26	;001aH
	*** 0027ac	50 			push	ax
	*** 0027ad	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0027b2	83 c4 04 		add	sp,4
;|***         outp(t1->port_list[i]+IMR1,0xff);
; Line 996
	*** 0027b5	68 ff 00 		push	255	;00ffH
	*** 0027b8	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0027bb	d1 e3 			shl	bx,1
	*** 0027bd	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0027c1	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0027c4	05 1b 00 		add	ax,27	;001bH
	*** 0027c7	50 			push	ax
	*** 0027c8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0027cd	83 c4 04 		add	sp,4
;|***         goto nextpt; //skip to end of the big for() loop
; Line 997
	*** 0027d0	e9 e1 1e 		jmp	$TH161761
	*** 0027d3	e9 6b 1e 		jmp	$nextpt1760
;|***         }
; Line 998
;|***       }
; Line 999
					$I1759:
;|***   
;|***     // read this channel's interrupt status registers and store locally  
;|***     isr0 = inp(t1->port_list[i]+ISR0);
; Line 1002
					$I1758:
	*** 0027d6	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0027d9	d1 e3 			shl	bx,1
	*** 0027db	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0027df	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0027e2	05 1a 00 		add	ax,26	;001aH
	*** 0027e5	50 			push	ax
	*** 0027e6	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0027eb	83 c4 02 		add	sp,2
	*** 0027ee	89 46 fe 		mov	WORD PTR [bp-2],ax	;isr0
;|***     isr1 = inp(t1->port_list[i]+ISR1);
; Line 1003
	*** 0027f1	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0027f4	d1 e3 			shl	bx,1
	*** 0027f6	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0027fa	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0027fd	05 1b 00 		add	ax,27	;001bH
	*** 002800	50 			push	ax
	*** 002801	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002806	83 c4 02 		add	sp,2
	*** 002809	89 46 fc 		mov	WORD PTR [bp-4],ax	;isr1
;|***     pis = inp(t1->port_list[i]+PIS); // universal port interrupts
; Line 1004
	*** 00280c	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00280f	d1 e3 			shl	bx,1
	*** 002811	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002815	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002818	05 1d 00 		add	ax,29	;001dH
	*** 00281b	50 			push	ax
	*** 00281c	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002821	83 c4 02 		add	sp,2
	*** 002824	89 46 fa 		mov	WORD PTR [bp-6],ax	;pis
;|***     
;|***     // skip to next channel if no interrupts set for this channel
;|***     if((isr0+isr1+pis)==0) goto nextpt;
; Line 1007
	*** 002827	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;pis
	*** 00282a	03 46 fc 		add	ax,WORD PTR [bp-4]	;isr1
	*** 00282d	03 46 fe 		add	ax,WORD PTR [bp-2]	;isr0
	*** 002830	3d 00 00 		cmp	ax,0
	*** 002833	74 03 			je	$JCC10291
	*** 002835	e9 06 00 		jmp	$I1762
					$JCC10291:
	*** 002838	e9 76 1e 		jmp	$TH161763
	*** 00283b	e9 03 1e 		jmp	$nextpt1760
;|***   
;|***     // or else service this channel's interrupts
;|***     inthit = 1;
; Line 1010
					$I1762:
	*** 00283e	c7 46 f0 01 00 		mov	WORD PTR [bp-16],1	;inthit
;|*** 
;|***     // check each interrupt event and service them as needed
;|***     // ISR0 first
;|***     if((isr0&RME)==RME)  //  RME Receive Message End
; Line 1014
	*** 002843	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 002846	24 80 			and	al,128	;0080H
	*** 002848	3c 80 			cmp	al,128	;0080H
	*** 00284a	74 03 			je	$JCC10314
	*** 00284c	e9 d1 09 		jmp	$I1764
					$JCC10314:
;|***       {
; Line 1015
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1016
	*** 00284f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002852	d1 e6 			shl	si,1
	*** 002854	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002858	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 00285e	74 03 			je	$JCC10334
	*** 002860	e9 f5 03 		jmp	$I1765
					$JCC10334:
;|***         {
; Line 1017
;|***         if(t1->port_dmar_list[i]==0)  // if not using DMA
; Line 1018
	*** 002863	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002866	d1 e6 			shl	si,1
	*** 002868	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00286c	26 83 78 10 00 		cmp	WORD PTR es:[bx+16][si],0
	*** 002871	74 03 			je	$JCC10353
	*** 002873	e9 10 02 		jmp	$I1766
					$JCC10353:
;|***           {
; Line 1019
;|***           
;|***           // get "k", the total number of bytes received in this message
;|***           
;|***           // then fill the rbuf frame (char frame[]) with the rest of the
;|***           // chars still remaining in the rx fifo
;|***           
;|***           // remember that the rx fifo is only 32 chars deep
;|***           
;|***           // the low 4 bits of RBCH and 8 bits of RBCL indicate the total length in chars
;|***           // of the received message (0 to 4095)
;|***           
;|***           // additionally, the low 4 bits of RBCL indicate the number of chars currently
;|***           // in the rx fifo
;|***           
;|***           // read total number of chars received in this message
;|***           k = (unsigned)((inp(t1->port_list[i]+RBCH)&0x0f) <<8) +
;|***               (unsigned) (inp(t1->port_list[i]+RBCL)&0xff);
; Line 1036
	*** 002876	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002879	d1 e3 			shl	bx,1
	*** 00287b	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00287f	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002882	05 0b 00 		add	ax,11	;000bH
	*** 002885	50 			push	ax
	*** 002886	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00288b	83 c4 02 		add	sp,2
	*** 00288e	24 0f 			and	al,15	;000fH
	*** 002890	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002893	d1 e3 			shl	bx,1
	*** 002895	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002899	26 8b 08 		mov	cx,WORD PTR es:[bx][si]
	*** 00289c	83 c1 0a 		add	cx,10	;000aH
	*** 00289f	51 			push	cx
	*** 0028a0	89 46 dc 		mov	WORD PTR [bp-36],ax
	*** 0028a3	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0028a8	83 c4 02 		add	sp,2
	*** 0028ab	8a c0 			mov	al,al
	*** 0028ad	8a 66 dc 		mov	ah,BYTE PTR [bp-36]
	*** 0028b0	89 46 f2 		mov	WORD PTR [bp-14],ax	;k
;|***           
;|***           // get the right buffer to use
;|***           irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);     
; Line 1039
	*** 0028b3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0028b6	d1 e6 			shl	si,1
	*** 0028b8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0028bc	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0028bf	c1 e7 04 		shl	di,4
	*** 0028c2	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0028c7	c1 e7 02 		shl	di,2
	*** 0028ca	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0028ce	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 0028d2	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 0028d6	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 0028d9	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***           
;|***           //the reads are done as byte access so that odd frame lengths will be received correctly
;|***           //the fifo can not be accessed both as word and byte in same pool, meaning 
;|***           //if you start doing 16 bit xfrs you must do all 16 bit xfrs...
;|***           //note it might be quicker to just do an extra 16 bit xfr as opposed to doing it byte wise
;|***           //but that only stands a chance of working for rx, txing you must do byte transfers
;|***           //as the number of writes to the fifo determines what gets sent out.
;|***           
;|***           // read the final message chars from the rx fifo and add them to the buffer
;|***           for(j=irxbuf->no_bytes;j<k;j++) // j = num bytes received before this fifo dump
; Line 1049
	*** 0028dc	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0028df	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 0028e3	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 0028e6	e9 03 00 		jmp	$F1769
					$FC1770:
	*** 0028e9	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1769:
	*** 0028ec	8b 46 f4 		mov	ax,WORD PTR [bp-12]	;j
	*** 0028ef	39 46 f2 		cmp	WORD PTR [bp-14],ax	;k
	*** 0028f2	77 03 			ja	$JCC10482
	*** 0028f4	e9 25 00 		jmp	$FB1771
					$JCC10482:
;|***             {
; Line 1050
;|***             irxbuf->frame[j] = inp(t1->port_list[i]+FIFO);
; Line 1051
	*** 0028f7	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0028fa	d1 e3 			shl	bx,1
	*** 0028fc	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002900	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002903	05 20 00 		add	ax,32	;0020H
	*** 002906	50 			push	ax
	*** 002907	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00290c	83 c4 02 		add	sp,2
	*** 00290f	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002912	8b 76 f4 		mov	si,WORD PTR [bp-12]	;j
	*** 002915	26 88 40 06 		mov	BYTE PTR es:[bx+6][si],al
;|***             }
; Line 1052
	*** 002919	e9 cd ff 		jmp	$FC1770
					$FB1771:
;|***             
;|***           outp(t1->port_list[i]+CMDR,RMC);// release fifo
; Line 1054
	*** 00291c	68 80 00 		push	128	;0080H
	*** 00291f	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002922	d1 e3 			shl	bx,1
	*** 002924	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002928	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00292b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002930	83 c4 04 		add	sp,4
;|***           irxbuf->valid = 1;              // validate the rbuf we just used
; Line 1055
	*** 002933	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002936	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***           irxbuf->no_bytes = k;           // update the total number of bytes received
; Line 1056
	*** 00293b	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;k
	*** 00293e	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002941	26 89 47 02 		mov	WORD PTR es:[bx+2],ax
;|***           
;|***           // new code specific to receiving ln200 messages in the autonomous model
;|***           // added 3/25/2004 jtm
;|***           if(k==33)
; Line 1060
	*** 002945	83 7e f2 21 		cmp	WORD PTR [bp-14],33	;0021H	;k
	*** 002949	74 03 			je	$JCC10569
	*** 00294b	e9 46 00 		jmp	$I1772
					$JCC10569:
;|***             {
; Line 1061
;|***             ln200_rx_num++;
; Line 1062
	*** 00294e	83 06 00 00 01 		add	WORD PTR ?ln200_rx_num@@3KE,1	;ln200_rx_num
	*** 002953	83 16 02 00 00 		adc	WORD PTR ?ln200_rx_num@@3KE+2,0	;ln200_rx_num
;|***             //_fmemcpy(ln200.data, irxbuf->frame, k);  // copy message to app buffer
;|***             _fmemcpy(ln200_buffer, irxbuf->frame, k);  // copy message to app buffer
; Line 1064
	*** 002958	ff 76 f2 		push	WORD PTR [bp-14]	;k
	*** 00295b	8b 46 e2 		mov	ax,WORD PTR [bp-30]	;irxbuf
	*** 00295e	8b 56 e4 		mov	dx,WORD PTR [bp-28]
	*** 002961	05 06 00 		add	ax,6
	*** 002964	52 			push	dx
	*** 002965	50 			push	ax
	*** 002966	1e 			push	ds
	*** 002967	68 00 00 		push	OFFSET ?ln200_buffer@@3QEEE	;ln200_buffer
	*** 00296a	9a 00 00 00 00 		call	FAR PTR __fmemcpy
	*** 00296f	83 c4 0a 		add	sp,10	;000aH
;|***             ln200_new_data = 1;                      // flag new data available
; Line 1065
	*** 002972	c7 06 00 00 01 00 	mov	WORD PTR ?ln200_new_data@@3IE,1	;ln200_new_data
;|***             ln200_data_frame = frame;                     // record frame number
; Line 1066
	*** 002978	a1 00 00 		mov	ax,WORD PTR ?frame@@3KE	;frame
	*** 00297b	8b 16 02 00 		mov	dx,WORD PTR ?frame@@3KE+2	;frame
	*** 00297f	a3 00 00 		mov	WORD PTR ?ln200_data_frame@@3KE,ax	;ln200_data_frame
	*** 002982	89 16 02 00 		mov	WORD PTR ?ln200_data_frame@@3KE+2,dx	;ln200_data_frame
;|***             time_stamp(&ln200_time);
; Line 1067
	*** 002986	68 00 00 		push	SEG ?ln200_time@@3UTIMER@@E	;ln200_time
	*** 002989	68 00 00 		push	OFFSET ?ln200_time@@3UTIMER@@E	;ln200_time
	*** 00298c	9a 00 00 00 00 		call	FAR PTR ?time_stamp@@ZAXPEUTIMER@@@Z	; time_stamp
	*** 002991	83 c4 04 		add	sp,4
;|***             }
; Line 1068
;|***           irxbuf->valid = 0;                       // release the escc buffer to be used again  
; Line 1069
					$I1772:
	*** 002994	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002997	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           irxbuf->no_bytes = 0;
; Line 1070
	*** 00299c	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 00299f	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           // end autonomous-specific code
;|*** 
;|***                                  
;|***           // select the next buffer for the next reception
;|***           t1->current_rxbuf[i]++;
; Line 1075
	*** 0029a5	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0029a8	d1 e6 			shl	si,1
	*** 0029aa	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0029ae	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 0029b3	40 			inc	ax
	*** 0029b4	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0029b7	d1 e6 			shl	si,1
	*** 0029b9	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0029bd	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***           // rollover to the first buffer if we've reached the end of available buffers
;|***           if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) 
; Line 1077
	*** 0029c2	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0029c5	d1 e6 			shl	si,1
	*** 0029c7	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0029cb	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 0029d0	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0029d3	d1 e6 			shl	si,1
	*** 0029d5	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0029d9	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 0029de	74 03 			je	$JCC10718
	*** 0029e0	e9 10 00 		jmp	$I1773
					$JCC10718:
;|***             {
; Line 1078
;|***             t1->current_rxbuf[i]=0;
; Line 1079
	*** 0029e3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0029e6	d1 e6 			shl	si,1
	*** 0029e8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0029ec	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***             }
; Line 1080
;|***           
;|***           // make sure the next selected buffer is not in use (an error condition)
;|***           if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1083
					$I1773:
	*** 0029f3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0029f6	d1 e6 			shl	si,1
	*** 0029f8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0029fc	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0029ff	c1 e7 04 		shl	di,4
	*** 002a02	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002a07	c1 e7 02 		shl	di,2
	*** 002a0a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a0e	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002a12	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 002a16	74 03 			je	$JCC10774
	*** 002a18	e9 1f 00 		jmp	$I1774
					$JCC10774:
;|***             {
; Line 1084
;|***             // An error occured and the main program isn't done with 
;|***             // the frame that is about to be used for received data.
;|***             // Set the receive buffers overflowed bit of the status word for this port here.
;|***             t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1088
	*** 002a1b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002a1e	d1 e6 			shl	si,1
	*** 002a20	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a24	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 002a29	0d 40 00 		or	ax,64	;0040H
	*** 002a2c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002a2f	d1 e6 			shl	si,1
	*** 002a31	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a35	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***             }
; Line 1089
;|***             
;|***           // prep the next selected buffer for use  
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;
; Line 1092
					$I1774:
	*** 002a3a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002a3d	d1 e6 			shl	si,1
	*** 002a3f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a43	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002a46	c1 e7 04 		shl	di,4
	*** 002a49	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002a4e	c1 e7 02 		shl	di,2
	*** 002a51	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a55	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002a59	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;
; Line 1093
	*** 002a5f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002a62	d1 e6 			shl	si,1
	*** 002a64	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a68	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002a6b	c1 e7 04 		shl	di,4
	*** 002a6e	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002a73	c1 e7 02 		shl	di,2
	*** 002a76	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a7a	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002a7e	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           
;|***           // flag this port as holding a received message
;|***           //t1->port_status[i] = t1->port_status[i] | RX_READY; // jtm 3/31/2004
;|***           }  
; Line 1097
;|***         else
; Line 1098
	*** 002a83	e9 d2 01 		jmp	$I1775
					$I1766:
;|***           {
; Line 1099
;|***           //this is the DMA code for RME interrupt
;|***           //if we are here then the DMA reception has gone to completion
;|***           //(we have a complete frame)
;|***           //get the number of bytes received (total)
;|***           k = ((inp(t1->port_list[i]+RBCH)&0x0f)<<8)+inp(t1->port_list[i]+RBCL);
; Line 1104
	*** 002a86	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002a89	d1 e3 			shl	bx,1
	*** 002a8b	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002a8f	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002a92	05 0b 00 		add	ax,11	;000bH
	*** 002a95	50 			push	ax
	*** 002a96	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002a9b	83 c4 02 		add	sp,2
	*** 002a9e	8a e0 			mov	ah,al
	*** 002aa0	25 00 0f 		and	ax,3840	;0f00H
	*** 002aa3	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002aa6	d1 e3 			shl	bx,1
	*** 002aa8	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002aac	26 8b 08 		mov	cx,WORD PTR es:[bx][si]
	*** 002aaf	83 c1 0a 		add	cx,10	;000aH
	*** 002ab2	51 			push	cx
	*** 002ab3	89 46 dc 		mov	WORD PTR [bp-36],ax
	*** 002ab6	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002abb	83 c4 02 		add	sp,2
	*** 002abe	03 46 dc 		add	ax,WORD PTR [bp-36]
	*** 002ac1	89 46 f2 		mov	WORD PTR [bp-14],ax	;k
;|***     
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 1;         //validate the frame buffer
; Line 1106
	*** 002ac4	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ac7	d1 e6 			shl	si,1
	*** 002ac9	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002acd	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002ad0	c1 e7 04 		shl	di,4
	*** 002ad3	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002ad8	c1 e7 02 		shl	di,2
	*** 002adb	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002adf	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002ae3	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = k;      //indicate the number of bytes received
; Line 1107
	*** 002ae8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002aeb	d1 e6 			shl	si,1
	*** 002aed	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002af1	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002af4	c1 e7 04 		shl	di,4
	*** 002af7	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002afc	c1 e7 02 		shl	di,2
	*** 002aff	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b03	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002b07	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;k
	*** 002b0a	26 89 47 02 		mov	WORD PTR es:[bx+2],ax
;|***           t1->current_rxbuf[i]++;
; Line 1108
	*** 002b0e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b11	d1 e6 			shl	si,1
	*** 002b13	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b17	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 002b1c	40 			inc	ax
	*** 002b1d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b20	d1 e6 			shl	si,1
	*** 002b22	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b26	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***           if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) t1->current_rxbuf[i] = 0;
; Line 1109
	*** 002b2b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b2e	d1 e6 			shl	si,1
	*** 002b30	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b34	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 002b39	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b3c	d1 e6 			shl	si,1
	*** 002b3e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b42	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 002b47	74 03 			je	$JCC11079
	*** 002b49	e9 10 00 		jmp	$I1776
					$JCC11079:
	*** 002b4c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b4f	d1 e6 			shl	si,1
	*** 002b51	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b55	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***           if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1110
					$I1776:
	*** 002b5c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b5f	d1 e6 			shl	si,1
	*** 002b61	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b65	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002b68	c1 e7 04 		shl	di,4
	*** 002b6b	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002b70	c1 e7 02 		shl	di,2
	*** 002b73	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b77	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002b7b	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 002b7f	74 03 			je	$JCC11135
	*** 002b81	e9 1f 00 		jmp	$I1777
					$JCC11135:
;|***             {
; Line 1111
;|***             //   an error occured and the 
;|***             //   main program isn't done with 
;|***             //   the frame that is about
;|***             //   to be used for received data
;|***             t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1116
	*** 002b84	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b87	d1 e6 			shl	si,1
	*** 002b89	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b8d	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 002b92	0d 40 00 		or	ax,64	;0040H
	*** 002b95	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002b98	d1 e6 			shl	si,1
	*** 002b9a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002b9e	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***             }
; Line 1117
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;  //prep buf for use
; Line 1118
					$I1777:
	*** 002ba3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ba6	d1 e6 			shl	si,1
	*** 002ba8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002bac	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002baf	c1 e7 04 		shl	di,4
	*** 002bb2	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002bb7	c1 e7 02 		shl	di,2
	*** 002bba	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002bbe	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002bc2	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;    //invalidate it for use
; Line 1119
	*** 002bc8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002bcb	d1 e6 			shl	si,1
	*** 002bcd	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002bd1	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002bd4	c1 e7 04 		shl	di,4
	*** 002bd7	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002bdc	c1 e7 02 		shl	di,2
	*** 002bdf	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002be3	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002be7	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           setupdmar(i,t1->rxbuffer[i][t1->current_rxbuf[i]]->frame); //sets address of rbuf.frame[] to dma channel and enables it
; Line 1120
	*** 002bec	ff 76 f8 		push	WORD PTR [bp-8]	;i
	*** 002bef	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002bf2	d1 e6 			shl	si,1
	*** 002bf4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002bf8	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002bfb	c1 e7 04 		shl	di,4
	*** 002bfe	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002c03	c1 e7 02 		shl	di,2
	*** 002c06	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002c0a	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 002c0e	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 002c12	05 06 00 		add	ax,6
	*** 002c15	52 			push	dx
	*** 002c16	50 			push	ax
	*** 002c17	ff 76 02 		push	WORD PTR [bp+2]
	*** 002c1a	ff 76 00 		push	WORD PTR [bp]	;this
	*** 002c1d	9a 00 00 00 00 		call	FAR PTR ?setupdmar@Cescc@@JECXIPEX@Z	; Cescc::setupdmar
;|***           outp(t1->port_list[i]+CMDR,RMC);     //release the FIFO
; Line 1121
	*** 002c22	68 80 00 		push	128	;0080H
	*** 002c25	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002c28	d1 e3 			shl	bx,1
	*** 002c2a	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002c2e	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 002c31	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002c36	83 c4 04 		add	sp,4
;|***           t1->port_status[i] = t1->port_status[i] | RX_READY;
; Line 1122
	*** 002c39	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002c3c	d1 e6 			shl	si,1
	*** 002c3e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002c42	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 002c47	0d 00 02 		or	ax,512	;0200H
	*** 002c4a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002c4d	d1 e6 			shl	si,1
	*** 002c4f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002c53	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***           }
; Line 1123
					$I1775:
;|***         }
; Line 1124
;|***     
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1126
					$I1765:
	*** 002c58	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002c5b	d1 e6 			shl	si,1
	*** 002c5d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002c61	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 002c67	74 03 			je	$JCC11367
	*** 002c69	e9 87 03 		jmp	$I1778
					$JCC11367:
;|***         {
; Line 1127
;|***         //TCD interrupt
;|***         //do check for dma..in which case we don't need to get any data here...just need to figure out
;|***         //how many bytes are in the buffer        
;|***         if(t1->port_dmar_list[i]==0)  // no DMA
; Line 1131
	*** 002c6c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002c6f	d1 e6 			shl	si,1
	*** 002c71	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002c75	26 83 78 10 00 		cmp	WORD PTR es:[bx+16][si],0
	*** 002c7a	74 03 			je	$JCC11386
	*** 002c7c	e9 c6 01 		jmp	$I1779
					$JCC11386:
;|***           {
; Line 1132
;|***           k = inp(t1->port_list[i]+RBCL);//get num bytes in fifo
; Line 1133
	*** 002c7f	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002c82	d1 e3 			shl	bx,1
	*** 002c84	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002c88	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002c8b	05 0a 00 		add	ax,10	;000aH
	*** 002c8e	50 			push	ax
	*** 002c8f	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002c94	83 c4 02 		add	sp,2
	*** 002c97	89 46 f2 		mov	WORD PTR [bp-14],ax	;k
;|***           k = k&0x1f;
; Line 1134
	*** 002c9a	83 66 f2 1f 		and	WORD PTR [bp-14],31	;001fH	;k
;|***           if(k==0) k=32;
; Line 1135
	*** 002c9e	83 7e f2 00 		cmp	WORD PTR [bp-14],0	;k
	*** 002ca2	74 03 			je	$JCC11426
	*** 002ca4	e9 05 00 		jmp	$I1780
					$JCC11426:
	*** 002ca7	c7 46 f2 20 00 		mov	WORD PTR [bp-14],32	;0020H	;k
;|***         
;|***           //assumes that k is allways a multiple of 2 (status byte included mode)
;|***           irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);     
; Line 1138
					$I1780:
	*** 002cac	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002caf	d1 e6 			shl	si,1
	*** 002cb1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002cb5	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002cb8	c1 e7 04 		shl	di,4
	*** 002cbb	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002cc0	c1 e7 02 		shl	di,2
	*** 002cc3	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002cc7	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 002ccb	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 002ccf	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 002cd2	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***           //bloc = (unsigned far *)irxbuf->frame;
;|***           for(j=irxbuf->no_bytes;j<irxbuf->no_bytes+k;j++)  irxbuf->frame[j] = inp(t1->port_list[i]+FIFO);  //******inpw?
; Line 1140
	*** 002cd5	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002cd8	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 002cdc	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 002cdf	e9 03 00 		jmp	$F1781
					$FC1782:
	*** 002ce2	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1781:
	*** 002ce5	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002ce8	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 002cec	03 46 f2 		add	ax,WORD PTR [bp-14]	;k
	*** 002cef	3b 46 f4 		cmp	ax,WORD PTR [bp-12]	;j
	*** 002cf2	77 03 			ja	$JCC11506
	*** 002cf4	e9 25 00 		jmp	$FB1783
					$JCC11506:
	*** 002cf7	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002cfa	d1 e3 			shl	bx,1
	*** 002cfc	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d00	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002d03	05 20 00 		add	ax,32	;0020H
	*** 002d06	50 			push	ax
	*** 002d07	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002d0c	83 c4 02 		add	sp,2
	*** 002d0f	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002d12	8b 76 f4 		mov	si,WORD PTR [bp-12]	;j
	*** 002d15	26 88 40 06 		mov	BYTE PTR es:[bx+6][si],al
	*** 002d19	e9 c6 ff 		jmp	$FC1782
					$FB1783:
;|***         
;|***           outp(t1->port_list[i]+CMDR,RMC);     //release fifo
; Line 1142
	*** 002d1c	68 80 00 		push	128	;0080H
	*** 002d1f	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002d22	d1 e3 			shl	bx,1
	*** 002d24	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d28	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 002d2b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002d30	83 c4 04 		add	sp,4
;|***           //could move this stuff elsewhere (such that the buffers get more than 32 bytes in em)
;|***           irxbuf->valid = 1;//validate rbuf
; Line 1144
	*** 002d33	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002d36	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***           irxbuf->no_bytes = irxbuf->no_bytes + k; //number of bytes received in rbuf
; Line 1145
	*** 002d3b	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;k
	*** 002d3e	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002d41	26 01 47 02 		add	WORD PTR es:[bx+2],ax
;|***           t1->current_rxbuf[i]++;  
; Line 1146
	*** 002d45	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002d48	d1 e6 			shl	si,1
	*** 002d4a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d4e	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 002d53	40 			inc	ax
	*** 002d54	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002d57	d1 e6 			shl	si,1
	*** 002d59	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d5d	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***           //irxbuf is no longer valid
;|***           if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) t1->current_rxbuf[i]=0;                
; Line 1148
	*** 002d62	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002d65	d1 e6 			shl	si,1
	*** 002d67	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d6b	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 002d70	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002d73	d1 e6 			shl	si,1
	*** 002d75	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d79	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 002d7e	74 03 			je	$JCC11646
	*** 002d80	e9 10 00 		jmp	$I1784
					$JCC11646:
	*** 002d83	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002d86	d1 e6 			shl	si,1
	*** 002d88	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d8c	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***           if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1149
					$I1784:
	*** 002d93	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002d96	d1 e6 			shl	si,1
	*** 002d98	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002d9c	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002d9f	c1 e7 04 		shl	di,4
	*** 002da2	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002da7	c1 e7 02 		shl	di,2
	*** 002daa	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002dae	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002db2	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 002db6	74 03 			je	$JCC11702
	*** 002db8	e9 1f 00 		jmp	$I1785
					$JCC11702:
;|***             {
; Line 1150
;|***             // an error occured and the 
;|***             //   main program isn't done with 
;|***             //   the frame that is about
;|***             //   to be used for received data
;|***             // set the receive buffers overflowed bit of the status word for this port here
;|***             t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1156
	*** 002dbb	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002dbe	d1 e6 			shl	si,1
	*** 002dc0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002dc4	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 002dc9	0d 40 00 		or	ax,64	;0040H
	*** 002dcc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002dcf	d1 e6 			shl	si,1
	*** 002dd1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002dd5	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***             }
; Line 1157
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;  //prep buf for use
; Line 1158
					$I1785:
	*** 002dda	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ddd	d1 e6 			shl	si,1
	*** 002ddf	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002de3	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002de6	c1 e7 04 		shl	di,4
	*** 002de9	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002dee	c1 e7 02 		shl	di,2
	*** 002df1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002df5	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002df9	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;    //invalidate it for use
; Line 1159
	*** 002dff	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002e02	d1 e6 			shl	si,1
	*** 002e04	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002e08	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002e0b	c1 e7 04 		shl	di,4
	*** 002e0e	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002e13	c1 e7 02 		shl	di,2
	*** 002e16	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002e1a	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002e1e	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           t1->port_status[i] = t1->port_status[i] | RX_READY;
; Line 1160
	*** 002e23	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002e26	d1 e6 			shl	si,1
	*** 002e28	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002e2c	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 002e31	0d 00 02 		or	ax,512	;0200H
	*** 002e34	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002e37	d1 e6 			shl	si,1
	*** 002e39	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002e3d	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***           }                                                 
; Line 1161
;|***         else  // use DMA
; Line 1162
	*** 002e42	e9 ae 01 		jmp	$I1786
					$I1779:
;|***           {
; Line 1163
;|***           //get dmar count here and make buffer valid
;|***           k = getdmarcount(i);
; Line 1165
	*** 002e45	ff 76 f8 		push	WORD PTR [bp-8]	;i
	*** 002e48	ff 76 02 		push	WORD PTR [bp+2]
	*** 002e4b	ff 76 00 		push	WORD PTR [bp]	;this
	*** 002e4e	9a 00 00 00 00 		call	FAR PTR ?getdmarcount@Cescc@@JECII@Z	; Cescc::getdmarcount
	*** 002e53	89 46 f2 		mov	WORD PTR [bp-14],ax	;k
;|***           //assumes that the number of bytes transfered(dma) = number of bytes received
;|***           //this isn't allways the case...
;|***     
;|***           //assumes that k is allways a multiple of 2 (status byte included mode)
;|***           irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);     
; Line 1170
	*** 002e56	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002e59	d1 e6 			shl	si,1
	*** 002e5b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002e5f	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002e62	c1 e7 04 		shl	di,4
	*** 002e65	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002e6a	c1 e7 02 		shl	di,2
	*** 002e6d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002e71	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 002e75	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 002e79	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 002e7c	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***           irxbuf->valid = 1;//validate rbuf
; Line 1171
	*** 002e7f	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002e82	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***           irxbuf->no_bytes = k; //number of bytes received in rbuf
; Line 1172
	*** 002e87	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;k
	*** 002e8a	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 002e8d	26 89 47 02 		mov	WORD PTR es:[bx+2],ax
;|***           t1->current_rxbuf[i]++;  
; Line 1173
	*** 002e91	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002e94	d1 e6 			shl	si,1
	*** 002e96	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002e9a	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 002e9f	40 			inc	ax
	*** 002ea0	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ea3	d1 e6 			shl	si,1
	*** 002ea5	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002ea9	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***           //irxbuf is no longer valid
;|***           if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) t1->current_rxbuf[i]=0;                
; Line 1175
	*** 002eae	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002eb1	d1 e6 			shl	si,1
	*** 002eb3	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002eb7	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 002ebc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ebf	d1 e6 			shl	si,1
	*** 002ec1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002ec5	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 002eca	74 03 			je	$JCC11978
	*** 002ecc	e9 10 00 		jmp	$I1787
					$JCC11978:
	*** 002ecf	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ed2	d1 e6 			shl	si,1
	*** 002ed4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002ed8	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***           if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1176
					$I1787:
	*** 002edf	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ee2	d1 e6 			shl	si,1
	*** 002ee4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002ee8	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002eeb	c1 e7 04 		shl	di,4
	*** 002eee	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002ef3	c1 e7 02 		shl	di,2
	*** 002ef6	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002efa	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002efe	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 002f02	74 03 			je	$JCC12034
	*** 002f04	e9 1f 00 		jmp	$I1788
					$JCC12034:
;|***             {
; Line 1177
;|***             // an error occured and the 
;|***             //   main program isn't done with 
;|***             //   the frame that is about
;|***             //   to be used for received data
;|***             //set the receive buffers overflowed bit of the status word for this port here
;|***             t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1183
	*** 002f07	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002f0a	d1 e6 			shl	si,1
	*** 002f0c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f10	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 002f15	0d 40 00 		or	ax,64	;0040H
	*** 002f18	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002f1b	d1 e6 			shl	si,1
	*** 002f1d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f21	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***             }
; Line 1184
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;  //prep buf for use
; Line 1185
					$I1788:
	*** 002f26	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002f29	d1 e6 			shl	si,1
	*** 002f2b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f2f	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002f32	c1 e7 04 		shl	di,4
	*** 002f35	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002f3a	c1 e7 02 		shl	di,2
	*** 002f3d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f41	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002f45	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;    //invalidate it for use
; Line 1186
	*** 002f4b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002f4e	d1 e6 			shl	si,1
	*** 002f50	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f54	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002f57	c1 e7 04 		shl	di,4
	*** 002f5a	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002f5f	c1 e7 02 		shl	di,2
	*** 002f62	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f66	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 002f6a	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           t1->port_status[i] = t1->port_status[i] | RX_READY;
; Line 1187
	*** 002f6f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002f72	d1 e6 			shl	si,1
	*** 002f74	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f78	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 002f7d	0d 00 02 		or	ax,512	;0200H
	*** 002f80	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002f83	d1 e6 			shl	si,1
	*** 002f85	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f89	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***           setupdmar(i,t1->rxbuffer[i][t1->current_rxbuf[i]]->frame);
; Line 1188
	*** 002f8e	ff 76 f8 		push	WORD PTR [bp-8]	;i
	*** 002f91	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002f94	d1 e6 			shl	si,1
	*** 002f96	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002f9a	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 002f9d	c1 e7 04 		shl	di,4
	*** 002fa0	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 002fa5	c1 e7 02 		shl	di,2
	*** 002fa8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002fac	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 002fb0	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 002fb4	05 06 00 		add	ax,6
	*** 002fb7	52 			push	dx
	*** 002fb8	50 			push	ax
	*** 002fb9	ff 76 02 		push	WORD PTR [bp+2]
	*** 002fbc	ff 76 00 		push	WORD PTR [bp]	;this
	*** 002fbf	9a 00 00 00 00 		call	FAR PTR ?setupdmar@Cescc@@JECXIPEX@Z	; Cescc::setupdmar
;|***           inp(t1->port_list[i]+RBCL);
; Line 1189
	*** 002fc4	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002fc7	d1 e3 			shl	bx,1
	*** 002fc9	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002fcd	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 002fd0	05 0a 00 		add	ax,10	;000aH
	*** 002fd3	50 			push	ax
	*** 002fd4	9a 00 00 00 00 		call	FAR PTR _inp
	*** 002fd9	83 c4 02 		add	sp,2
;|***           outp(t1->port_list[i]+CMDR,RMC);     //release fifo
; Line 1190
	*** 002fdc	68 80 00 		push	128	;0080H
	*** 002fdf	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 002fe2	d1 e3 			shl	bx,1
	*** 002fe4	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002fe8	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 002feb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 002ff0	83 c4 04 		add	sp,4
;|***           }   // end use DMA
; Line 1191
					$I1786:
;|***         } // end ASYNC
; Line 1192
;|*** 
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1194
					$I1778:
	*** 002ff3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 002ff6	d1 e6 			shl	si,1
	*** 002ff8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 002ffc	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003002	74 03 			je	$JCC12290
	*** 003004	e9 19 02 		jmp	$I1789
					$JCC12290:
;|***         {
; Line 1195
;|***         //TCD interrupt
;|***         
;|***         k = inp(t1->port_list[i]+RBCL);//get num bytes in fifo
; Line 1198
	*** 003007	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00300a	d1 e3 			shl	bx,1
	*** 00300c	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003010	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 003013	05 0a 00 		add	ax,10	;000aH
	*** 003016	50 			push	ax
	*** 003017	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00301c	83 c4 02 		add	sp,2
	*** 00301f	89 46 f2 		mov	WORD PTR [bp-14],ax	;k
;|***         k = k&0x1f;
; Line 1199
	*** 003022	83 66 f2 1f 		and	WORD PTR [bp-14],31	;001fH	;k
;|***         if(k==0) k=32;
; Line 1200
	*** 003026	83 7e f2 00 		cmp	WORD PTR [bp-14],0	;k
	*** 00302a	74 03 			je	$JCC12330
	*** 00302c	e9 05 00 		jmp	$I1790
					$JCC12330:
	*** 00302f	c7 46 f2 20 00 		mov	WORD PTR [bp-14],32	;0020H	;k
;|***         
;|***         //assumes that k is allways a multiple of 2 (status byte included mode)
;|***         irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);     
; Line 1203
					$I1790:
	*** 003034	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003037	d1 e6 			shl	si,1
	*** 003039	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00303d	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003040	c1 e7 04 		shl	di,4
	*** 003043	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 003048	c1 e7 02 		shl	di,2
	*** 00304b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00304f	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 003053	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 003057	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 00305a	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***         //bloc = (unsigned far *)irxbuf->frame;
;|***         for(j=irxbuf->no_bytes;j<irxbuf->no_bytes+k;j++)
; Line 1205
	*** 00305d	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003060	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 003064	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 003067	e9 03 00 		jmp	$F1791
					$FC1792:
	*** 00306a	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1791:
	*** 00306d	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003070	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 003074	03 46 f2 		add	ax,WORD PTR [bp-14]	;k
	*** 003077	3b 46 f4 		cmp	ax,WORD PTR [bp-12]	;j
	*** 00307a	77 03 			ja	$JCC12410
	*** 00307c	e9 25 00 		jmp	$FB1793
					$JCC12410:
;|***           irxbuf->frame[j] = inp(t1->port_list[i]+FIFO); //****inpw?
; Line 1206
	*** 00307f	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003082	d1 e3 			shl	bx,1
	*** 003084	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003088	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00308b	05 20 00 		add	ax,32	;0020H
	*** 00308e	50 			push	ax
	*** 00308f	9a 00 00 00 00 		call	FAR PTR _inp
	*** 003094	83 c4 02 		add	sp,2
	*** 003097	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 00309a	8b 76 f4 		mov	si,WORD PTR [bp-12]	;j
	*** 00309d	26 88 40 06 		mov	BYTE PTR es:[bx+6][si],al
	*** 0030a1	e9 c6 ff 		jmp	$FC1792
					$FB1793:
;|***         while((inp(t1->port_list[i]+STAR)&CEC)==CEC);
; Line 1207
					$FC1795:
	*** 0030a4	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0030a7	d1 e3 			shl	bx,1
	*** 0030a9	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0030ad	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 0030b0	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0030b5	83 c4 02 		add	sp,2
	*** 0030b8	24 04 			and	al,4
	*** 0030ba	3c 04 			cmp	al,4
	*** 0030bc	74 03 			je	$JCC12476
	*** 0030be	e9 03 00 		jmp	$FB1796
					$JCC12476:
	*** 0030c1	e9 e0 ff 		jmp	$FC1795
					$FB1796:
;|***         outp(t1->port_list[i]+CMDR,RMC);     //release fifo
; Line 1208
	*** 0030c4	68 80 00 		push	128	;0080H
	*** 0030c7	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0030ca	d1 e3 			shl	bx,1
	*** 0030cc	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0030d0	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 0030d3	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0030d8	83 c4 04 		add	sp,4
;|***         //could move this stuff elsewhere (such that the buffers get more than 32 bytes in em)
;|***         irxbuf->valid = 1;//validate rbuf
; Line 1210
	*** 0030db	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0030de	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***         irxbuf->no_bytes = irxbuf->no_bytes + k; //number of bytes received in rbuf
; Line 1211
	*** 0030e3	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;k
	*** 0030e6	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0030e9	26 01 47 02 		add	WORD PTR es:[bx+2],ax
;|***         t1->current_rxbuf[i]++;  
; Line 1212
	*** 0030ed	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0030f0	d1 e6 			shl	si,1
	*** 0030f2	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0030f6	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 0030fb	40 			inc	ax
	*** 0030fc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0030ff	d1 e6 			shl	si,1
	*** 003101	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003105	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***         //irxbuf is no longer valid
;|***         if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) t1->current_rxbuf[i]=0;                
; Line 1214
	*** 00310a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00310d	d1 e6 			shl	si,1
	*** 00310f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003113	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 003118	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00311b	d1 e6 			shl	si,1
	*** 00311d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003121	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 003126	74 03 			je	$JCC12582
	*** 003128	e9 10 00 		jmp	$I1797
					$JCC12582:
	*** 00312b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00312e	d1 e6 			shl	si,1
	*** 003130	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003134	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***         if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1215
					$I1797:
	*** 00313b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00313e	d1 e6 			shl	si,1
	*** 003140	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003144	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003147	c1 e7 04 		shl	di,4
	*** 00314a	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 00314f	c1 e7 02 		shl	di,2
	*** 003152	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003156	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 00315a	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 00315e	74 03 			je	$JCC12638
	*** 003160	e9 1f 00 		jmp	$I1798
					$JCC12638:
;|***           {
; Line 1216
;|***           // an error occured and the 
;|***           //   main program isn't done with 
;|***           //   the frame that is about
;|***           //   to be used for received data
;|***           // set the receive buffers overflowed bit of the status word for this port here
;|***           t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1222
	*** 003163	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003166	d1 e6 			shl	si,1
	*** 003168	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00316c	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003171	0d 40 00 		or	ax,64	;0040H
	*** 003174	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003177	d1 e6 			shl	si,1
	*** 003179	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00317d	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***           }
; Line 1223
;|***         t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;  //prep buf for use
; Line 1224
					$I1798:
	*** 003182	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003185	d1 e6 			shl	si,1
	*** 003187	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00318b	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 00318e	c1 e7 04 		shl	di,4
	*** 003191	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 003196	c1 e7 02 		shl	di,2
	*** 003199	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00319d	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 0031a1	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***         t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;    //invalidate it for use
; Line 1225
	*** 0031a7	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0031aa	d1 e6 			shl	si,1
	*** 0031ac	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0031b0	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0031b3	c1 e7 04 		shl	di,4
	*** 0031b6	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0031bb	c1 e7 02 		shl	di,2
	*** 0031be	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0031c2	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 0031c6	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***         t1->port_status[i] = t1->port_status[i] | RX_READY;
; Line 1226
	*** 0031cb	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0031ce	d1 e6 			shl	si,1
	*** 0031d0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0031d4	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 0031d9	0d 00 02 		or	ax,512	;0200H
	*** 0031dc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0031df	d1 e6 			shl	si,1
	*** 0031e1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0031e5	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         while((inp(t1->port_list[i]+STAR)&CEC)==CEC);
; Line 1227
					$FC1800:
	*** 0031ea	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0031ed	d1 e3 			shl	bx,1
	*** 0031ef	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0031f3	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 0031f6	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0031fb	83 c4 02 		add	sp,2
	*** 0031fe	24 04 			and	al,4
	*** 003200	3c 04 			cmp	al,4
	*** 003202	74 03 			je	$JCC12802
	*** 003204	e9 03 00 		jmp	$FB1801
					$JCC12802:
	*** 003207	e9 e0 ff 		jmp	$FC1800
					$FB1801:
;|***         outp(t1->port_list[i]+CMDR,HUNT);     //go back to hunt mode
; Line 1228
	*** 00320a	6a 04 			push	4
	*** 00320c	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00320f	d1 e3 			shl	bx,1
	*** 003211	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003215	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 003218	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00321d	83 c4 04 		add	sp,4
;|***         }  //  end BISYNC                                                 
; Line 1229
;|***       } // end RME
; Line 1230
					$I1789:
;|***       
;|***     
;|***     if((isr0&RFS)==RFS)   //  RFS Receive Frame Start
; Line 1233
					$I1764:
	*** 003220	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 003223	24 40 			and	al,64	;0040H
	*** 003225	3c 40 			cmp	al,64	;0040H
	*** 003227	74 03 			je	$JCC12839
	*** 003229	e9 ca 01 		jmp	$I1802
					$JCC12839:
;|***       {
; Line 1234
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1235
	*** 00322c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00322f	d1 e6 			shl	si,1
	*** 003231	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003235	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 00323b	74 03 			je	$JCC12859
	*** 00323d	e9 1f 00 		jmp	$I1803
					$JCC12859:
;|***         {     
; Line 1236
;|***         //RFS interrupt time to start the coffee
;|***         t1->port_status[i] = t1->port_status[i] | RFS_INTERRUPT;
; Line 1238
	*** 003240	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003243	d1 e6 			shl	si,1
	*** 003245	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003249	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 00324e	0d 20 00 		or	ax,32	;0020H
	*** 003251	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003254	d1 e6 			shl	si,1
	*** 003256	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00325a	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1239
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1241
					$I1803:
	*** 00325f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003262	d1 e6 			shl	si,1
	*** 003264	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003268	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 00326e	74 03 			je	$JCC12910
	*** 003270	e9 83 01 		jmp	$I1804
					$JCC12910:
;|***         {
; Line 1242
;|***         //TIME out interrupt
;|***         //I think this would be a good time to pull the data from the fifo, issuing a 
;|***         //RFRD command (0x20) to force the fifo open, the book says that it will force
;|***         //a TCD interrupt which will collect the data
;|***         
;|***         if((inp(t1->port_list[i]+STAR)&0x20)==0x20) outp(t1->port_list[i]+CMDR,0x20);
; Line 1248
	*** 003273	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003276	d1 e3 			shl	bx,1
	*** 003278	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00327c	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00327f	9a 00 00 00 00 		call	FAR PTR _inp
	*** 003284	83 c4 02 		add	sp,2
	*** 003287	24 20 			and	al,32	;0020H
	*** 003289	3c 20 			cmp	al,32	;0020H
	*** 00328b	74 03 			je	$JCC12939
	*** 00328d	e9 19 00 		jmp	$I1805
					$JCC12939:
	*** 003290	6a 20 			push	32	;0020H
	*** 003292	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003295	d1 e3 			shl	bx,1
	*** 003297	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00329b	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00329e	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0032a3	83 c4 04 		add	sp,4
;|***         else
; Line 1249
	*** 0032a6	e9 2e 01 		jmp	$I1806
					$I1805:
;|***           {
; Line 1250
;|***           //here would be a good time to close out the current rxbuf and
;|***           //start in on a new one...sending rxready...no more data is 
;|***           //currently coming in so pass what we have on.
;|***           irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);     
; Line 1254
	*** 0032a9	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0032ac	d1 e6 			shl	si,1
	*** 0032ae	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0032b2	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0032b5	c1 e7 04 		shl	di,4
	*** 0032b8	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0032bd	c1 e7 02 		shl	di,2
	*** 0032c0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0032c4	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 0032c8	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 0032cc	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 0032cf	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***           irxbuf->valid = 1;//validate rbuf
; Line 1255
	*** 0032d2	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0032d5	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***           t1->current_rxbuf[i]++;  
; Line 1256
	*** 0032da	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0032dd	d1 e6 			shl	si,1
	*** 0032df	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0032e3	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 0032e8	40 			inc	ax
	*** 0032e9	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0032ec	d1 e6 			shl	si,1
	*** 0032ee	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0032f2	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***           //irxbuf is no longer valid
;|***           if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) t1->current_rxbuf[i]=0;                
; Line 1258
	*** 0032f7	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0032fa	d1 e6 			shl	si,1
	*** 0032fc	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003300	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 003305	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003308	d1 e6 			shl	si,1
	*** 00330a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00330e	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 003313	74 03 			je	$JCC13075
	*** 003315	e9 10 00 		jmp	$I1807
					$JCC13075:
	*** 003318	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00331b	d1 e6 			shl	si,1
	*** 00331d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003321	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***           if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1259
					$I1807:
	*** 003328	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00332b	d1 e6 			shl	si,1
	*** 00332d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003331	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003334	c1 e7 04 		shl	di,4
	*** 003337	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 00333c	c1 e7 02 		shl	di,2
	*** 00333f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003343	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 003347	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 00334b	74 03 			je	$JCC13131
	*** 00334d	e9 1f 00 		jmp	$I1808
					$JCC13131:
;|***             {
; Line 1260
;|***             // an error occured and the 
;|***             // main program isn't done with 
;|***             // the frame that is about
;|***             // to be used for received data
;|***             // set the receive buffers overflowed bit of the status word for this port here
;|***             t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1266
	*** 003350	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003353	d1 e6 			shl	si,1
	*** 003355	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003359	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 00335e	0d 40 00 		or	ax,64	;0040H
	*** 003361	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003364	d1 e6 			shl	si,1
	*** 003366	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00336a	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***             }
; Line 1267
;|***             
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;  //prep buf for use
; Line 1269
					$I1808:
	*** 00336f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003372	d1 e6 			shl	si,1
	*** 003374	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003378	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 00337b	c1 e7 04 		shl	di,4
	*** 00337e	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 003383	c1 e7 02 		shl	di,2
	*** 003386	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00338a	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 00338e	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;    //invalidate it for use
; Line 1270
	*** 003394	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003397	d1 e6 			shl	si,1
	*** 003399	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00339d	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0033a0	c1 e7 04 		shl	di,4
	*** 0033a3	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0033a8	c1 e7 02 		shl	di,2
	*** 0033ab	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0033af	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 0033b3	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           t1->port_status[i] = t1->port_status[i] | RX_READY;
; Line 1271
	*** 0033b8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0033bb	d1 e6 			shl	si,1
	*** 0033bd	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0033c1	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 0033c6	0d 00 02 		or	ax,512	;0200H
	*** 0033c9	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0033cc	d1 e6 			shl	si,1
	*** 0033ce	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0033d2	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***           }
; Line 1272
					$I1806:
;|***           
;|***         t1->port_status[i] = t1->port_status[i] | REC_TIMEOUT;
; Line 1274
	*** 0033d7	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0033da	d1 e6 			shl	si,1
	*** 0033dc	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0033e0	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 0033e5	0d 00 80 		or	ax,-32768	;8000H
	*** 0033e8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0033eb	d1 e6 			shl	si,1
	*** 0033ed	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0033f1	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }  // end ASYNC                             
; Line 1275
;|***         //shouldn't happen in bisync mode
;|***       } // end RFS
; Line 1277
					$I1804:
;|***       
;|***     
;|***     if((isr0&RSC)==RSC)     //  RSC Receive Status Change.  Significant in auto-mode only.
; Line 1280
					$I1802:
	*** 0033f6	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 0033f9	24 20 			and	al,32	;0020H
	*** 0033fb	3c 20 			cmp	al,32	;0020H
	*** 0033fd	74 03 			je	$JCC13309
	*** 0033ff	e9 99 00 		jmp	$I1809
					$JCC13309:
;|***       {
; Line 1281
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1282
	*** 003402	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003405	d1 e6 			shl	si,1
	*** 003407	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00340b	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003411	74 03 			je	$JCC13329
	*** 003413	e9 1f 00 		jmp	$I1810
					$JCC13329:
;|***         {     
; Line 1283
;|***         //RSC interrupt (either got a RR or a RNR from HDLC link in auto mode
;|***         t1->port_status[i] = t1->port_status[i] | RSC_INTERRUPT;
; Line 1285
	*** 003416	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003419	d1 e6 			shl	si,1
	*** 00341b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00341f	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003424	0d 80 00 		or	ax,128	;0080H
	*** 003427	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00342a	d1 e6 			shl	si,1
	*** 00342c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003430	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1286
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1288
					$I1810:
	*** 003435	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003438	d1 e6 			shl	si,1
	*** 00343a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00343e	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 003444	74 03 			je	$JCC13380
	*** 003446	e9 1f 00 		jmp	$I1811
					$JCC13380:
;|***         {
; Line 1289
;|***         //parrity error interrupt         
;|***         t1->port_status[i] = t1->port_status[i] | PARITY_ERROR;
; Line 1291
	*** 003449	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00344c	d1 e6 			shl	si,1
	*** 00344e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003452	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003457	0d 00 04 		or	ax,1024	;0400H
	*** 00345a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00345d	d1 e6 			shl	si,1
	*** 00345f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003463	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1292
;|***           
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1294
					$I1811:
	*** 003468	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00346b	d1 e6 			shl	si,1
	*** 00346d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003471	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003477	74 03 			je	$JCC13431
	*** 003479	e9 1f 00 		jmp	$I1812
					$JCC13431:
;|***         {
; Line 1295
;|***         //parrity error interrupt         
;|***         t1->port_status[i] = t1->port_status[i] | PARITY_ERROR;
; Line 1297
	*** 00347c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00347f	d1 e6 			shl	si,1
	*** 003481	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003485	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 00348a	0d 00 04 		or	ax,1024	;0400H
	*** 00348d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003490	d1 e6 			shl	si,1
	*** 003492	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003496	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1298
;|***       }  // end RSC
; Line 1299
					$I1812:
;|***       
;|***     
;|***     if((isr0&PCE)==PCE)  //  PCE Protocol Error.  Significant in auto-mode only.
; Line 1302
					$I1809:
	*** 00349b	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 00349e	24 10 			and	al,16	;0010H
	*** 0034a0	3c 10 			cmp	al,16	;0010H
	*** 0034a2	74 03 			je	$JCC13474
	*** 0034a4	e9 99 00 		jmp	$I1813
					$JCC13474:
;|***       {
; Line 1303
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1304
	*** 0034a7	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0034aa	d1 e6 			shl	si,1
	*** 0034ac	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0034b0	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 0034b6	74 03 			je	$JCC13494
	*** 0034b8	e9 1f 00 		jmp	$I1814
					$JCC13494:
;|***         {     
; Line 1305
;|***         //protocol error (auto mode only)            
;|***         t1->port_status[i] = t1->port_status[i] | PCE_INTERRUPT;
; Line 1307
	*** 0034bb	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0034be	d1 e6 			shl	si,1
	*** 0034c0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0034c4	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 0034c9	0d 04 00 		or	ax,4
	*** 0034cc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0034cf	d1 e6 			shl	si,1
	*** 0034d1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0034d5	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1308
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1310
					$I1814:
	*** 0034da	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0034dd	d1 e6 			shl	si,1
	*** 0034df	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0034e3	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 0034e9	74 03 			je	$JCC13545
	*** 0034eb	e9 1f 00 		jmp	$I1815
					$JCC13545:
;|***         {
; Line 1311
;|***         //framing error interrupt                         
;|***         t1->port_status[i] = t1->port_status[i] | FRAMING_ERROR;
; Line 1313
	*** 0034ee	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0034f1	d1 e6 			shl	si,1
	*** 0034f3	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0034f7	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 0034fc	0d 00 08 		or	ax,2048	;0800H
	*** 0034ff	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003502	d1 e6 			shl	si,1
	*** 003504	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003508	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         } 
; Line 1314
;|***         
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1316
					$I1815:
	*** 00350d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003510	d1 e6 			shl	si,1
	*** 003512	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003516	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 00351c	74 03 			je	$JCC13596
	*** 00351e	e9 1f 00 		jmp	$I1816
					$JCC13596:
;|***         {
; Line 1317
;|***         //SYN detected
;|***         t1->port_status[i] = t1->port_status[i] | SYN_DETECTED;
; Line 1319
	*** 003521	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003524	d1 e6 			shl	si,1
	*** 003526	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00352a	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 00352f	0d 00 08 		or	ax,2048	;0800H
	*** 003532	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003535	d1 e6 			shl	si,1
	*** 003537	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00353b	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         } 
; Line 1320
;|***       } // end PCE
; Line 1321
					$I1816:
;|***       
;|***     
;|***     if((isr0&PLLA)==PLLA)  //  PLLA DPLL Asynchronous.
; Line 1324
					$I1813:
	*** 003540	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 003543	24 08 			and	al,8
	*** 003545	3c 08 			cmp	al,8
	*** 003547	74 03 			je	$JCC13639
	*** 003549	e9 3c 00 		jmp	$I1817
					$JCC13639:
;|***       {
; Line 1325
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1326
	*** 00354c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00354f	d1 e6 			shl	si,1
	*** 003551	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003555	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 00355b	74 03 			je	$JCC13659
	*** 00355d	e9 00 00 		jmp	$I1818
					$JCC13659:
;|***         {
; Line 1327
;|***         //DPLL async interrupt (lost clock sync)
;|***         }
; Line 1329
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1331
					$I1818:
	*** 003560	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003563	d1 e6 			shl	si,1
	*** 003565	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003569	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 00356f	74 03 			je	$JCC13679
	*** 003571	e9 00 00 		jmp	$I1819
					$JCC13679:
;|***         {
; Line 1332
;|***         //DPLL async interrupt (lost clock sync)
;|***         }
; Line 1334
;|***         
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1336
					$I1819:
	*** 003574	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003577	d1 e6 			shl	si,1
	*** 003579	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00357d	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003583	74 03 			je	$JCC13699
	*** 003585	e9 00 00 		jmp	$I1820
					$JCC13699:
;|***         {
; Line 1337
;|***         //DPLL async interrupt (lost clock sync)
;|***         }
; Line 1339
;|***       } // end PLLA
; Line 1340
					$I1820:
;|***       
;|***     
;|***     if((isr0&CDSC)==CDSC)  //  CDSC  Carrier Detect Status Change.
; Line 1343
					$I1817:
	*** 003588	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 00358b	24 04 			and	al,4
	*** 00358d	3c 04 			cmp	al,4
	*** 00358f	74 03 			je	$JCC13711
	*** 003591	e9 3c 00 		jmp	$I1821
					$JCC13711:
;|***       {
; Line 1344
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1345
	*** 003594	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003597	d1 e6 			shl	si,1
	*** 003599	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00359d	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 0035a3	74 03 			je	$JCC13731
	*** 0035a5	e9 00 00 		jmp	$I1822
					$JCC13731:
;|***         {
; Line 1346
;|***         //carrier detect changed state
;|***         }
; Line 1348
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1350
					$I1822:
	*** 0035a8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0035ab	d1 e6 			shl	si,1
	*** 0035ad	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0035b1	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 0035b7	74 03 			je	$JCC13751
	*** 0035b9	e9 00 00 		jmp	$I1823
					$JCC13751:
;|***         {
; Line 1351
;|***         //carrier detect changed state
;|***         }
; Line 1353
;|***         
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1355
					$I1823:
	*** 0035bc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0035bf	d1 e6 			shl	si,1
	*** 0035c1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0035c5	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 0035cb	74 03 			je	$JCC13771
	*** 0035cd	e9 00 00 		jmp	$I1824
					$JCC13771:
;|***         {
; Line 1356
;|***         //carrier detect changed state
;|***         }
; Line 1358
;|***       }  // end CDSC
; Line 1359
					$I1824:
;|***         
;|***     
;|***     if((isr0&RFO)==RFO)  //  RFO Receive Frame Overflow.
; Line 1362
					$I1821:
	*** 0035d0	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 0035d3	24 02 			and	al,2
	*** 0035d5	3c 02 			cmp	al,2
	*** 0035d7	74 03 			je	$JCC13783
	*** 0035d9	e9 af 00 		jmp	$I1825
					$JCC13783:
;|***       {
; Line 1363
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1364
	*** 0035dc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0035df	d1 e6 			shl	si,1
	*** 0035e1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0035e5	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 0035eb	74 03 			je	$JCC13803
	*** 0035ed	e9 35 00 		jmp	$I1826
					$JCC13803:
;|***         {
; Line 1365
;|***         //RFO interrupt                              
;|***         t1->port_status[i] = t1->port_status[i] | RFO_INTERRUPT;
; Line 1367
	*** 0035f0	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0035f3	d1 e6 			shl	si,1
	*** 0035f5	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0035f9	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 0035fe	0d 08 00 		or	ax,8
	*** 003601	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003604	d1 e6 			shl	si,1
	*** 003606	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00360a	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         outp(t1->port_list[i]+CMDR,RHR); // reset the HDLC receiver and RFIFO
; Line 1368
	*** 00360f	6a 40 			push	64	;0040H
	*** 003611	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003614	d1 e3 			shl	bx,1
	*** 003616	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00361a	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00361d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 003622	83 c4 04 		add	sp,4
;|***         }
; Line 1369
;|***           
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1371
					$I1826:
	*** 003625	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003628	d1 e6 			shl	si,1
	*** 00362a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00362e	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 003634	74 03 			je	$JCC13876
	*** 003636	e9 1f 00 		jmp	$I1827
					$JCC13876:
;|***         {
; Line 1372
;|***         //receive overflow                                      
;|***         t1->port_status[i] = t1->port_status[i] | RFO_INTERRUPT;
; Line 1374
	*** 003639	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00363c	d1 e6 			shl	si,1
	*** 00363e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003642	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003647	0d 08 00 		or	ax,8
	*** 00364a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00364d	d1 e6 			shl	si,1
	*** 00364f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003653	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         //must be reset here or will be locked forever
;|***         }
; Line 1376
;|***         
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1378
					$I1827:
	*** 003658	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00365b	d1 e6 			shl	si,1
	*** 00365d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003661	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003667	74 03 			je	$JCC13927
	*** 003669	e9 1f 00 		jmp	$I1828
					$JCC13927:
;|***         {
; Line 1379
;|***         //receive overflow                                      
;|***         t1->port_status[i] = t1->port_status[i] | RFO_INTERRUPT;
; Line 1381
	*** 00366c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00366f	d1 e6 			shl	si,1
	*** 003671	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003675	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 00367a	0d 08 00 		or	ax,8
	*** 00367d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003680	d1 e6 			shl	si,1
	*** 003682	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003686	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         //must be reset here or will be locked forever
;|***         }
; Line 1383
;|***       }  // end RFO
; Line 1384
					$I1828:
;|***       
;|***       
;|***     if((isr0&RPF)==RPF)  //  RPF Receive Pool Full.  Interrupt mode only.
; Line 1387
					$I1825:
	*** 00368b	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;isr0
	*** 00368e	24 01 			and	al,1
	*** 003690	3c 01 			cmp	al,1
	*** 003692	74 03 			je	$JCC13970
	*** 003694	e9 a9 04 		jmp	$I1829
					$JCC13970:
;|***       {
; Line 1388
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1389
	*** 003697	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00369a	d1 e6 			shl	si,1
	*** 00369c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0036a0	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 0036a6	74 03 			je	$JCC13990
	*** 0036a8	e9 a3 00 		jmp	$I1830
					$JCC13990:
;|***         {                                                            
; Line 1390
;|***         //RPF interrupt, exactly 32 bytes are ready
;|***         //do this for all but DMA (we shouldn't get here in DMA mode)
;|***         irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);
; Line 1393
	*** 0036ab	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0036ae	d1 e6 			shl	si,1
	*** 0036b0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0036b4	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0036b7	c1 e7 04 		shl	di,4
	*** 0036ba	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0036bf	c1 e7 02 		shl	di,2
	*** 0036c2	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0036c6	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 0036ca	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 0036ce	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 0036d1	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***         bloc = (unsigned far *)irxbuf->frame;
; Line 1394
	*** 0036d4	8b 46 e2 		mov	ax,WORD PTR [bp-30]	;irxbuf
	*** 0036d7	8b 56 e4 		mov	dx,WORD PTR [bp-28]
	*** 0036da	05 06 00 		add	ax,6
	*** 0036dd	89 46 e8 		mov	WORD PTR [bp-24],ax	;bloc
	*** 0036e0	89 56 ea 		mov	WORD PTR [bp-22],dx
;|***         for(j=(irxbuf->no_bytes>>1);j<(irxbuf->no_bytes>>1)+16;j++)
; Line 1395
	*** 0036e3	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0036e6	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 0036ea	d1 e8 			shr	ax,1
	*** 0036ec	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 0036ef	e9 03 00 		jmp	$F1832
					$FC1833:
	*** 0036f2	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1832:
	*** 0036f5	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0036f8	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 0036fc	d1 e8 			shr	ax,1
	*** 0036fe	05 10 00 		add	ax,16	;0010H
	*** 003701	3b 46 f4 		cmp	ax,WORD PTR [bp-12]	;j
	*** 003704	77 03 			ja	$JCC14084
	*** 003706	e9 26 00 		jmp	$FB1834
					$JCC14084:
;|***           {
; Line 1396
;|***           bloc[j] = inpw(t1->port_list[i]+FIFO);
; Line 1397
	*** 003709	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00370c	d1 e3 			shl	bx,1
	*** 00370e	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003712	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 003715	05 20 00 		add	ax,32	;0020H
	*** 003718	50 			push	ax
	*** 003719	9a 00 00 00 00 		call	FAR PTR _inpw
	*** 00371e	83 c4 02 		add	sp,2
	*** 003721	8b 5e f4 		mov	bx,WORD PTR [bp-12]	;j
	*** 003724	d1 e3 			shl	bx,1
	*** 003726	c4 76 e8 		les	si,DWORD PTR [bp-24]	;bloc
	*** 003729	26 89 00 		mov	WORD PTR es:[bx][si],ax
;|***           }
; Line 1398
	*** 00372c	e9 c3 ff 		jmp	$FC1833
					$FB1834:
;|***           
;|***         outp(t1->port_list[i]+CMDR,RMC);     //release rfifo
; Line 1400
	*** 00372f	68 80 00 		push	128	;0080H
	*** 003732	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003735	d1 e3 			shl	bx,1
	*** 003737	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00373b	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00373e	9a 00 00 00 00 		call	FAR PTR _outp
	*** 003743	83 c4 04 		add	sp,4
;|***         irxbuf->no_bytes += 32;
; Line 1401
	*** 003746	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003749	26 83 47 02 20 		add	WORD PTR es:[bx+2],32	;0020H
;|***         } 
; Line 1402
;|***       
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1404
					$I1830:
	*** 00374e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003751	d1 e6 			shl	si,1
	*** 003753	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003757	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 00375d	74 03 			je	$JCC14173
	*** 00375f	e9 e5 01 		jmp	$I1835
					$JCC14173:
;|***         {
; Line 1405
;|***         //DATA IS READY                                             
;|***         k = inp(t1->port_list[i]+RBCL);//get num bytes in fifo
; Line 1407
	*** 003762	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003765	d1 e3 			shl	bx,1
	*** 003767	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00376b	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00376e	05 0a 00 		add	ax,10	;000aH
	*** 003771	50 			push	ax
	*** 003772	9a 00 00 00 00 		call	FAR PTR _inp
	*** 003777	83 c4 02 		add	sp,2
	*** 00377a	89 46 f2 		mov	WORD PTR [bp-14],ax	;k
;|***         k = k&0x1f;
; Line 1408
	*** 00377d	83 66 f2 1f 		and	WORD PTR [bp-14],31	;001fH	;k
;|***         if(k==0) k=32;
; Line 1409
	*** 003781	83 7e f2 00 		cmp	WORD PTR [bp-14],0	;k
	*** 003785	74 03 			je	$JCC14213
	*** 003787	e9 05 00 		jmp	$I1836
					$JCC14213:
	*** 00378a	c7 46 f2 20 00 		mov	WORD PTR [bp-14],32	;0020H	;k
;|***         //assumes that k is allways a multiple of 2 (status byte included mode)
;|***         irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);     
; Line 1411
					$I1836:
	*** 00378f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003792	d1 e6 			shl	si,1
	*** 003794	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003798	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 00379b	c1 e7 04 		shl	di,4
	*** 00379e	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0037a3	c1 e7 02 		shl	di,2
	*** 0037a6	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0037aa	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 0037ae	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 0037b2	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 0037b5	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***         bloc = (unsigned far *)irxbuf->frame;
; Line 1412
	*** 0037b8	8b 46 e2 		mov	ax,WORD PTR [bp-30]	;irxbuf
	*** 0037bb	8b 56 e4 		mov	dx,WORD PTR [bp-28]
	*** 0037be	05 06 00 		add	ax,6
	*** 0037c1	89 46 e8 		mov	WORD PTR [bp-24],ax	;bloc
	*** 0037c4	89 56 ea 		mov	WORD PTR [bp-22],dx
;|***         for(j=irxbuf->no_bytes>>1;j<(irxbuf->no_bytes+k)>>1;j++)  bloc[j] = inpw(t1->port_list[i]+FIFO);
; Line 1413
	*** 0037c7	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0037ca	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 0037ce	d1 e8 			shr	ax,1
	*** 0037d0	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 0037d3	e9 03 00 		jmp	$F1838
					$FC1839:
	*** 0037d6	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1838:
	*** 0037d9	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0037dc	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 0037e0	03 46 f2 		add	ax,WORD PTR [bp-14]	;k
	*** 0037e3	d1 e8 			shr	ax,1
	*** 0037e5	3b 46 f4 		cmp	ax,WORD PTR [bp-12]	;j
	*** 0037e8	77 03 			ja	$JCC14312
	*** 0037ea	e9 26 00 		jmp	$FB1840
					$JCC14312:
	*** 0037ed	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0037f0	d1 e3 			shl	bx,1
	*** 0037f2	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0037f6	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0037f9	05 20 00 		add	ax,32	;0020H
	*** 0037fc	50 			push	ax
	*** 0037fd	9a 00 00 00 00 		call	FAR PTR _inpw
	*** 003802	83 c4 02 		add	sp,2
	*** 003805	8b 5e f4 		mov	bx,WORD PTR [bp-12]	;j
	*** 003808	d1 e3 			shl	bx,1
	*** 00380a	c4 76 e8 		les	si,DWORD PTR [bp-24]	;bloc
	*** 00380d	26 89 00 		mov	WORD PTR es:[bx][si],ax
	*** 003810	e9 c3 ff 		jmp	$FC1839
					$FB1840:
;|***         outp(t1->port_list[i]+CMDR,RMC);     //release fifo
; Line 1414
	*** 003813	68 80 00 		push	128	;0080H
	*** 003816	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003819	d1 e3 			shl	bx,1
	*** 00381b	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00381f	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 003822	9a 00 00 00 00 		call	FAR PTR _outp
	*** 003827	83 c4 04 		add	sp,4
;|***         //could move this stuff elsewhere (such that the buffers get more than 32 bytes in em)
;|***         irxbuf->no_bytes = irxbuf->no_bytes + k; //number of bytes received in rbuf
; Line 1416
	*** 00382a	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;k
	*** 00382d	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003830	26 01 47 02 		add	WORD PTR es:[bx+2],ax
;|***         if(irxbuf->no_bytes >= (FRAME_SIZE - 32))
; Line 1417
	*** 003834	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003837	26 81 7f 02 e0 03 	cmp	WORD PTR es:[bx+2],992	;03e0H
	*** 00383d	73 03 			jae	$JCC14397
	*** 00383f	e9 05 01 		jmp	$I1841
					$JCC14397:
;|***           {
; Line 1418
;|***           irxbuf->valid = 1;//validate rbuf
; Line 1419
	*** 003842	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003845	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***           t1->current_rxbuf[i]++;  
; Line 1420
	*** 00384a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00384d	d1 e6 			shl	si,1
	*** 00384f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003853	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 003858	40 			inc	ax
	*** 003859	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00385c	d1 e6 			shl	si,1
	*** 00385e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003862	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***           //irxbuf is no longer valid
;|***           if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) t1->current_rxbuf[i]=0;                
; Line 1422
	*** 003867	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00386a	d1 e6 			shl	si,1
	*** 00386c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003870	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 003875	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003878	d1 e6 			shl	si,1
	*** 00387a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00387e	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 003883	74 03 			je	$JCC14467
	*** 003885	e9 10 00 		jmp	$I1842
					$JCC14467:
	*** 003888	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00388b	d1 e6 			shl	si,1
	*** 00388d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003891	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***           if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1423
					$I1842:
	*** 003898	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00389b	d1 e6 			shl	si,1
	*** 00389d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0038a1	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0038a4	c1 e7 04 		shl	di,4
	*** 0038a7	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0038ac	c1 e7 02 		shl	di,2
	*** 0038af	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0038b3	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 0038b7	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 0038bb	74 03 			je	$JCC14523
	*** 0038bd	e9 1f 00 		jmp	$I1843
					$JCC14523:
;|***             {
; Line 1424
;|***             // an error occured and the 
;|***             //   main program isn't done with 
;|***             //   the frame that is about
;|***             //   to be used for received data
;|***             //set the receive buffers overflowed bit of the status word for this port here
;|***             t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1430
	*** 0038c0	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0038c3	d1 e6 			shl	si,1
	*** 0038c5	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0038c9	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 0038ce	0d 40 00 		or	ax,64	;0040H
	*** 0038d1	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0038d4	d1 e6 			shl	si,1
	*** 0038d6	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0038da	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***             }
; Line 1431
;|***             
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;  //prep buf for use
; Line 1433
					$I1843:
	*** 0038df	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0038e2	d1 e6 			shl	si,1
	*** 0038e4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0038e8	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0038eb	c1 e7 04 		shl	di,4
	*** 0038ee	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 0038f3	c1 e7 02 		shl	di,2
	*** 0038f6	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0038fa	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 0038fe	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;    //invalidate it for use
; Line 1434
	*** 003904	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003907	d1 e6 			shl	si,1
	*** 003909	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00390d	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003910	c1 e7 04 		shl	di,4
	*** 003913	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 003918	c1 e7 02 		shl	di,2
	*** 00391b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00391f	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 003923	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           t1->port_status[i] = t1->port_status[i] | RX_READY;
; Line 1435
	*** 003928	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00392b	d1 e6 			shl	si,1
	*** 00392d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003931	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003936	0d 00 02 		or	ax,512	;0200H
	*** 003939	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00393c	d1 e6 			shl	si,1
	*** 00393e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003942	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***           }
; Line 1436
;|***         }     
; Line 1437
					$I1841:
;|***       
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1439
					$I1835:
	*** 003947	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00394a	d1 e6 			shl	si,1
	*** 00394c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003950	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003956	74 03 			je	$JCC14678
	*** 003958	e9 e5 01 		jmp	$I1844
					$JCC14678:
;|***         {
; Line 1440
;|***         //DATA IS READY                                             
;|***         k = inp(t1->port_list[i]+RBCL);//get num bytes in fifo
; Line 1442
	*** 00395b	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00395e	d1 e3 			shl	bx,1
	*** 003960	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003964	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 003967	05 0a 00 		add	ax,10	;000aH
	*** 00396a	50 			push	ax
	*** 00396b	9a 00 00 00 00 		call	FAR PTR _inp
	*** 003970	83 c4 02 		add	sp,2
	*** 003973	89 46 f2 		mov	WORD PTR [bp-14],ax	;k
;|***         k = k&0x1f;
; Line 1443
	*** 003976	83 66 f2 1f 		and	WORD PTR [bp-14],31	;001fH	;k
;|***         if(k==0) k=32;
; Line 1444
	*** 00397a	83 7e f2 00 		cmp	WORD PTR [bp-14],0	;k
	*** 00397e	74 03 			je	$JCC14718
	*** 003980	e9 05 00 		jmp	$I1845
					$JCC14718:
	*** 003983	c7 46 f2 20 00 		mov	WORD PTR [bp-14],32	;0020H	;k
;|***         
;|***         //assumes that k is allways a multiple of 2 (status byte included mode)
;|***         //this will hold true unless the programmed threshold = 1 in non parity store mode
;|***         //ie this code will not work for threshold level 1, in no parity store mode!!!!!
;|***         irxbuf = (t1->rxbuffer[i][t1->current_rxbuf[i]]);     
; Line 1449
					$I1845:
	*** 003988	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00398b	d1 e6 			shl	si,1
	*** 00398d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003991	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003994	c1 e7 04 		shl	di,4
	*** 003997	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 00399c	c1 e7 02 		shl	di,2
	*** 00399f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0039a3	26 8b 41 7a 		mov	ax,WORD PTR es:[bx+122][di]
	*** 0039a7	26 8b 51 7c 		mov	dx,WORD PTR es:[bx+124][di]
	*** 0039ab	89 46 e2 		mov	WORD PTR [bp-30],ax	;irxbuf
	*** 0039ae	89 56 e4 		mov	WORD PTR [bp-28],dx
;|***         bloc = (unsigned far *)irxbuf->frame;
; Line 1450
	*** 0039b1	8b 46 e2 		mov	ax,WORD PTR [bp-30]	;irxbuf
	*** 0039b4	8b 56 e4 		mov	dx,WORD PTR [bp-28]
	*** 0039b7	05 06 00 		add	ax,6
	*** 0039ba	89 46 e8 		mov	WORD PTR [bp-24],ax	;bloc
	*** 0039bd	89 56 ea 		mov	WORD PTR [bp-22],dx
;|***         for(j=irxbuf->no_bytes>>1;j<(irxbuf->no_bytes+k)>>1;j++)
; Line 1451
	*** 0039c0	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0039c3	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 0039c7	d1 e8 			shr	ax,1
	*** 0039c9	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 0039cc	e9 03 00 		jmp	$F1847
					$FC1848:
	*** 0039cf	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1847:
	*** 0039d2	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 0039d5	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 0039d9	03 46 f2 		add	ax,WORD PTR [bp-14]	;k
	*** 0039dc	d1 e8 			shr	ax,1
	*** 0039de	3b 46 f4 		cmp	ax,WORD PTR [bp-12]	;j
	*** 0039e1	77 03 			ja	$JCC14817
	*** 0039e3	e9 26 00 		jmp	$FB1849
					$JCC14817:
;|***           {
; Line 1452
;|***           bloc[j] = inpw(t1->port_list[i]+FIFO);
; Line 1453
	*** 0039e6	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0039e9	d1 e3 			shl	bx,1
	*** 0039eb	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0039ef	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0039f2	05 20 00 		add	ax,32	;0020H
	*** 0039f5	50 			push	ax
	*** 0039f6	9a 00 00 00 00 		call	FAR PTR _inpw
	*** 0039fb	83 c4 02 		add	sp,2
	*** 0039fe	8b 5e f4 		mov	bx,WORD PTR [bp-12]	;j
	*** 003a01	d1 e3 			shl	bx,1
	*** 003a03	c4 76 e8 		les	si,DWORD PTR [bp-24]	;bloc
	*** 003a06	26 89 00 		mov	WORD PTR es:[bx][si],ax
;|***           }
; Line 1454
	*** 003a09	e9 c3 ff 		jmp	$FC1848
					$FB1849:
;|***           
;|***         outp(t1->port_list[i]+CMDR,RMC);     //release fifo
; Line 1456
	*** 003a0c	68 80 00 		push	128	;0080H
	*** 003a0f	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003a12	d1 e3 			shl	bx,1
	*** 003a14	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003a18	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 003a1b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 003a20	83 c4 04 		add	sp,4
;|***         //could move this stuff elsewhere (such that the buffers get more than 32 bytes in em)
;|***         irxbuf->no_bytes = irxbuf->no_bytes + k; //number of bytes received in rbuf
; Line 1458
	*** 003a23	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;k
	*** 003a26	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003a29	26 01 47 02 		add	WORD PTR es:[bx+2],ax
;|***         if(irxbuf->no_bytes >=( FRAME_SIZE - 32))
; Line 1459
	*** 003a2d	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003a30	26 81 7f 02 e0 03 	cmp	WORD PTR es:[bx+2],992	;03e0H
	*** 003a36	73 03 			jae	$JCC14902
	*** 003a38	e9 05 01 		jmp	$I1850
					$JCC14902:
;|***           {
; Line 1460
;|***           irxbuf->valid = 1;//validate rbuf
; Line 1461
	*** 003a3b	c4 5e e2 		les	bx,DWORD PTR [bp-30]	;irxbuf
	*** 003a3e	26 c7 07 01 00 		mov	WORD PTR es:[bx],1
;|***           t1->current_rxbuf[i]++;  
; Line 1462
	*** 003a43	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003a46	d1 e6 			shl	si,1
	*** 003a48	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003a4c	26 8b 80 7a 01 		mov	ax,WORD PTR es:[bx+378][si]
	*** 003a51	40 			inc	ax
	*** 003a52	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003a55	d1 e6 			shl	si,1
	*** 003a57	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003a5b	26 89 80 7a 01 		mov	WORD PTR es:[bx+378][si],ax
;|***           //irxbuf is no longer valid
;|***           if(t1->current_rxbuf[i]==t1->max_rxbuf[i]) t1->current_rxbuf[i]=0;                
; Line 1464
	*** 003a60	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003a63	d1 e6 			shl	si,1
	*** 003a65	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003a69	26 8b 80 82 01 		mov	ax,WORD PTR es:[bx+386][si]
	*** 003a6e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003a71	d1 e6 			shl	si,1
	*** 003a73	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003a77	26 39 80 7a 01 		cmp	WORD PTR es:[bx+378][si],ax
	*** 003a7c	74 03 			je	$JCC14972
	*** 003a7e	e9 10 00 		jmp	$I1851
					$JCC14972:
	*** 003a81	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003a84	d1 e6 			shl	si,1
	*** 003a86	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003a8a	26 c7 80 7a 01 00 00 	mov	WORD PTR es:[bx+378][si],0
;|***           if(t1->rxbuffer[i][t1->current_rxbuf[i]]->valid ==1) 
; Line 1465
					$I1851:
	*** 003a91	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003a94	d1 e6 			shl	si,1
	*** 003a96	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003a9a	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003a9d	c1 e7 04 		shl	di,4
	*** 003aa0	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 003aa5	c1 e7 02 		shl	di,2
	*** 003aa8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003aac	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 003ab0	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 003ab4	74 03 			je	$JCC15028
	*** 003ab6	e9 1f 00 		jmp	$I1852
					$JCC15028:
;|***             {
; Line 1466
;|***             // an error occured and the 
;|***             //   main program isn't done with 
;|***             //   the frame that is about
;|***             //   to be used for received data
;|***             //set the receive buffers overflowed bit of the status word for this port here
;|***             t1->port_status[i] = t1->port_status[i] | RX_BUFFER_OVERFLOW;
; Line 1472
	*** 003ab9	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003abc	d1 e6 			shl	si,1
	*** 003abe	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ac2	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003ac7	0d 40 00 		or	ax,64	;0040H
	*** 003aca	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003acd	d1 e6 			shl	si,1
	*** 003acf	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ad3	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***             }
; Line 1473
;|***             
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->no_bytes = 0;  //prep buf for use
; Line 1475
					$I1852:
	*** 003ad8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003adb	d1 e6 			shl	si,1
	*** 003add	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ae1	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003ae4	c1 e7 04 		shl	di,4
	*** 003ae7	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 003aec	c1 e7 02 		shl	di,2
	*** 003aef	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003af3	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 003af7	26 c7 47 02 00 00 	mov	WORD PTR es:[bx+2],0
;|***           t1->rxbuffer[i][t1->current_rxbuf[i]]->valid = 0;    //invalidate it for use
; Line 1476
	*** 003afd	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003b00	d1 e6 			shl	si,1
	*** 003b02	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b06	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003b09	c1 e7 04 		shl	di,4
	*** 003b0c	26 03 b8 7a 01 		add	di,WORD PTR es:[bx+378][si]
	*** 003b11	c1 e7 02 		shl	di,2
	*** 003b14	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b18	26 c4 59 7a 		les	bx,DWORD PTR es:[bx+122][di]
	*** 003b1c	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***           t1->port_status[i] = t1->port_status[i] | RX_READY;
; Line 1477
	*** 003b21	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003b24	d1 e6 			shl	si,1
	*** 003b26	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b2a	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003b2f	0d 00 02 		or	ax,512	;0200H
	*** 003b32	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003b35	d1 e6 			shl	si,1
	*** 003b37	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b3b	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***           }
; Line 1478
;|***         }     
; Line 1479
					$I1850:
;|***       } // end RPF
; Line 1480
					$I1844:
;|***     
;|***     
;|***     
;|***     //check ISR1 next  
;|***     if((isr1&EOP)==EOP)  //EOP End of Poll Sequence Detected.  Valid only in SLDC Loop mode.
; Line 1485
					$I1829:
	*** 003b40	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003b43	24 80 			and	al,128	;0080H
	*** 003b45	3c 80 			cmp	al,128	;0080H
	*** 003b47	74 03 			je	$JCC15175
	*** 003b49	e9 47 00 		jmp	$I1853
					$JCC15175:
;|***       { 
; Line 1486
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1487
	*** 003b4c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003b4f	d1 e6 			shl	si,1
	*** 003b51	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b55	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003b5b	74 03 			je	$JCC15195
	*** 003b5d	e9 00 00 		jmp	$I1854
					$JCC15195:
;|***         {
; Line 1488
;|***         //end of poll
;|***         }            
; Line 1490
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1492
					$I1854:
	*** 003b60	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003b63	d1 e6 			shl	si,1
	*** 003b65	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b69	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 003b6f	74 03 			je	$JCC15215
	*** 003b71	e9 1f 00 		jmp	$I1855
					$JCC15215:
;|***         {
; Line 1493
;|***         //break detect interrupt                                  
;|***         t1->port_status[i] = t1->port_status[i] | BREAK_DETECTED;
; Line 1495
	*** 003b74	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003b77	d1 e6 			shl	si,1
	*** 003b79	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b7d	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003b82	0d 00 10 		or	ax,4096	;1000H
	*** 003b85	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003b88	d1 e6 			shl	si,1
	*** 003b8a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003b8e	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }       
; Line 1496
;|***       }  // end EOP
; Line 1497
					$I1855:
;|***       
;|***     
;|***     
;|***     if((isr1&0x40)==0x40) // OLP/RDO On Loop(SDLC Loop mode) / Receive Data Overflow(n/a in SDLC Loop)
; Line 1501
					$I1853:
	*** 003b93	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003b96	24 40 			and	al,64	;0040H
	*** 003b98	3c 40 			cmp	al,64	;0040H
	*** 003b9a	74 03 			je	$JCC15258
	*** 003b9c	e9 47 00 		jmp	$I1856
					$JCC15258:
;|***       {               
; Line 1502
;|***       if(t1->eopmode[i]==OPMODE_HDLC)  //  OLP
; Line 1503
	*** 003b9f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ba2	d1 e6 			shl	si,1
	*** 003ba4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ba8	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003bae	74 03 			je	$JCC15278
	*** 003bb0	e9 00 00 		jmp	$I1857
					$JCC15278:
;|***         {
; Line 1504
;|***         //on loop interrupt
;|***         }
; Line 1506
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)  //  RDO
; Line 1507
					$I1857:
	*** 003bb3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003bb6	d1 e6 			shl	si,1
	*** 003bb8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003bbc	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 003bc2	74 03 			je	$JCC15298
	*** 003bc4	e9 1f 00 		jmp	$I1858
					$JCC15298:
;|***         {                  
; Line 1508
;|***         //break terminated interrupt
;|***         t1->port_status[i] = t1->port_status[i] | BREAK_TERMINATED;
; Line 1510
	*** 003bc7	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003bca	d1 e6 			shl	si,1
	*** 003bcc	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003bd0	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003bd5	0d 00 20 		or	ax,8192	;2000H
	*** 003bd8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003bdb	d1 e6 			shl	si,1
	*** 003bdd	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003be1	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }                  
; Line 1511
;|***       }  // end OLP/RDO
; Line 1512
					$I1858:
;|***       
;|***     
;|***     if((isr1&0x20)==0x20)  //  AOLP/ALLS Active On Loop(SDLC Loop mode) / All Sent(non-SDLC Loop)
; Line 1515
					$I1856:
	*** 003be6	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003be9	24 20 			and	al,32	;0020H
	*** 003beb	3c 20 			cmp	al,32	;0020H
	*** 003bed	74 03 			je	$JCC15341
	*** 003bef	e9 7a 00 		jmp	$I1859
					$JCC15341:
;|***       {               
; Line 1516
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1517
	*** 003bf2	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003bf5	d1 e6 			shl	si,1
	*** 003bf7	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003bfb	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003c01	74 03 			je	$JCC15361
	*** 003c03	e9 00 00 		jmp	$I1860
					$JCC15361:
;|***         {
; Line 1518
;|***         //all sent interrupt (tx machine is empty)
;|***         }                                         
; Line 1520
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1522
					$I1860:
	*** 003c06	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c09	d1 e6 			shl	si,1
	*** 003c0b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c0f	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 003c15	74 03 			je	$JCC15381
	*** 003c17	e9 1f 00 		jmp	$I1861
					$JCC15381:
;|***         {
; Line 1523
;|***         //all characters are sent out the fifo and out the txd pin
;|***         t1->port_status[i] = t1->port_status[i] | ALLSENT_INTERRUPT;
; Line 1525
	*** 003c1a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c1d	d1 e6 			shl	si,1
	*** 003c1f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c23	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003c28	0d 00 40 		or	ax,16384	;4000H
	*** 003c2b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c2e	d1 e6 			shl	si,1
	*** 003c30	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c34	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1526
;|***         
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1528
					$I1861:
	*** 003c39	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c3c	d1 e6 			shl	si,1
	*** 003c3e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c42	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003c48	74 03 			je	$JCC15432
	*** 003c4a	e9 1f 00 		jmp	$I1862
					$JCC15432:
;|***         {
; Line 1529
;|***         //all characters are sent out the fifo and out the txd pin
;|***         t1->port_status[i] = t1->port_status[i] | ALLSENT_INTERRUPT;
; Line 1531
	*** 003c4d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c50	d1 e6 			shl	si,1
	*** 003c52	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c56	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003c5b	0d 00 40 		or	ax,16384	;4000H
	*** 003c5e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c61	d1 e6 			shl	si,1
	*** 003c63	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c67	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1532
;|***       } // end AOLP/ALLS
; Line 1533
					$I1862:
;|***       
;|***     
;|***     if((isr1&0x10)==0x10) //  XDU/EXE Transmit Data Underrun/Extended Transmission End
; Line 1536
					$I1859:
	*** 003c6c	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003c6f	24 10 			and	al,16	;0010H
	*** 003c71	3c 10 			cmp	al,16	;0010H
	*** 003c73	74 03 			je	$JCC15475
	*** 003c75	e9 66 00 		jmp	$I1863
					$JCC15475:
;|***       {
; Line 1537
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1538
	*** 003c78	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c7b	d1 e6 			shl	si,1
	*** 003c7d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c81	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003c87	74 03 			je	$JCC15495
	*** 003c89	e9 1f 00 		jmp	$I1864
					$JCC15495:
;|***         {
; Line 1539
;|***         //EXE interupt                               
;|***         t1->port_status[i] = t1->port_status[i] | EXE_INTERRUPT;
; Line 1541
	*** 003c8c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003c8f	d1 e6 			shl	si,1
	*** 003c91	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003c95	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003c9a	0d 02 00 		or	ax,2
	*** 003c9d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ca0	d1 e6 			shl	si,1
	*** 003ca2	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ca6	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         //outp(t1->port_list[i]+CMDR,XRES);
;|***         //need something here to reset the dma channel if operating in Extended trasparent mode
;|***         //as this is the normal transmit end message for that mode
;|***         }
; Line 1545
;|***           
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1547
					$I1864:
	*** 003cab	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003cae	d1 e6 			shl	si,1
	*** 003cb0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003cb4	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003cba	74 03 			je	$JCC15546
	*** 003cbc	e9 1f 00 		jmp	$I1865
					$JCC15546:
;|***         {
; Line 1548
;|***         //EXE interupt                               
;|***         t1->port_status[i] = t1->port_status[i] | EXE_INTERRUPT;
; Line 1550
	*** 003cbf	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003cc2	d1 e6 			shl	si,1
	*** 003cc4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003cc8	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003ccd	0d 02 00 		or	ax,2
	*** 003cd0	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003cd3	d1 e6 			shl	si,1
	*** 003cd5	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003cd9	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1551
;|***       } // end XDU/EXE
; Line 1552
					$I1865:
;|*** 
;|***         
;|***     if((isr1&TIN)==TIN)  // Timer Interrupt
; Line 1555
					$I1863:
	*** 003cde	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003ce1	24 08 			and	al,8
	*** 003ce3	3c 08 			cmp	al,8
	*** 003ce5	74 03 			je	$JCC15589
	*** 003ce7	e9 d2 00 		jmp	$I1866
					$JCC15589:
;|***       {
; Line 1556
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1557
	*** 003cea	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ced	d1 e6 			shl	si,1
	*** 003cef	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003cf3	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003cf9	74 03 			je	$JCC15609
	*** 003cfb	e9 38 00 		jmp	$I1867
					$JCC15609:
;|***         {        
; Line 1558
;|***         if(i==1)
; Line 1559
	*** 003cfe	83 7e f8 01 		cmp	WORD PTR [bp-8],1	;i
	*** 003d02	74 03 			je	$JCC15618
	*** 003d04	e9 00 00 		jmp	$I1868
					$JCC15618:
;|***           {
; Line 1560
;|***           //frame++;  // jtm used for frame timing in cb2000
;|***           }
; Line 1562
;|*** 
;|***         t1->port_status[i] = t1->port_status[i] | TIMER_INTERRUPT;
; Line 1564
					$I1868:
	*** 003d07	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d0a	d1 e6 			shl	si,1
	*** 003d0c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d10	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003d15	0d 00 01 		or	ax,256	;0100H
	*** 003d18	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d1b	d1 e6 			shl	si,1
	*** 003d1d	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d21	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         t1->timer_status[i] = 1;
; Line 1565
	*** 003d26	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d29	d1 e6 			shl	si,1
	*** 003d2b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d2f	26 c7 80 8a 01 01 00 	mov	WORD PTR es:[bx+394][si],1
;|***         
;|***         //outp(t1->port_list[i]+TIMR,inp(t1->port_list[i]+TIMR));//stops timer    
;|***         }
; Line 1568
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1570
					$I1867:
	*** 003d36	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d39	d1 e6 			shl	si,1
	*** 003d3b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d3f	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 003d45	74 03 			je	$JCC15685
	*** 003d47	e9 2f 00 		jmp	$I1869
					$JCC15685:
;|***         {
; Line 1571
;|***         t1->port_status[i] = t1->port_status[i] | TIMER_INTERRUPT;
; Line 1572
	*** 003d4a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d4d	d1 e6 			shl	si,1
	*** 003d4f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d53	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003d58	0d 00 01 		or	ax,256	;0100H
	*** 003d5b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d5e	d1 e6 			shl	si,1
	*** 003d60	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d64	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         t1->timer_status[i] = 1;
; Line 1573
	*** 003d69	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d6c	d1 e6 			shl	si,1
	*** 003d6e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d72	26 c7 80 8a 01 01 00 	mov	WORD PTR es:[bx+394][si],1
;|***         }
; Line 1574
;|***     
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1576
					$I1869:
	*** 003d79	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d7c	d1 e6 			shl	si,1
	*** 003d7e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d82	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003d88	74 03 			je	$JCC15752
	*** 003d8a	e9 2f 00 		jmp	$I1870
					$JCC15752:
;|***         {
; Line 1577
;|***         t1->port_status[i] = t1->port_status[i] | TIMER_INTERRUPT;
; Line 1578
	*** 003d8d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003d90	d1 e6 			shl	si,1
	*** 003d92	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003d96	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003d9b	0d 00 01 		or	ax,256	;0100H
	*** 003d9e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003da1	d1 e6 			shl	si,1
	*** 003da3	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003da7	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         t1->timer_status[i] = 1;
; Line 1579
	*** 003dac	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003daf	d1 e6 			shl	si,1
	*** 003db1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003db5	26 c7 80 8a 01 01 00 	mov	WORD PTR es:[bx+394][si],1
;|***         }
; Line 1580
;|***       } // end TIN
; Line 1581
					$I1870:
;|***       
;|***       
;|***     if((isr1&CSC)==CSC)  // Clear to Send Status Change
; Line 1584
					$I1866:
	*** 003dbc	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003dbf	24 04 			and	al,4
	*** 003dc1	3c 04 			cmp	al,4
	*** 003dc3	74 03 			je	$JCC15811
	*** 003dc5	e9 99 00 		jmp	$I1871
					$JCC15811:
;|***       {
; Line 1585
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1586
	*** 003dc8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003dcb	d1 e6 			shl	si,1
	*** 003dcd	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003dd1	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003dd7	74 03 			je	$JCC15831
	*** 003dd9	e9 1f 00 		jmp	$I1872
					$JCC15831:
;|***         {     
; Line 1587
;|***         //cts status change                                    
;|***         t1->port_status[i] = t1->port_status[i] | CTS_INTERRUPT;
; Line 1589
	*** 003ddc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ddf	d1 e6 			shl	si,1
	*** 003de1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003de5	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003dea	0d 10 00 		or	ax,16	;0010H
	*** 003ded	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003df0	d1 e6 			shl	si,1
	*** 003df2	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003df6	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1590
;|***         
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1592
					$I1872:
	*** 003dfb	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003dfe	d1 e6 			shl	si,1
	*** 003e00	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e04	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 003e0a	74 03 			je	$JCC15882
	*** 003e0c	e9 1f 00 		jmp	$I1873
					$JCC15882:
;|***         {
; Line 1593
;|***         //CTS changed state
;|***         t1->port_status[i] = t1->port_status[i] | CTS_INTERRUPT;
; Line 1595
	*** 003e0f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e12	d1 e6 			shl	si,1
	*** 003e14	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e18	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003e1d	0d 10 00 		or	ax,16	;0010H
	*** 003e20	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e23	d1 e6 			shl	si,1
	*** 003e25	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e29	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1596
;|***         
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1598
					$I1873:
	*** 003e2e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e31	d1 e6 			shl	si,1
	*** 003e33	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e37	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003e3d	74 03 			je	$JCC15933
	*** 003e3f	e9 1f 00 		jmp	$I1874
					$JCC15933:
;|***         {
; Line 1599
;|***         //CTS changed state
;|***         t1->port_status[i] = t1->port_status[i] | CTS_INTERRUPT;
; Line 1601
	*** 003e42	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e45	d1 e6 			shl	si,1
	*** 003e47	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e4b	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003e50	0d 10 00 		or	ax,16	;0010H
	*** 003e53	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e56	d1 e6 			shl	si,1
	*** 003e58	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e5c	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         }
; Line 1602
;|***       } // end CSC
; Line 1603
					$I1874:
;|***       
;|***     
;|***     if((isr1&0x02)==0x02)  // XMR  Transmit Message Repeat
; Line 1606
					$I1871:
	*** 003e61	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003e64	24 02 			and	al,2
	*** 003e66	3c 02 			cmp	al,2
	*** 003e68	74 03 			je	$JCC15976
	*** 003e6a	e9 66 00 		jmp	$I1875
					$JCC15976:
;|***       {
; Line 1607
;|***       if(t1->eopmode[i]==OPMODE_HDLC)
; Line 1608
	*** 003e6d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e70	d1 e6 			shl	si,1
	*** 003e72	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e76	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003e7c	74 03 			je	$JCC15996
	*** 003e7e	e9 1f 00 		jmp	$I1876
					$JCC15996:
;|***         {       
; Line 1609
;|***         //XMR interrupt
;|***         t1->port_status[i] = t1->port_status[i] | XMR_INTERRUPT;
; Line 1611
	*** 003e81	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e84	d1 e6 			shl	si,1
	*** 003e86	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e8a	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003e8f	0d 01 00 		or	ax,1
	*** 003e92	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003e95	d1 e6 			shl	si,1
	*** 003e97	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003e9b	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         //could do an auto resend here ...possibly (indicates transmit message repeat)
;|***         }
; Line 1613
;|***     
;|***       if(t1->eopmode[i]==OPMODE_BISYNC)
; Line 1615
					$I1876:
	*** 003ea0	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ea3	d1 e6 			shl	si,1
	*** 003ea5	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ea9	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003eaf	74 03 			je	$JCC16047
	*** 003eb1	e9 1f 00 		jmp	$I1877
					$JCC16047:
;|***         {       
; Line 1616
;|***         //XMR interrupt
;|***         t1->port_status[i] = t1->port_status[i] | XMR_INTERRUPT;
; Line 1618
	*** 003eb4	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003eb7	d1 e6 			shl	si,1
	*** 003eb9	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ebd	26 8b 80 96 01 		mov	ax,WORD PTR es:[bx+406][si]
	*** 003ec2	0d 01 00 		or	ax,1
	*** 003ec5	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ec8	d1 e6 			shl	si,1
	*** 003eca	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ece	26 89 80 96 01 		mov	WORD PTR es:[bx+406][si],ax
;|***         //could do an auto resend here ...possibly (indicates transmit message repeat)
;|***         }
; Line 1620
;|***       } // end XMR
; Line 1621
					$I1877:
;|***       
;|***   
;|***     if((isr1&XPR)==XPR)  //  Transmit Pool Ready
; Line 1624
					$I1875:
	*** 003ed3	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;isr1
	*** 003ed6	24 01 			and	al,1
	*** 003ed8	3c 01 			cmp	al,1
	*** 003eda	74 03 			je	$JCC16090
	*** 003edc	e9 2a 07 		jmp	$I1878
					$JCC16090:
;|***       {
; Line 1625
;|***       if((t1->eopmode[i]==OPMODE_HDLC)||(t1->eopmode[i]==OPMODE_BISYNC))
; Line 1626
	*** 003edf	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ee2	d1 e6 			shl	si,1
	*** 003ee4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ee8	26 83 b8 9e 01 00 	cmp	WORD PTR es:[bx+414][si],0
	*** 003eee	75 03 			jne	$JCC16110
	*** 003ef0	e9 14 00 		jmp	$I1880
					$JCC16110:
	*** 003ef3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003ef6	d1 e6 			shl	si,1
	*** 003ef8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003efc	26 83 b8 9e 01 02 	cmp	WORD PTR es:[bx+414][si],2
	*** 003f02	74 03 			je	$JCC16130
	*** 003f04	e9 8b 03 		jmp	$I1879
					$JCC16130:
					$I1880:
;|***         {
; Line 1627
;|***         //XPR interrupt (time to send the bytes out)            
;|***         if(t1->port_dmat_list[i]==0)  // no dma, so do interrupt xpr here  
; Line 1629
	*** 003f07	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003f0a	d1 e6 			shl	si,1
	*** 003f0c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003f10	26 83 78 0c 00 		cmp	WORD PTR es:[bx+12][si],0
	*** 003f15	74 03 			je	$JCC16149
	*** 003f17	e9 cd 01 		jmp	$I1881
					$JCC16149:
;|***           {
; Line 1630
;|***           //try_again_tx:                                
;|***           itxbuf = (t1->txbuffer[i][t1->current_txbuf[i]]);
; Line 1632
	*** 003f1a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003f1d	d1 e6 			shl	si,1
	*** 003f1f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003f23	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 003f26	c1 e7 04 		shl	di,4
	*** 003f29	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 003f2e	c1 e7 02 		shl	di,2
	*** 003f31	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003f35	26 8b 81 fa 00 		mov	ax,WORD PTR es:[bx+250][di]
	*** 003f3a	26 8b 91 fc 00 		mov	dx,WORD PTR es:[bx+252][di]
	*** 003f3f	89 46 de 		mov	WORD PTR [bp-34],ax	;itxbuf
	*** 003f42	89 56 e0 		mov	WORD PTR [bp-32],dx
;|***           bloc = (unsigned far *)itxbuf->frame;
; Line 1633
	*** 003f45	8b 46 de 		mov	ax,WORD PTR [bp-34]	;itxbuf
	*** 003f48	8b 56 e0 		mov	dx,WORD PTR [bp-32]
	*** 003f4b	05 06 00 		add	ax,6
	*** 003f4e	89 46 e8 		mov	WORD PTR [bp-24],ax	;bloc
	*** 003f51	89 56 ea 		mov	WORD PTR [bp-22],dx
;|***           
;|***           if(itxbuf->valid==1)
; Line 1635
	*** 003f54	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 003f57	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 003f5b	74 03 			je	$JCC16219
	*** 003f5d	e9 74 01 		jmp	$I1883
					$JCC16219:
;|***             {  // note: ->max is the total num bytes in frame
; Line 1636
;|***                //       ->no_bytes is num bytes already sent
;|***             if((itxbuf->max - itxbuf->no_bytes) > 32)
; Line 1638
	*** 003f60	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 003f63	26 8b 47 04 		mov	ax,WORD PTR es:[bx+4]
	*** 003f67	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 003f6a	26 2b 47 02 		sub	ax,WORD PTR es:[bx+2]
	*** 003f6e	3d 20 00 		cmp	ax,32	;0020H
	*** 003f71	77 03 			ja	$JCC16241
	*** 003f73	e9 89 00 		jmp	$I1884
					$JCC16241:
;|***               { // if more than 32 bytes still to be sent
; Line 1639
;|***                 // this is somewhere in the middle of the frame
;|***                 // load exactly 32 bytes into TFIFO (word writes since even number bytes)
;|***               for(j=(itxbuf->no_bytes)>>1;j<(itxbuf->no_bytes>>1)+16;j++)
; Line 1642
	*** 003f76	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 003f79	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 003f7d	d1 e8 			shr	ax,1
	*** 003f7f	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 003f82	e9 03 00 		jmp	$F1885
					$FC1886:
	*** 003f85	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1885:
	*** 003f88	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 003f8b	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 003f8f	d1 e8 			shr	ax,1
	*** 003f91	05 10 00 		add	ax,16	;0010H
	*** 003f94	3b 46 f4 		cmp	ax,WORD PTR [bp-12]	;j
	*** 003f97	77 03 			ja	$JCC16279
	*** 003f99	e9 26 00 		jmp	$FB1887
					$JCC16279:
;|***                 {
; Line 1643
;|***                 outpw(t1->port_list[i]+FIFO,bloc[j]);      // load the fifo 
; Line 1644
	*** 003f9c	8b 5e f4 		mov	bx,WORD PTR [bp-12]	;j
	*** 003f9f	d1 e3 			shl	bx,1
	*** 003fa1	c4 76 e8 		les	si,DWORD PTR [bp-24]	;bloc
	*** 003fa4	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 003fa7	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003faa	d1 e3 			shl	bx,1
	*** 003fac	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003fb0	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 003fb3	05 20 00 		add	ax,32	;0020H
	*** 003fb6	50 			push	ax
	*** 003fb7	9a 00 00 00 00 		call	FAR PTR _outpw
	*** 003fbc	83 c4 04 		add	sp,4
;|***                 }
; Line 1645
	*** 003fbf	e9 c3 ff 		jmp	$FC1886
					$FB1887:
;|***                 
;|***               outp(t1->port_list[i]+CMDR,t1->tx_type[i]);  // tx the bytes
; Line 1647
	*** 003fc2	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003fc5	d1 e6 			shl	si,1
	*** 003fc7	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003fcb	26 ff b0 8e 01 		push	WORD PTR es:[bx+398][si]
	*** 003fd0	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 003fd3	d1 e3 			shl	bx,1
	*** 003fd5	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003fd9	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 003fdc	9a 00 00 00 00 		call	FAR PTR _outp
	*** 003fe1	83 c4 04 		add	sp,4
;|***               itxbuf->no_bytes += 32;                      // update num bytes sent
; Line 1648
	*** 003fe4	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 003fe7	26 83 47 02 20 		add	WORD PTR es:[bx+2],32	;0020H
;|***               t1->istxing[i] = 1;                          // flag that we're still tx'ing
; Line 1649
	*** 003fec	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 003fef	d1 e6 			shl	si,1
	*** 003ff1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 003ff5	26 c7 80 92 01 01 00 	mov	WORD PTR es:[bx+402][si],1
;|***               }
; Line 1650
;|***             else
; Line 1651
	*** 003ffc	e9 d2 00 		jmp	$I1888
					$I1884:
;|***               { // there are 32 or fewer bytes remaining to tx
; Line 1652
;|***                 // this is the end of the frame
;|***                 // load remaining bytes into TFIFO (byte writes since may be odd number)
;|***               for(j=itxbuf->no_bytes;j<itxbuf->max;j++)
; Line 1655
	*** 003fff	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004002	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 004006	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 004009	e9 03 00 		jmp	$F1889
					$FC1890:
	*** 00400c	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1889:
	*** 00400f	8b 46 f4 		mov	ax,WORD PTR [bp-12]	;j
	*** 004012	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004015	26 39 47 04 		cmp	WORD PTR es:[bx+4],ax
	*** 004019	77 03 			ja	$JCC16409
	*** 00401b	e9 29 00 		jmp	$FB1891
					$JCC16409:
;|***                 {
; Line 1656
;|***                 outp(t1->port_list[i]+FIFO,itxbuf->frame[j]);  // load the fifo
; Line 1657
	*** 00401e	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004021	83 c3 06 		add	bx,6
	*** 004024	8b 76 f4 		mov	si,WORD PTR [bp-12]	;j
	*** 004027	26 8a 00 		mov	al,BYTE PTR es:[bx][si]
	*** 00402a	98 			cbw	
	*** 00402b	50 			push	ax
	*** 00402c	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00402f	d1 e3 			shl	bx,1
	*** 004031	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004035	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004038	05 20 00 		add	ax,32	;0020H
	*** 00403b	50 			push	ax
	*** 00403c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004041	83 c4 04 		add	sp,4
;|***                 }
; Line 1658
	*** 004044	e9 c5 ff 		jmp	$FC1890
					$FB1891:
;|***               
;|***                 // tell the transmitter to tx the bytes, the crc, and the closing flag
;|***               outp(t1->port_list[i]+CMDR,t1->tx_type[i]+XME);
; Line 1661
	*** 004047	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00404a	d1 e6 			shl	si,1
	*** 00404c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004050	26 8b 80 8e 01 		mov	ax,WORD PTR es:[bx+398][si]
	*** 004055	05 02 00 		add	ax,2
	*** 004058	50 			push	ax
	*** 004059	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 00405c	d1 e3 			shl	bx,1
	*** 00405e	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004062	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 004065	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00406a	83 c4 04 		add	sp,4
;|***               itxbuf->no_bytes = itxbuf->max;    // update num bytes sent
; Line 1662
	*** 00406d	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004070	26 8b 47 04 		mov	ax,WORD PTR es:[bx+4]
	*** 004074	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004077	26 89 47 02 		mov	WORD PTR es:[bx+2],ax
;|***               itxbuf->valid = 0;                 // mark the buffer as unused
; Line 1663
	*** 00407b	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 00407e	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***               t1->current_txbuf[i]++;            // select the next buffer, rollover if necessary
; Line 1664
	*** 004083	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004086	d1 e6 			shl	si,1
	*** 004088	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00408c	26 8b 80 7e 01 		mov	ax,WORD PTR es:[bx+382][si]
	*** 004091	40 			inc	ax
	*** 004092	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004095	d1 e6 			shl	si,1
	*** 004097	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00409b	26 89 80 7e 01 		mov	WORD PTR es:[bx+382][si],ax
;|***               if(t1->current_txbuf[i]==t1->max_txbuf[i]) t1->current_txbuf[i] = 0;
; Line 1665
	*** 0040a0	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0040a3	d1 e6 			shl	si,1
	*** 0040a5	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0040a9	26 8b 80 86 01 		mov	ax,WORD PTR es:[bx+390][si]
	*** 0040ae	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0040b1	d1 e6 			shl	si,1
	*** 0040b3	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0040b7	26 39 80 7e 01 		cmp	WORD PTR es:[bx+382][si],ax
	*** 0040bc	74 03 			je	$JCC16572
	*** 0040be	e9 10 00 		jmp	$I1892
					$JCC16572:
	*** 0040c1	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0040c4	d1 e6 			shl	si,1
	*** 0040c6	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0040ca	26 c7 80 7e 01 00 00 	mov	WORD PTR es:[bx+382][si],0
;|***               //goto try_again_tx;
;|***               }
; Line 1667
					$I1892:
					$I1888:
;|***             }
; Line 1668
;|***             
;|***           else
; Line 1670
	*** 0040d1	e9 10 00 		jmp	$I1893
					$I1883:
;|***             {
; Line 1671
;|***             t1->istxing[i] = 0; //no valid frames we are done txing
; Line 1672
	*** 0040d4	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0040d7	d1 e6 			shl	si,1
	*** 0040d9	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0040dd	26 c7 80 92 01 00 00 	mov	WORD PTR es:[bx+402][si],0
;|***             }
; Line 1673
					$I1893:
;|***           } // end interrupt, no DMA
; Line 1674
;|***   
;|***         else
; Line 1676
	*** 0040e4	e9 ab 01 		jmp	$I1894
					$I1881:
;|***           {
; Line 1677
;|***           
;|***           //  do DMA xpr here
;|***           if(t1->txbuffer[i][t1->current_txbuf[i]]->valid==1)
; Line 1680
	*** 0040e7	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0040ea	d1 e6 			shl	si,1
	*** 0040ec	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0040f0	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0040f3	c1 e7 04 		shl	di,4
	*** 0040f6	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 0040fb	c1 e7 02 		shl	di,2
	*** 0040fe	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004102	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 004107	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 00410b	74 03 			je	$JCC16651
	*** 00410d	e9 82 01 		jmp	$I1895
					$JCC16651:
;|***             {
; Line 1681
;|***             t1->txbuffer[i][t1->current_txbuf[i]]->valid = 0;   
; Line 1682
	*** 004110	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004113	d1 e6 			shl	si,1
	*** 004115	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004119	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 00411c	c1 e7 04 		shl	di,4
	*** 00411f	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 004124	c1 e7 02 		shl	di,2
	*** 004127	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00412b	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 004130	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***             t1->txbuffer[i][t1->current_txbuf[i]]->no_bytes =
;|***                 t1->txbuffer[i][t1->current_txbuf[i]]->max;
; Line 1684
	*** 004135	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004138	d1 e6 			shl	si,1
	*** 00413a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00413e	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 004141	c1 e7 04 		shl	di,4
	*** 004144	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 004149	c1 e7 02 		shl	di,2
	*** 00414c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004150	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 004155	26 8b 47 04 		mov	ax,WORD PTR es:[bx+4]
	*** 004159	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00415c	d1 e6 			shl	si,1
	*** 00415e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004162	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 004165	c1 e7 04 		shl	di,4
	*** 004168	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 00416d	c1 e7 02 		shl	di,2
	*** 004170	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004174	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 004179	26 89 47 02 		mov	WORD PTR es:[bx+2],ax
;|***             t1->istxing[i] = 0;
; Line 1685
	*** 00417d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004180	d1 e6 			shl	si,1
	*** 004182	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004186	26 c7 80 92 01 00 00 	mov	WORD PTR es:[bx+402][si],0
;|***             t1->current_txbuf[i]++;
; Line 1686
	*** 00418d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004190	d1 e6 			shl	si,1
	*** 004192	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004196	26 8b 80 7e 01 		mov	ax,WORD PTR es:[bx+382][si]
	*** 00419b	40 			inc	ax
	*** 00419c	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00419f	d1 e6 			shl	si,1
	*** 0041a1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0041a5	26 89 80 7e 01 		mov	WORD PTR es:[bx+382][si],ax
;|***             if(t1->current_txbuf[i]==t1->max_txbuf[i])
; Line 1687
	*** 0041aa	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0041ad	d1 e6 			shl	si,1
	*** 0041af	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0041b3	26 8b 80 86 01 		mov	ax,WORD PTR es:[bx+390][si]
	*** 0041b8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0041bb	d1 e6 			shl	si,1
	*** 0041bd	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0041c1	26 39 80 7e 01 		cmp	WORD PTR es:[bx+382][si],ax
	*** 0041c6	74 03 			je	$JCC16838
	*** 0041c8	e9 10 00 		jmp	$I1896
					$JCC16838:
;|***               {
; Line 1688
;|***               t1->current_txbuf[i]=0;
; Line 1689
	*** 0041cb	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0041ce	d1 e6 			shl	si,1
	*** 0041d0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0041d4	26 c7 80 7e 01 00 00 	mov	WORD PTR es:[bx+382][si],0
;|***               }
; Line 1690
;|***             if(t1->txbuffer[i][t1->current_txbuf[i]]->valid ==1)
; Line 1691
					$I1896:
	*** 0041db	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0041de	d1 e6 			shl	si,1
	*** 0041e0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0041e4	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0041e7	c1 e7 04 		shl	di,4
	*** 0041ea	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 0041ef	c1 e7 02 		shl	di,2
	*** 0041f2	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0041f6	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 0041fb	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 0041ff	74 03 			je	$JCC16895
	*** 004201	e9 8e 00 		jmp	$I1897
					$JCC16895:
;|***               {
; Line 1692
;|***               setupdmat(i,t1->txbuffer[i][t1->current_txbuf[i]]->frame,t1->txbuffer[i][t1->current_txbuf[i]]->max);
; Line 1693
	*** 004204	ff 76 f8 		push	WORD PTR [bp-8]	;i
	*** 004207	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00420a	d1 e6 			shl	si,1
	*** 00420c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004210	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 004213	c1 e7 04 		shl	di,4
	*** 004216	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 00421b	c1 e7 02 		shl	di,2
	*** 00421e	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004222	26 8b 81 fa 00 		mov	ax,WORD PTR es:[bx+250][di]
	*** 004227	26 8b 91 fc 00 		mov	dx,WORD PTR es:[bx+252][di]
	*** 00422c	05 06 00 		add	ax,6
	*** 00422f	52 			push	dx
	*** 004230	50 			push	ax
	*** 004231	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004234	d1 e6 			shl	si,1
	*** 004236	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00423a	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 00423d	c1 e7 04 		shl	di,4
	*** 004240	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 004245	c1 e7 02 		shl	di,2
	*** 004248	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00424c	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 004251	26 ff 77 04 		push	WORD PTR es:[bx+4]
	*** 004255	ff 76 02 		push	WORD PTR [bp+2]
	*** 004258	ff 76 00 		push	WORD PTR [bp]	;this
	*** 00425b	9a 00 00 00 00 		call	FAR PTR ?setupdmat@Cescc@@JECXIPEXI@Z	; Cescc::setupdmat
;|***               t1->istxing[i] = 1;
; Line 1694
	*** 004260	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004263	d1 e6 			shl	si,1
	*** 004265	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004269	26 c7 80 92 01 01 00 	mov	WORD PTR es:[bx+402][si],1
;|***               outp(t1->port_list[i]+CMDR,t1->tx_type[i]);
; Line 1695
	*** 004270	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004273	d1 e6 			shl	si,1
	*** 004275	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004279	26 ff b0 8e 01 		push	WORD PTR es:[bx+398][si]
	*** 00427e	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 004281	d1 e3 			shl	bx,1
	*** 004283	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004287	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00428a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00428f	83 c4 04 		add	sp,4
;|***               }
; Line 1696
;|***             }  // end if current_txbuf[] == valid         
; Line 1697
					$I1897:
;|***           //t1->tx_port(1, pcm, 96);  
;|***           } // end DMA
; Line 1699
					$I1895:
					$I1894:
;|***         }  // end of HDLC
; Line 1700
;|***     
;|***     
;|***       if(t1->eopmode[i]==OPMODE_ASYNC)
; Line 1703
					$I1879:
	*** 004292	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004295	d1 e6 			shl	si,1
	*** 004297	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00429b	26 83 b8 9e 01 01 	cmp	WORD PTR es:[bx+414][si],1
	*** 0042a1	74 03 			je	$JCC17057
	*** 0042a3	e9 63 03 		jmp	$I1898
					$JCC17057:
;|***         {
; Line 1704
;|***         //transmit data ready interrupt
;|***         if(t1->port_dmat_list[i]==0)
; Line 1706
	*** 0042a6	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0042a9	d1 e6 			shl	si,1
	*** 0042ab	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0042af	26 83 78 0c 00 		cmp	WORD PTR es:[bx+12][si],0
	*** 0042b4	74 03 			je	$JCC17076
	*** 0042b6	e9 b1 01 		jmp	$I1899
					$JCC17076:
;|***           {
; Line 1707
;|***           itxbuf = (t1->txbuffer[i][t1->current_txbuf[i]]);
; Line 1708
	*** 0042b9	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0042bc	d1 e6 			shl	si,1
	*** 0042be	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0042c2	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0042c5	c1 e7 04 		shl	di,4
	*** 0042c8	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 0042cd	c1 e7 02 		shl	di,2
	*** 0042d0	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0042d4	26 8b 81 fa 00 		mov	ax,WORD PTR es:[bx+250][di]
	*** 0042d9	26 8b 91 fc 00 		mov	dx,WORD PTR es:[bx+252][di]
	*** 0042de	89 46 de 		mov	WORD PTR [bp-34],ax	;itxbuf
	*** 0042e1	89 56 e0 		mov	WORD PTR [bp-32],dx
;|***           bloc = (unsigned far *)itxbuf->frame;
; Line 1709
	*** 0042e4	8b 46 de 		mov	ax,WORD PTR [bp-34]	;itxbuf
	*** 0042e7	8b 56 e0 		mov	dx,WORD PTR [bp-32]
	*** 0042ea	05 06 00 		add	ax,6
	*** 0042ed	89 46 e8 		mov	WORD PTR [bp-24],ax	;bloc
	*** 0042f0	89 56 ea 		mov	WORD PTR [bp-22],dx
;|***           if(itxbuf->valid==1)
; Line 1710
	*** 0042f3	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 0042f6	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 0042fa	74 03 			je	$JCC17146
	*** 0042fc	e9 58 01 		jmp	$I1901
					$JCC17146:
;|***             {
; Line 1711
;|***             if((itxbuf->max - itxbuf->no_bytes) > 32)
; Line 1712
	*** 0042ff	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004302	26 8b 47 04 		mov	ax,WORD PTR es:[bx+4]
	*** 004306	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004309	26 2b 47 02 		sub	ax,WORD PTR es:[bx+2]
	*** 00430d	3d 20 00 		cmp	ax,32	;0020H
	*** 004310	77 03 			ja	$JCC17168
	*** 004312	e9 7d 00 		jmp	$I1902
					$JCC17168:
;|***               {
; Line 1713
;|***               //do send 32
;|***               for(j=(itxbuf->no_bytes)>>1;j<(itxbuf->no_bytes>>1)+16;j++)
; Line 1715
	*** 004315	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004318	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 00431c	d1 e8 			shr	ax,1
	*** 00431e	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 004321	e9 03 00 		jmp	$F1903
					$FC1904:
	*** 004324	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1903:
	*** 004327	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 00432a	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 00432e	d1 e8 			shr	ax,1
	*** 004330	05 10 00 		add	ax,16	;0010H
	*** 004333	3b 46 f4 		cmp	ax,WORD PTR [bp-12]	;j
	*** 004336	77 03 			ja	$JCC17206
	*** 004338	e9 26 00 		jmp	$FB1905
					$JCC17206:
;|***               outpw(t1->port_list[i]+FIFO,bloc[j]); 
; Line 1716
	*** 00433b	8b 5e f4 		mov	bx,WORD PTR [bp-12]	;j
	*** 00433e	d1 e3 			shl	bx,1
	*** 004340	c4 76 e8 		les	si,DWORD PTR [bp-24]	;bloc
	*** 004343	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 004346	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 004349	d1 e3 			shl	bx,1
	*** 00434b	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00434f	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004352	05 20 00 		add	ax,32	;0020H
	*** 004355	50 			push	ax
	*** 004356	9a 00 00 00 00 		call	FAR PTR _outpw
	*** 00435b	83 c4 04 		add	sp,4
	*** 00435e	e9 c3 ff 		jmp	$FC1904
					$FB1905:
;|***               outp(t1->port_list[i]+CMDR,0x08);
; Line 1717
	*** 004361	6a 08 			push	8
	*** 004363	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 004366	d1 e3 			shl	bx,1
	*** 004368	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00436c	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 00436f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004374	83 c4 04 		add	sp,4
;|***               itxbuf->no_bytes += 32;
; Line 1718
	*** 004377	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 00437a	26 83 47 02 20 		add	WORD PTR es:[bx+2],32	;0020H
;|***               t1->istxing[i] = 1;
; Line 1719
	*** 00437f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004382	d1 e6 			shl	si,1
	*** 004384	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004388	26 c7 80 92 01 01 00 	mov	WORD PTR es:[bx+402][si],1
;|***               }
; Line 1720
;|***             else
; Line 1721
	*** 00438f	e9 c2 00 		jmp	$I1906
					$I1902:
;|***               {
; Line 1722
;|***               //do send <=32 //sending as byte accesses such that odd bytes can go out
;|***               for(j=itxbuf->no_bytes;j<itxbuf->max;j++)
; Line 1724
	*** 004392	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004395	26 8b 47 02 		mov	ax,WORD PTR es:[bx+2]
	*** 004399	89 46 f4 		mov	WORD PTR [bp-12],ax	;j
	*** 00439c	e9 03 00 		jmp	$F1907
					$FC1908:
	*** 00439f	ff 46 f4 		inc	WORD PTR [bp-12]	;j
					$F1907:
	*** 0043a2	8b 46 f4 		mov	ax,WORD PTR [bp-12]	;j
	*** 0043a5	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 0043a8	26 39 47 04 		cmp	WORD PTR es:[bx+4],ax
	*** 0043ac	77 03 			ja	$JCC17324
	*** 0043ae	e9 29 00 		jmp	$FB1909
					$JCC17324:
;|***               outp(t1->port_list[i]+FIFO,itxbuf->frame[j]);
; Line 1725
	*** 0043b1	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 0043b4	83 c3 06 		add	bx,6
	*** 0043b7	8b 76 f4 		mov	si,WORD PTR [bp-12]	;j
	*** 0043ba	26 8a 00 		mov	al,BYTE PTR es:[bx][si]
	*** 0043bd	98 			cbw	
	*** 0043be	50 			push	ax
	*** 0043bf	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0043c2	d1 e3 			shl	bx,1
	*** 0043c4	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0043c8	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 0043cb	05 20 00 		add	ax,32	;0020H
	*** 0043ce	50 			push	ax
	*** 0043cf	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0043d4	83 c4 04 		add	sp,4
	*** 0043d7	e9 c5 ff 		jmp	$FC1908
					$FB1909:
;|***               outp(t1->port_list[i]+CMDR,0x08);
; Line 1726
	*** 0043da	6a 08 			push	8
	*** 0043dc	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0043df	d1 e3 			shl	bx,1
	*** 0043e1	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0043e5	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 0043e8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0043ed	83 c4 04 		add	sp,4
;|***               itxbuf->no_bytes = itxbuf->max;
; Line 1727
	*** 0043f0	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 0043f3	26 8b 47 04 		mov	ax,WORD PTR es:[bx+4]
	*** 0043f7	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 0043fa	26 89 47 02 		mov	WORD PTR es:[bx+2],ax
;|***               itxbuf->valid = 0;
; Line 1728
	*** 0043fe	c4 5e de 		les	bx,DWORD PTR [bp-34]	;itxbuf
	*** 004401	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***               t1->current_txbuf[i]++;
; Line 1729
	*** 004406	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004409	d1 e6 			shl	si,1
	*** 00440b	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00440f	26 8b 80 7e 01 		mov	ax,WORD PTR es:[bx+382][si]
	*** 004414	40 			inc	ax
	*** 004415	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004418	d1 e6 			shl	si,1
	*** 00441a	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00441e	26 89 80 7e 01 		mov	WORD PTR es:[bx+382][si],ax
;|***               if(t1->current_txbuf[i]==t1->max_txbuf[i])
; Line 1730
	*** 004423	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004426	d1 e6 			shl	si,1
	*** 004428	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00442c	26 8b 80 86 01 		mov	ax,WORD PTR es:[bx+390][si]
	*** 004431	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004434	d1 e6 			shl	si,1
	*** 004436	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00443a	26 39 80 7e 01 		cmp	WORD PTR es:[bx+382][si],ax
	*** 00443f	74 03 			je	$JCC17471
	*** 004441	e9 10 00 		jmp	$I1910
					$JCC17471:
;|***                 t1->current_txbuf[i] = 0;
; Line 1731
	*** 004444	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004447	d1 e6 			shl	si,1
	*** 004449	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00444d	26 c7 80 7e 01 00 00 	mov	WORD PTR es:[bx+382][si],0
;|***               //goto try_again_tx;
;|***               }
; Line 1733
					$I1910:
					$I1906:
;|***             }
; Line 1734
;|***           else
; Line 1735
	*** 004454	e9 10 00 		jmp	$I1911
					$I1901:
;|***             {
; Line 1736
;|***             t1->istxing[i] = 0; //no valid frames we are done txing
; Line 1737
	*** 004457	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00445a	d1 e6 			shl	si,1
	*** 00445c	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004460	26 c7 80 92 01 00 00 	mov	WORD PTR es:[bx+402][si],0
;|***             }
; Line 1738
					$I1911:
;|***           }
; Line 1739
;|***         else
; Line 1740
	*** 004467	e9 9f 01 		jmp	$I1912
					$I1899:
;|***           {
; Line 1741
;|***           //do DMA xpr here
;|***           if(t1->txbuffer[i][t1->current_txbuf[i]]->valid==1)
; Line 1743
	*** 00446a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00446d	d1 e6 			shl	si,1
	*** 00446f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004473	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 004476	c1 e7 04 		shl	di,4
	*** 004479	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 00447e	c1 e7 02 		shl	di,2
	*** 004481	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004485	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 00448a	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 00448e	74 03 			je	$JCC17550
	*** 004490	e9 76 01 		jmp	$I1913
					$JCC17550:
;|***             {
; Line 1744
;|***             t1->txbuffer[i][t1->current_txbuf[i]]->valid = 0;   
; Line 1745
	*** 004493	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004496	d1 e6 			shl	si,1
	*** 004498	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00449c	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 00449f	c1 e7 04 		shl	di,4
	*** 0044a2	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 0044a7	c1 e7 02 		shl	di,2
	*** 0044aa	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0044ae	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 0044b3	26 c7 07 00 00 		mov	WORD PTR es:[bx],0
;|***             t1->txbuffer[i][t1->current_txbuf[i]]->no_bytes = t1->txbuffer[i][t1->current_txbuf[i]]->max;
; Line 1746
	*** 0044b8	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0044bb	d1 e6 			shl	si,1
	*** 0044bd	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0044c1	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0044c4	c1 e7 04 		shl	di,4
	*** 0044c7	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 0044cc	c1 e7 02 		shl	di,2
	*** 0044cf	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0044d3	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 0044d8	26 8b 47 04 		mov	ax,WORD PTR es:[bx+4]
	*** 0044dc	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0044df	d1 e6 			shl	si,1
	*** 0044e1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0044e5	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0044e8	c1 e7 04 		shl	di,4
	*** 0044eb	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 0044f0	c1 e7 02 		shl	di,2
	*** 0044f3	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0044f7	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 0044fc	26 89 47 02 		mov	WORD PTR es:[bx+2],ax
;|***             t1->istxing[i] = 0;
; Line 1747
	*** 004500	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004503	d1 e6 			shl	si,1
	*** 004505	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004509	26 c7 80 92 01 00 00 	mov	WORD PTR es:[bx+402][si],0
;|***             t1->current_txbuf[i]++;
; Line 1748
	*** 004510	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004513	d1 e6 			shl	si,1
	*** 004515	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004519	26 8b 80 7e 01 		mov	ax,WORD PTR es:[bx+382][si]
	*** 00451e	40 			inc	ax
	*** 00451f	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004522	d1 e6 			shl	si,1
	*** 004524	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004528	26 89 80 7e 01 		mov	WORD PTR es:[bx+382][si],ax
;|***             if(t1->current_txbuf[i]==t1->max_txbuf[i]) t1->current_txbuf[i]=0;
; Line 1749
	*** 00452d	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004530	d1 e6 			shl	si,1
	*** 004532	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004536	26 8b 80 86 01 		mov	ax,WORD PTR es:[bx+390][si]
	*** 00453b	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00453e	d1 e6 			shl	si,1
	*** 004540	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004544	26 39 80 7e 01 		cmp	WORD PTR es:[bx+382][si],ax
	*** 004549	74 03 			je	$JCC17737
	*** 00454b	e9 10 00 		jmp	$I1914
					$JCC17737:
	*** 00454e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004551	d1 e6 			shl	si,1
	*** 004553	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004557	26 c7 80 7e 01 00 00 	mov	WORD PTR es:[bx+382][si],0
;|***             if(t1->txbuffer[i][t1->current_txbuf[i]]->valid ==1)
; Line 1750
					$I1914:
	*** 00455e	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 004561	d1 e6 			shl	si,1
	*** 004563	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004567	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 00456a	c1 e7 04 		shl	di,4
	*** 00456d	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 004572	c1 e7 02 		shl	di,2
	*** 004575	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004579	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 00457e	26 83 3f 01 		cmp	WORD PTR es:[bx],1
	*** 004582	74 03 			je	$JCC17794
	*** 004584	e9 82 00 		jmp	$I1915
					$JCC17794:
;|***               {
; Line 1751
;|***               setupdmat(i,t1->txbuffer[i][t1->current_txbuf[i]]->frame,t1->txbuffer[i][t1->current_txbuf[i]]->max);
; Line 1752
	*** 004587	ff 76 f8 		push	WORD PTR [bp-8]	;i
	*** 00458a	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 00458d	d1 e6 			shl	si,1
	*** 00458f	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004593	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 004596	c1 e7 04 		shl	di,4
	*** 004599	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 00459e	c1 e7 02 		shl	di,2
	*** 0045a1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0045a5	26 8b 81 fa 00 		mov	ax,WORD PTR es:[bx+250][di]
	*** 0045aa	26 8b 91 fc 00 		mov	dx,WORD PTR es:[bx+252][di]
	*** 0045af	05 06 00 		add	ax,6
	*** 0045b2	52 			push	dx
	*** 0045b3	50 			push	ax
	*** 0045b4	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0045b7	d1 e6 			shl	si,1
	*** 0045b9	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0045bd	8b 7e f8 		mov	di,WORD PTR [bp-8]	;i
	*** 0045c0	c1 e7 04 		shl	di,4
	*** 0045c3	26 03 b8 7e 01 		add	di,WORD PTR es:[bx+382][si]
	*** 0045c8	c1 e7 02 		shl	di,2
	*** 0045cb	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0045cf	26 c4 99 fa 00 		les	bx,DWORD PTR es:[bx+250][di]
	*** 0045d4	26 ff 77 04 		push	WORD PTR es:[bx+4]
	*** 0045d8	ff 76 02 		push	WORD PTR [bp+2]
	*** 0045db	ff 76 00 		push	WORD PTR [bp]	;this
	*** 0045de	9a 00 00 00 00 		call	FAR PTR ?setupdmat@Cescc@@JECXIPEXI@Z	; Cescc::setupdmat
;|***               t1->istxing[i] = 1;
; Line 1753
	*** 0045e3	8b 76 f8 		mov	si,WORD PTR [bp-8]	;i
	*** 0045e6	d1 e6 			shl	si,1
	*** 0045e8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0045ec	26 c7 80 92 01 01 00 	mov	WORD PTR es:[bx+402][si],1
;|***               outp(t1->port_list[i]+CMDR,0x08);
; Line 1754
	*** 0045f3	6a 08 			push	8
	*** 0045f5	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 0045f8	d1 e3 			shl	bx,1
	*** 0045fa	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0045fe	26 ff 30 		push	WORD PTR es:[bx][si]
	*** 004601	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004606	83 c4 04 		add	sp,4
;|***               }  // end if()
; Line 1755
;|***             }  // end if()
; Line 1756
					$I1915:
;|***           }  // end else do DMA
; Line 1757
					$I1913:
					$I1912:
;|***         } // end do ASYNC
; Line 1758
;|***       }  // end XPR
; Line 1759
					$I1898:
;|***         
;|***     
;|***     if((pis&0x80)==0x80)
; Line 1762
					$I1878:
	*** 004609	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;pis
	*** 00460c	24 80 			and	al,128	;0080H
	*** 00460e	3c 80 			cmp	al,128	;0080H
	*** 004610	74 03 			je	$JCC17936
	*** 004612	e9 00 00 		jmp	$I1916
					$JCC17936:
;|***       {
; Line 1763
;|***       //DMA TC reached
;|***       }               
; Line 1765
;|***       
;|***     
;|***     if((pis&0x40)==0x40)
; Line 1768
					$I1916:
	*** 004615	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;pis
	*** 004618	24 40 			and	al,64	;0040H
	*** 00461a	3c 40 			cmp	al,64	;0040H
	*** 00461c	74 03 			je	$JCC17948
	*** 00461e	e9 14 00 		jmp	$I1917
					$JCC17948:
;|***       {
; Line 1769
;|***       if((_inp(0x240+PVR) & 0x40) == 0x40);
; Line 1770
	*** 004621	68 5c 02 		push	604	;025cH
	*** 004624	9a 00 00 00 00 		call	FAR PTR __inp
	*** 004629	83 c4 02 		add	sp,2
	*** 00462c	24 40 			and	al,64	;0040H
	*** 00462e	3c 40 			cmp	al,64	;0040H
	*** 004630	74 03 			je	$JCC17968
	*** 004632	e9 00 00 		jmp	$I1918
					$JCC17968:
;|***         //com_request = 1;     //DSR channel 1 changed
;|***       }
; Line 1772
					$I1918:
;|***     
;|***     
;|***     if((pis&0x20)==0x20)
; Line 1775
					$I1917:
	*** 004635	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;pis
	*** 004638	24 20 			and	al,32	;0020H
	*** 00463a	3c 20 			cmp	al,32	;0020H
	*** 00463c	74 03 			je	$JCC17980
	*** 00463e	e9 00 00 		jmp	$I1919
					$JCC17980:
;|***       {
; Line 1776
;|***       //DSR channel 0 changed
;|***       }
; Line 1778
;|***         
;|***     nextpt:
; Line 1780
					$I1919:
					$nextpt1760:
;|***     
;|***   
;|***     // restore escc ports to channel
;|***     //  that was active when ISR started
;|***     outp(t1->port_list[i]+PVR,(inp(t1->port_list[i]+PVR)&0xfe)+chanstor); //set channel
; Line 1785
	*** 004641	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 004644	d1 e3 			shl	bx,1
	*** 004646	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 00464a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00464d	05 1c 00 		add	ax,28	;001cH
	*** 004650	50 			push	ax
	*** 004651	9a 00 00 00 00 		call	FAR PTR _inp
	*** 004656	83 c4 02 		add	sp,2
	*** 004659	25 fe 00 		and	ax,254	;00feH
	*** 00465c	03 46 f6 		add	ax,WORD PTR [bp-10]	;chanstor
	*** 00465f	50 			push	ax
	*** 004660	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;i
	*** 004663	d1 e3 			shl	bx,1
	*** 004665	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004669	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00466c	05 1c 00 		add	ax,28	;001cH
	*** 00466f	50 			push	ax
	*** 004670	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004675	83 c4 04 		add	sp,4
;|***     
;|***     }  // end for all open ports
; Line 1787
	*** 004678	e9 87 e0 		jmp	$FC1756
					$FB1757:
;|***   
;|***   if(inthit==1) goto startisr;
; Line 1789
	*** 00467b	83 7e f0 01 		cmp	WORD PTR [bp-16],1	;inthit
	*** 00467f	74 03 			je	$JCC18047
	*** 004681	e9 03 00 		jmp	$I1920
					$JCC18047:
	*** 004684	e9 6e e0 		jmp	$startisr1754
;|***   
;|***   //_disable();  // rem out 12/08/03
;|***   
;|*** /*
;|***   if(ok_to_tx)
;|***     {
;|***     ok_to_tx = 0;
;|***     t1->tx_port(1, pcm,96);
;|***     }
;|*** */  
;|***   // no more interrupts set
;|***   // do eoi's and leave
;|***   outp(0x20,0x20);
; Line 1802
					$I1920:
	*** 004687	6a 20 			push	32	;0020H
	*** 004689	6a 20 			push	32	;0020H
	*** 00468b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004690	83 c4 04 		add	sp,4
;|***   if(t1->upper_irq!=0) outp(0xa0,0x20);
; Line 1803
	*** 004693	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004697	26 83 7f 78 00 		cmp	WORD PTR es:[bx+120],0
	*** 00469c	75 03 			jne	$JCC18076
	*** 00469e	e9 0d 00 		jmp	$I1921
					$JCC18076:
	*** 0046a1	6a 20 			push	32	;0020H
	*** 0046a3	68 a0 00 		push	160	;00a0H
	*** 0046a6	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0046ab	83 c4 04 		add	sp,4
;|***   } //  end isr
; Line 1804
					$I1921:
	*** 0046ae	e9 06 00 		jmp	$EX1734
					$TH161763:
	*** 0046b1	e9 8d ff 		jmp	$nextpt1760
					$TH161761:
	*** 0046b4	e9 8a ff 		jmp	$nextpt1760
					$EX1734:
	*** 0046b7	8b e5 			mov	sp,bp
	*** 0046b9	07 			pop	es
	*** 0046ba	1f 			pop	ds
	ASSUME DS: DGROUP
	*** 0046bb	61 			popa
	*** 0046bc	cf 			iret	

?escc_isr@Cescc@@JEAXXZ	ENDP
	PUBLIC	?setupdmat@Cescc@@JECXIPEXI@Z	; Cescc::setupdmat
?setupdmat@Cescc@@JECXIPEXI@Z	PROC FAR	; Cescc::setupdmat
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** void Cescc::setupdmat(unsigned port, void far *address,unsigned numbytes)
;|***   {
; Line 1812
	*** 0046bd	c8 0a 00 00 		enter	10,0
	*** 0046c1	57 			push	di
	*** 0046c2	56 			push	si
;	i = -2
;	size = -4
;	linaddress = -8
;	chanstor = -10
;	this = 6
;	port = 16
;	address = 12
;	numbytes = 10
;|***   unsigned i,size;
;|***   unsigned long linaddress;
;|***   unsigned chanstor;
;|***   
;|***   if (numbytes == 0) size = FRAME_SIZE;
; Line 1817
	*** 0046c3	83 7e 0a 00 		cmp	WORD PTR [bp+10],0	;numbytes
	*** 0046c7	74 03 			je	$JCC18119
	*** 0046c9	e9 08 00 		jmp	$I1931
					$JCC18119:
	*** 0046cc	c7 46 fc 00 04 		mov	WORD PTR [bp-4],1024	;0400H	;size
;|***   else size = numbytes;
; Line 1818
	*** 0046d1	e9 06 00 		jmp	$I1932
					$I1931:
	*** 0046d4	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;numbytes
	*** 0046d7	89 46 fc 		mov	WORD PTR [bp-4],ax	;size
					$I1932:
;|***   
;|***   if(t1->port_dmat_list[port]>3)
; Line 1820
	*** 0046da	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0046de	83 c3 0c 		add	bx,12	;000cH
	*** 0046e1	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0046e4	d1 e6 			shl	si,1
	*** 0046e6	26 83 38 03 		cmp	WORD PTR es:[bx][si],3
	*** 0046ea	77 03 			ja	$JCC18154
	*** 0046ec	e9 10 00 		jmp	$I1933
					$JCC18154:
;|***     {
; Line 1821
;|***     size = (size/2) +(numbytes&1);//word transfers...half the size..add 1 for odd bytelenghts
; Line 1822
	*** 0046ef	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;size
	*** 0046f2	d1 e8 			shr	ax,1
	*** 0046f4	8a 4e 0a 		mov	cl,BYTE PTR [bp+10]	;numbytes
	*** 0046f7	83 e1 01 		and	cx,1
	*** 0046fa	03 c1 			add	ax,cx
	*** 0046fc	89 46 fc 		mov	WORD PTR [bp-4],ax	;size
;|***     }
; Line 1823
;|*** 
;|***   if(t1->port_dmat_list[port]==1)
; Line 1825
					$I1933:
	*** 0046ff	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004703	83 c3 0c 		add	bx,12	;000cH
	*** 004706	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 004709	d1 e6 			shl	si,1
	*** 00470b	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 00470f	74 03 			je	$JCC18191
	*** 004711	e9 d4 00 		jmp	$I1934
					$JCC18191:
;|***     {
; Line 1826
;|***     outp(DMA_COMMAND_LO,4);             //disables 8 bit dma
; Line 1827
	*** 004714	6a 04 			push	4
	*** 004716	6a 08 			push	8
	*** 004718	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00471d	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_LO,0x19);             //sets demand xfer on ch1
; Line 1828
	*** 004720	6a 19 			push	25	;0019H
	*** 004722	6a 0b 			push	11	;000bH
	*** 004724	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004729	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);             //reset count hi/lo
; Line 1829
	*** 00472c	6a 00 			push	0
	*** 00472e	6a 0c 			push	12	;000cH
	*** 004730	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004735	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH1,(size-1)&0xff);    //program byte count 
; Line 1830
	*** 004738	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;size
	*** 00473b	fe c8 			dec	al
	*** 00473d	2a e4 			sub	ah,ah
	*** 00473f	50 			push	ax
	*** 004740	6a 03 			push	3
	*** 004742	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004747	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH1,(size-1)>>8);      //controller will do 
; Line 1831
	*** 00474a	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;size
	*** 00474d	48 			dec	ax
	*** 00474e	8a c4 			mov	al,ah
	*** 004750	2a e4 			sub	ah,ah
	*** 004752	50 			push	ax
	*** 004753	6a 03 			push	3
	*** 004755	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00475a	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1832
	*** 00475d	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;address
	*** 004760	8b 56 0e 		mov	dx,WORD PTR [bp+14]
	*** 004763	25 ff 0f 		and	ax,4095	;0fffH
	*** 004766	83 e2 ff 		and	dx,-1	;ffffH
	*** 004769	d1 e0 			shl	ax,1
	*** 00476b	d1 d2 			rcl	dx,1
	*** 00476d	d1 d0 			rcl	ax,1
	*** 00476f	d1 d2 			rcl	dx,1
	*** 004771	d1 d0 			rcl	ax,1
	*** 004773	d1 d2 			rcl	dx,1
	*** 004775	d1 d0 			rcl	ax,1
	*** 004777	d1 d2 			rcl	dx,1
	*** 004779	d1 d0 			rcl	ax,1
	*** 00477b	92 			xchg	ax,dx
	*** 00477c	83 e2 0f 		and	dx,15	;000fH
	*** 00477f	03 46 0c 		add	ax,WORD PTR [bp+12]	;address
	*** 004782	83 d2 00 		adc	dx,0
	*** 004785	89 46 f8 		mov	WORD PTR [bp-8],ax	;linaddress
	*** 004788	89 56 fa 		mov	WORD PTR [bp-6],dx
;|***     outp(DMA_PAGE_CH1,(char)(linaddress>>16));             //calculate linear address of buffer
; Line 1833
	*** 00478b	8a 46 fa 		mov	al,BYTE PTR [bp-6]
	*** 00478e	98 			cbw	
	*** 00478f	50 			push	ax
	*** 004790	68 83 00 		push	131	;0083H
	*** 004793	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004798	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);                     //and store in DMA controller
; Line 1834
	*** 00479b	6a 00 			push	0
	*** 00479d	6a 0c 			push	12	;000cH
	*** 00479f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0047a4	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH1,(char)(linaddress&0xff));
; Line 1835
	*** 0047a7	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;linaddress
	*** 0047aa	98 			cbw	
	*** 0047ab	50 			push	ax
	*** 0047ac	6a 02 			push	2
	*** 0047ae	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0047b3	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH1,(char)(linaddress>>8));
; Line 1836
	*** 0047b6	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;linaddress
	*** 0047b9	8b 56 fa 		mov	dx,WORD PTR [bp-6]
	*** 0047bc	8a c4 			mov	al,ah
	*** 0047be	8a e2 			mov	ah,dl
	*** 0047c0	8a d6 			mov	dl,dh
	*** 0047c2	2a f6 			sub	dh,dh
	*** 0047c4	98 			cbw	
	*** 0047c5	50 			push	ax
	*** 0047c6	6a 02 			push	2
	*** 0047c8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0047cd	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_LO,1);                        //enable ch1 mask
; Line 1837
	*** 0047d0	6a 01 			push	1
	*** 0047d2	6a 0a 			push	10	;000aH
	*** 0047d4	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0047d9	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_LO,0);                     //enable 8bit dma
; Line 1838
	*** 0047dc	6a 00 			push	0
	*** 0047de	6a 08 			push	8
	*** 0047e0	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0047e5	83 c4 04 		add	sp,4
;|***     }
; Line 1839
;|***   
;|***   if(t1->port_dmat_list[port]==3)
; Line 1841
					$I1934:
	*** 0047e8	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0047ec	83 c3 0c 		add	bx,12	;000cH
	*** 0047ef	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0047f2	d1 e6 			shl	si,1
	*** 0047f4	26 83 38 03 		cmp	WORD PTR es:[bx][si],3
	*** 0047f8	74 03 			je	$JCC18424
	*** 0047fa	e9 d4 00 		jmp	$I1940
					$JCC18424:
;|***     {
; Line 1842
;|***     outp(DMA_COMMAND_LO,4);
; Line 1843
	*** 0047fd	6a 04 			push	4
	*** 0047ff	6a 08 			push	8
	*** 004801	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004806	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_LO,0x1B);
; Line 1844
	*** 004809	6a 1b 			push	27	;001bH
	*** 00480b	6a 0b 			push	11	;000bH
	*** 00480d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004812	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);
; Line 1845
	*** 004815	6a 00 			push	0
	*** 004817	6a 0c 			push	12	;000cH
	*** 004819	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00481e	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH3,(size-1)&0xff);
; Line 1846
	*** 004821	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;size
	*** 004824	fe c8 			dec	al
	*** 004826	2a e4 			sub	ah,ah
	*** 004828	50 			push	ax
	*** 004829	6a 07 			push	7
	*** 00482b	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004830	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH3,(size-1)>>8);
; Line 1847
	*** 004833	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;size
	*** 004836	48 			dec	ax
	*** 004837	8a c4 			mov	al,ah
	*** 004839	2a e4 			sub	ah,ah
	*** 00483b	50 			push	ax
	*** 00483c	6a 07 			push	7
	*** 00483e	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004843	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1848
	*** 004846	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;address
	*** 004849	8b 56 0e 		mov	dx,WORD PTR [bp+14]
	*** 00484c	25 ff 0f 		and	ax,4095	;0fffH
	*** 00484f	83 e2 ff 		and	dx,-1	;ffffH
	*** 004852	d1 e0 			shl	ax,1
	*** 004854	d1 d2 			rcl	dx,1
	*** 004856	d1 d0 			rcl	ax,1
	*** 004858	d1 d2 			rcl	dx,1
	*** 00485a	d1 d0 			rcl	ax,1
	*** 00485c	d1 d2 			rcl	dx,1
	*** 00485e	d1 d0 			rcl	ax,1
	*** 004860	d1 d2 			rcl	dx,1
	*** 004862	d1 d0 			rcl	ax,1
	*** 004864	92 			xchg	ax,dx
	*** 004865	83 e2 0f 		and	dx,15	;000fH
	*** 004868	03 46 0c 		add	ax,WORD PTR [bp+12]	;address
	*** 00486b	83 d2 00 		adc	dx,0
	*** 00486e	89 46 f8 		mov	WORD PTR [bp-8],ax	;linaddress
	*** 004871	89 56 fa 		mov	WORD PTR [bp-6],dx
;|***     outp(DMA_PAGE_CH3,(char)(linaddress>>16));
; Line 1849
	*** 004874	8a 46 fa 		mov	al,BYTE PTR [bp-6]
	*** 004877	98 			cbw	
	*** 004878	50 			push	ax
	*** 004879	68 82 00 		push	130	;0082H
	*** 00487c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004881	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);
; Line 1850
	*** 004884	6a 00 			push	0
	*** 004886	6a 0c 			push	12	;000cH
	*** 004888	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00488d	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH3,(char)(linaddress&0xff));
; Line 1851
	*** 004890	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;linaddress
	*** 004893	98 			cbw	
	*** 004894	50 			push	ax
	*** 004895	6a 06 			push	6
	*** 004897	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00489c	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH3,(char)(linaddress>>8));
; Line 1852
	*** 00489f	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;linaddress
	*** 0048a2	8b 56 fa 		mov	dx,WORD PTR [bp-6]
	*** 0048a5	8a c4 			mov	al,ah
	*** 0048a7	8a e2 			mov	ah,dl
	*** 0048a9	8a d6 			mov	dl,dh
	*** 0048ab	2a f6 			sub	dh,dh
	*** 0048ad	98 			cbw	
	*** 0048ae	50 			push	ax
	*** 0048af	6a 06 			push	6
	*** 0048b1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0048b6	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_LO,3);
; Line 1853
	*** 0048b9	6a 03 			push	3
	*** 0048bb	6a 0a 			push	10	;000aH
	*** 0048bd	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0048c2	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_LO,0);
; Line 1854
	*** 0048c5	6a 00 			push	0
	*** 0048c7	6a 08 			push	8
	*** 0048c9	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0048ce	83 c4 04 		add	sp,4
;|***     }
; Line 1855
;|***   
;|***   if(t1->port_dmat_list[port]==5)
; Line 1857
					$I1940:
	*** 0048d1	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0048d5	83 c3 0c 		add	bx,12	;000cH
	*** 0048d8	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0048db	d1 e6 			shl	si,1
	*** 0048dd	26 83 38 05 		cmp	WORD PTR es:[bx][si],5
	*** 0048e1	74 03 			je	$JCC18657
	*** 0048e3	e9 e4 00 		jmp	$I1946
					$JCC18657:
;|***     {
; Line 1858
;|***     outp(DMA_COMMAND_HI,4);     //disable dma
; Line 1859
	*** 0048e6	6a 04 			push	4
	*** 0048e8	68 d0 00 		push	208	;00d0H
	*** 0048eb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0048f0	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_HI,0x19);     //demand xfr on ch5
; Line 1860
	*** 0048f3	6a 19 			push	25	;0019H
	*** 0048f5	68 d6 00 		push	214	;00d6H
	*** 0048f8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0048fd	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFHI,0);     //reset flip-flop
; Line 1861
	*** 004900	6a 00 			push	0
	*** 004902	68 d8 00 		push	216	;00d8H
	*** 004905	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00490a	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH5,(size-1)&0xff);
; Line 1862
	*** 00490d	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;size
	*** 004910	fe c8 			dec	al
	*** 004912	2a e4 			sub	ah,ah
	*** 004914	50 			push	ax
	*** 004915	68 c6 00 		push	198	;00c6H
	*** 004918	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00491d	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH5,(size-1)>>8);
; Line 1863
	*** 004920	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;size
	*** 004923	48 			dec	ax
	*** 004924	8a c4 			mov	al,ah
	*** 004926	2a e4 			sub	ah,ah
	*** 004928	50 			push	ax
	*** 004929	68 c6 00 		push	198	;00c6H
	*** 00492c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004931	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1864
	*** 004934	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;address
	*** 004937	8b 56 0e 		mov	dx,WORD PTR [bp+14]
	*** 00493a	25 ff 0f 		and	ax,4095	;0fffH
	*** 00493d	83 e2 ff 		and	dx,-1	;ffffH
	*** 004940	d1 e0 			shl	ax,1
	*** 004942	d1 d2 			rcl	dx,1
	*** 004944	d1 d0 			rcl	ax,1
	*** 004946	d1 d2 			rcl	dx,1
	*** 004948	d1 d0 			rcl	ax,1
	*** 00494a	d1 d2 			rcl	dx,1
	*** 00494c	d1 d0 			rcl	ax,1
	*** 00494e	d1 d2 			rcl	dx,1
	*** 004950	d1 d0 			rcl	ax,1
	*** 004952	92 			xchg	ax,dx
	*** 004953	83 e2 0f 		and	dx,15	;000fH
	*** 004956	03 46 0c 		add	ax,WORD PTR [bp+12]	;address
	*** 004959	83 d2 00 		adc	dx,0
	*** 00495c	89 46 f8 		mov	WORD PTR [bp-8],ax	;linaddress
	*** 00495f	89 56 fa 		mov	WORD PTR [bp-6],dx
;|***     outp(DMA_PAGE_CH5,(char)(linaddress>>16));
; Line 1865
	*** 004962	8a 46 fa 		mov	al,BYTE PTR [bp-6]
	*** 004965	98 			cbw	
	*** 004966	50 			push	ax
	*** 004967	68 8b 00 		push	139	;008bH
	*** 00496a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00496f	83 c4 04 		add	sp,4
;|***     linaddress = linaddress>>1; //adjust for 16bit dma
; Line 1866
	*** 004972	d1 6e fa 		shr	WORD PTR [bp-6],1
	*** 004975	d1 5e f8 		rcr	WORD PTR [bp-8],1	;linaddress
;|***     outp(DMA_CLEAR_FFHI,0);
; Line 1867
	*** 004978	6a 00 			push	0
	*** 00497a	68 d8 00 		push	216	;00d8H
	*** 00497d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004982	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH5,(char)(linaddress&0xff));
; Line 1868
	*** 004985	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;linaddress
	*** 004988	98 			cbw	
	*** 004989	50 			push	ax
	*** 00498a	68 c4 00 		push	196	;00c4H
	*** 00498d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004992	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH5,(char)(linaddress>>8));
; Line 1869
	*** 004995	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;linaddress
	*** 004998	8b 56 fa 		mov	dx,WORD PTR [bp-6]
	*** 00499b	8a c4 			mov	al,ah
	*** 00499d	8a e2 			mov	ah,dl
	*** 00499f	8a d6 			mov	dl,dh
	*** 0049a1	2a f6 			sub	dh,dh
	*** 0049a3	98 			cbw	
	*** 0049a4	50 			push	ax
	*** 0049a5	68 c4 00 		push	196	;00c4H
	*** 0049a8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0049ad	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_HI,1);        //enable chan5
; Line 1870
	*** 0049b0	6a 01 			push	1
	*** 0049b2	68 d4 00 		push	212	;00d4H
	*** 0049b5	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0049ba	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_HI,0);     //enable dma
; Line 1871
	*** 0049bd	6a 00 			push	0
	*** 0049bf	68 d0 00 		push	208	;00d0H
	*** 0049c2	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0049c7	83 c4 04 		add	sp,4
;|***     }
; Line 1872
;|*** 
;|***   if(t1->port_dmat_list[port]==7)
; Line 1874
					$I1946:
	*** 0049ca	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0049ce	83 c3 0c 		add	bx,12	;000cH
	*** 0049d1	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 0049d4	d1 e6 			shl	si,1
	*** 0049d6	26 83 38 07 		cmp	WORD PTR es:[bx][si],7
	*** 0049da	74 03 			je	$JCC18906
	*** 0049dc	e9 e4 00 		jmp	$I1952
					$JCC18906:
;|***     {
; Line 1875
;|***     outp(DMA_COMMAND_HI,4);     //disable dma
; Line 1876
	*** 0049df	6a 04 			push	4
	*** 0049e1	68 d0 00 		push	208	;00d0H
	*** 0049e4	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0049e9	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_HI,0x1b);     //demand xfr on ch7
; Line 1877
	*** 0049ec	6a 1b 			push	27	;001bH
	*** 0049ee	68 d6 00 		push	214	;00d6H
	*** 0049f1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0049f6	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFHI,0);     //reset flip-flop
; Line 1878
	*** 0049f9	6a 00 			push	0
	*** 0049fb	68 d8 00 		push	216	;00d8H
	*** 0049fe	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004a03	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH7,(size-1)&0xff);
; Line 1879
	*** 004a06	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;size
	*** 004a09	fe c8 			dec	al
	*** 004a0b	2a e4 			sub	ah,ah
	*** 004a0d	50 			push	ax
	*** 004a0e	68 ce 00 		push	206	;00ceH
	*** 004a11	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004a16	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH7,(size-1)>>8);
; Line 1880
	*** 004a19	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;size
	*** 004a1c	48 			dec	ax
	*** 004a1d	8a c4 			mov	al,ah
	*** 004a1f	2a e4 			sub	ah,ah
	*** 004a21	50 			push	ax
	*** 004a22	68 ce 00 		push	206	;00ceH
	*** 004a25	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004a2a	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1881
	*** 004a2d	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;address
	*** 004a30	8b 56 0e 		mov	dx,WORD PTR [bp+14]
	*** 004a33	25 ff 0f 		and	ax,4095	;0fffH
	*** 004a36	83 e2 ff 		and	dx,-1	;ffffH
	*** 004a39	d1 e0 			shl	ax,1
	*** 004a3b	d1 d2 			rcl	dx,1
	*** 004a3d	d1 d0 			rcl	ax,1
	*** 004a3f	d1 d2 			rcl	dx,1
	*** 004a41	d1 d0 			rcl	ax,1
	*** 004a43	d1 d2 			rcl	dx,1
	*** 004a45	d1 d0 			rcl	ax,1
	*** 004a47	d1 d2 			rcl	dx,1
	*** 004a49	d1 d0 			rcl	ax,1
	*** 004a4b	92 			xchg	ax,dx
	*** 004a4c	83 e2 0f 		and	dx,15	;000fH
	*** 004a4f	03 46 0c 		add	ax,WORD PTR [bp+12]	;address
	*** 004a52	83 d2 00 		adc	dx,0
	*** 004a55	89 46 f8 		mov	WORD PTR [bp-8],ax	;linaddress
	*** 004a58	89 56 fa 		mov	WORD PTR [bp-6],dx
;|***     outp(DMA_PAGE_CH7,(char)(linaddress>>16));
; Line 1882
	*** 004a5b	8a 46 fa 		mov	al,BYTE PTR [bp-6]
	*** 004a5e	98 			cbw	
	*** 004a5f	50 			push	ax
	*** 004a60	68 8a 00 		push	138	;008aH
	*** 004a63	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004a68	83 c4 04 		add	sp,4
;|***     linaddress = linaddress>>1; //adjust for 16bit dma
; Line 1883
	*** 004a6b	d1 6e fa 		shr	WORD PTR [bp-6],1
	*** 004a6e	d1 5e f8 		rcr	WORD PTR [bp-8],1	;linaddress
;|***     outp(DMA_CLEAR_FFHI,0);
; Line 1884
	*** 004a71	6a 00 			push	0
	*** 004a73	68 d8 00 		push	216	;00d8H
	*** 004a76	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004a7b	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH7,(char)(linaddress&0xff));
; Line 1885
	*** 004a7e	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;linaddress
	*** 004a81	98 			cbw	
	*** 004a82	50 			push	ax
	*** 004a83	68 cc 00 		push	204	;00ccH
	*** 004a86	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004a8b	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH7,(char)(linaddress>>8));
; Line 1886
	*** 004a8e	8b 46 f8 		mov	ax,WORD PTR [bp-8]	;linaddress
	*** 004a91	8b 56 fa 		mov	dx,WORD PTR [bp-6]
	*** 004a94	8a c4 			mov	al,ah
	*** 004a96	8a e2 			mov	ah,dl
	*** 004a98	8a d6 			mov	dl,dh
	*** 004a9a	2a f6 			sub	dh,dh
	*** 004a9c	98 			cbw	
	*** 004a9d	50 			push	ax
	*** 004a9e	68 cc 00 		push	204	;00ccH
	*** 004aa1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004aa6	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_HI,3);        //enable chan7
; Line 1887
	*** 004aa9	6a 03 			push	3
	*** 004aab	68 d4 00 		push	212	;00d4H
	*** 004aae	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ab3	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_HI,0);     //enable dma
; Line 1888
	*** 004ab6	6a 00 			push	0
	*** 004ab8	68 d0 00 		push	208	;00d0H
	*** 004abb	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ac0	83 c4 04 		add	sp,4
;|***     }
; Line 1889
;|*** 
;|***   if(numbytes ==0) size =FRAME_SIZE;
; Line 1891
					$I1952:
	*** 004ac3	83 7e 0a 00 		cmp	WORD PTR [bp+10],0	;numbytes
	*** 004ac7	74 03 			je	$JCC19143
	*** 004ac9	e9 08 00 		jmp	$I1958
					$JCC19143:
	*** 004acc	c7 46 fc 00 04 		mov	WORD PTR [bp-4],1024	;0400H	;size
;|***   else size = numbytes;
; Line 1892
	*** 004ad1	e9 06 00 		jmp	$I1959
					$I1958:
	*** 004ad4	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;numbytes
	*** 004ad7	89 46 fc 		mov	WORD PTR [bp-4],ax	;size
					$I1959:
;|***   i = size-1;
; Line 1893
	*** 004ada	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;size
	*** 004add	48 			dec	ax
	*** 004ade	89 46 fe 		mov	WORD PTR [bp-2],ax	;i
;|***   i = i&0x0fff;
; Line 1894
	*** 004ae1	81 66 fe ff 0f 		and	WORD PTR [bp-2],4095	;0fffH	;i
;|***   i = i|0x8000;
; Line 1895
	*** 004ae6	81 4e fe 00 80 		or	WORD PTR [bp-2],-32768	;8000H	;i
;|***   chanstor = inp(t1->port_list[port]+PVR)&0x1;
; Line 1896
	*** 004aeb	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 004aee	d1 e3 			shl	bx,1
	*** 004af0	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004af4	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004af7	05 1c 00 		add	ax,28	;001cH
	*** 004afa	50 			push	ax
	*** 004afb	9a 00 00 00 00 		call	FAR PTR _inp
	*** 004b00	83 c4 02 		add	sp,2
	*** 004b03	25 01 00 		and	ax,1
	*** 004b06	89 46 f6 		mov	WORD PTR [bp-10],ax	;chanstor
;|***   outp(t1->port_list[port]+PVR,(inp(t1->port_list[port]+PVR)&0xfe)+t1->channel[port]); //set channel
; Line 1897
	*** 004b09	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 004b0c	d1 e3 			shl	bx,1
	*** 004b0e	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004b12	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004b15	05 1c 00 		add	ax,28	;001cH
	*** 004b18	50 			push	ax
	*** 004b19	9a 00 00 00 00 		call	FAR PTR _inp
	*** 004b1e	83 c4 02 		add	sp,2
	*** 004b21	25 fe 00 		and	ax,254	;00feH
	*** 004b24	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004b28	81 c3 9a 01 		add	bx,410	;019aH
	*** 004b2c	8b 76 10 		mov	si,WORD PTR [bp+16]	;port
	*** 004b2f	d1 e6 			shl	si,1
	*** 004b31	26 03 00 		add	ax,WORD PTR es:[bx][si]
	*** 004b34	50 			push	ax
	*** 004b35	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 004b38	d1 e3 			shl	bx,1
	*** 004b3a	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004b3e	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004b41	05 1c 00 		add	ax,28	;001cH
	*** 004b44	50 			push	ax
	*** 004b45	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004b4a	83 c4 04 		add	sp,4
;|***   outp(t1->port_list[port]+XBCL,i&0xff);
; Line 1898
	*** 004b4d	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;i
	*** 004b50	2a e4 			sub	ah,ah
	*** 004b52	50 			push	ax
	*** 004b53	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 004b56	d1 e3 			shl	bx,1
	*** 004b58	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004b5c	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004b5f	05 0a 00 		add	ax,10	;000aH
	*** 004b62	50 			push	ax
	*** 004b63	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004b68	83 c4 04 		add	sp,4
;|***   outp(t1->port_list[port]+XBCH,i>>8);    //set for dma mode and FRAME_SIZE bytes per frame
; Line 1899
	*** 004b6b	8a 46 ff 		mov	al,BYTE PTR [bp-1]
	*** 004b6e	2a e4 			sub	ah,ah
	*** 004b70	50 			push	ax
	*** 004b71	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 004b74	d1 e3 			shl	bx,1
	*** 004b76	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004b7a	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004b7d	05 0b 00 		add	ax,11	;000bH
	*** 004b80	50 			push	ax
	*** 004b81	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004b86	83 c4 04 		add	sp,4
;|***   outp(t1->port_list[port]+PVR,(inp(t1->port_list[port]+PVR)&0xfe)+chanstor); //set channel
; Line 1900
	*** 004b89	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 004b8c	d1 e3 			shl	bx,1
	*** 004b8e	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004b92	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004b95	05 1c 00 		add	ax,28	;001cH
	*** 004b98	50 			push	ax
	*** 004b99	9a 00 00 00 00 		call	FAR PTR _inp
	*** 004b9e	83 c4 02 		add	sp,2
	*** 004ba1	25 fe 00 		and	ax,254	;00feH
	*** 004ba4	03 46 f6 		add	ax,WORD PTR [bp-10]	;chanstor
	*** 004ba7	50 			push	ax
	*** 004ba8	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 004bab	d1 e3 			shl	bx,1
	*** 004bad	c4 36 00 00 		les	si,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004bb1	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 004bb4	05 1c 00 		add	ax,28	;001cH
	*** 004bb7	50 			push	ax
	*** 004bb8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004bbd	83 c4 04 		add	sp,4
;|***   
;|***   }
; Line 1902
	*** 004bc0	e9 00 00 		jmp	$EX1926
					$EX1926:
	*** 004bc3	5e 			pop	si
	*** 004bc4	5f 			pop	di
	*** 004bc5	c9 			leave	
	*** 004bc6	ca 0c 00 		ret	12	;0000000cH

?setupdmat@Cescc@@JECXIPEXI@Z	ENDP
	PUBLIC	?setupdmar@Cescc@@JECXIPEX@Z	; Cescc::setupdmar
?setupdmar@Cescc@@JECXIPEX@Z	PROC FAR	; Cescc::setupdmar
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** void Cescc::setupdmar(unsigned port,void far *address)
;|***   {
; Line 1909
	*** 004bc9	c8 06 00 00 		enter	6,0
	*** 004bcd	57 			push	di
	*** 004bce	56 			push	si
;	linaddress = -4
;	size = -6
;	this = 6
;	port = 14
;	address = 10
;|***   unsigned long linaddress;
;|***   unsigned size;
;|*** 
;|***   size = 0;
; Line 1913
	*** 004bcf	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0	;size
;|***   //size = 32; //so max received is framesize+32
;|***   //the extra transfers are added to the frame size so if FRAME_SIZE+1 
;|***   //( the +1 is for the status bytes that is pushed into the RXFIFO) is set to 
;|***   //a non multiple of 32 the receive[] array will be valid and not overwritten
;|***   //by the unexpected transfers at the end of a frame. and subsequent frames
;|***   //will be received correctly
;|***   //in other words if a frame size of say 40 is used:
;|***   // frame_size+1 = 41
;|***   // then ther;|***   // 9 bytes will force a 16 byte DMA cycle giving us 7 extra bytes
;|***   // so we add 7 to the frame size to get the total number of cycles in a
;|***   // received frame( the received length will be 48 bytes 41 of which are valid)
;|***   if(t1->port_dmar_list[port]==1)
; Line 1926
	*** 004bd4	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004bd8	83 c3 10 		add	bx,16	;0010H
	*** 004bdb	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 004bde	d1 e6 			shl	si,1
	*** 004be0	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 004be4	74 03 			je	$JCC19428
	*** 004be6	e9 d6 00 		jmp	$I1966
					$JCC19428:
;|***     {
; Line 1927
;|***     outp(DMA_COMMAND_LO,4);     //disable dma
; Line 1928
	*** 004be9	6a 04 			push	4
	*** 004beb	6a 08 			push	8
	*** 004bed	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004bf2	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_LO,0x15);     //demand xfer ch1
; Line 1929
	*** 004bf5	6a 15 			push	21	;0015H
	*** 004bf7	6a 0b 			push	11	;000bH
	*** 004bf9	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004bfe	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);     //clear ctrlr flip flop
; Line 1930
	*** 004c01	6a 00 			push	0
	*** 004c03	6a 0c 			push	12	;000cH
	*** 004c05	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004c0a	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH1,(FRAME_SIZE+size-1)&0xff);//write corrected word count
; Line 1931
	*** 004c0d	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;size
	*** 004c10	fe c8 			dec	al
	*** 004c12	2a e4 			sub	ah,ah
	*** 004c14	50 			push	ax
	*** 004c15	6a 03 			push	3
	*** 004c17	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004c1c	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH1,(FRAME_SIZE+size-1)>>8);
; Line 1932
	*** 004c1f	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;size
	*** 004c22	05 ff 03 		add	ax,1023	;03ffH
	*** 004c25	8a c4 			mov	al,ah
	*** 004c27	2a e4 			sub	ah,ah
	*** 004c29	50 			push	ax
	*** 004c2a	6a 03 			push	3
	*** 004c2c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004c31	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1933
	*** 004c34	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;address
	*** 004c37	8b 56 0c 		mov	dx,WORD PTR [bp+12]
	*** 004c3a	25 ff 0f 		and	ax,4095	;0fffH
	*** 004c3d	83 e2 ff 		and	dx,-1	;ffffH
	*** 004c40	d1 e0 			shl	ax,1
	*** 004c42	d1 d2 			rcl	dx,1
	*** 004c44	d1 d0 			rcl	ax,1
	*** 004c46	d1 d2 			rcl	dx,1
	*** 004c48	d1 d0 			rcl	ax,1
	*** 004c4a	d1 d2 			rcl	dx,1
	*** 004c4c	d1 d0 			rcl	ax,1
	*** 004c4e	d1 d2 			rcl	dx,1
	*** 004c50	d1 d0 			rcl	ax,1
	*** 004c52	92 			xchg	ax,dx
	*** 004c53	83 e2 0f 		and	dx,15	;000fH
	*** 004c56	03 46 0a 		add	ax,WORD PTR [bp+10]	;address
	*** 004c59	83 d2 00 		adc	dx,0
	*** 004c5c	89 46 fc 		mov	WORD PTR [bp-4],ax	;linaddress
	*** 004c5f	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     outp(DMA_PAGE_CH1,(char)(linaddress>>16));
; Line 1934
	*** 004c62	8a 46 fe 		mov	al,BYTE PTR [bp-2]
	*** 004c65	98 			cbw	
	*** 004c66	50 			push	ax
	*** 004c67	68 83 00 		push	131	;0083H
	*** 004c6a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004c6f	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);
; Line 1935
	*** 004c72	6a 00 			push	0
	*** 004c74	6a 0c 			push	12	;000cH
	*** 004c76	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004c7b	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH1,(char)(linaddress&0xff));     //and store it in the controller
; Line 1936
	*** 004c7e	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;linaddress
	*** 004c81	98 			cbw	
	*** 004c82	50 			push	ax
	*** 004c83	6a 02 			push	2
	*** 004c85	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004c8a	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH1,(char)(linaddress>>8));
; Line 1937
	*** 004c8d	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;linaddress
	*** 004c90	8b 56 fe 		mov	dx,WORD PTR [bp-2]
	*** 004c93	8a c4 			mov	al,ah
	*** 004c95	8a e2 			mov	ah,dl
	*** 004c97	8a d6 			mov	dl,dh
	*** 004c99	2a f6 			sub	dh,dh
	*** 004c9b	98 			cbw	
	*** 004c9c	50 			push	ax
	*** 004c9d	6a 02 			push	2
	*** 004c9f	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ca4	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_LO,1);                //unmask ch1
; Line 1938
	*** 004ca7	6a 01 			push	1
	*** 004ca9	6a 0a 			push	10	;000aH
	*** 004cab	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004cb0	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_LO,0);             //enable DMA
; Line 1939
	*** 004cb3	6a 00 			push	0
	*** 004cb5	6a 08 			push	8
	*** 004cb7	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004cbc	83 c4 04 		add	sp,4
;|***     }
; Line 1940
;|***   
;|***   if(t1->port_dmar_list[port]==3)
; Line 1942
					$I1966:
	*** 004cbf	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004cc3	83 c3 10 		add	bx,16	;0010H
	*** 004cc6	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 004cc9	d1 e6 			shl	si,1
	*** 004ccb	26 83 38 03 		cmp	WORD PTR es:[bx][si],3
	*** 004ccf	74 03 			je	$JCC19663
	*** 004cd1	e9 d6 00 		jmp	$I1972
					$JCC19663:
;|***     {
; Line 1943
;|***     outp(DMA_COMMAND_LO,4);
; Line 1944
	*** 004cd4	6a 04 			push	4
	*** 004cd6	6a 08 			push	8
	*** 004cd8	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004cdd	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_LO,0x17);
; Line 1945
	*** 004ce0	6a 17 			push	23	;0017H
	*** 004ce2	6a 0b 			push	11	;000bH
	*** 004ce4	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ce9	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);
; Line 1946
	*** 004cec	6a 00 			push	0
	*** 004cee	6a 0c 			push	12	;000cH
	*** 004cf0	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004cf5	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH3,(FRAME_SIZE+size-1)&0xff);
; Line 1947
	*** 004cf8	8a 46 fa 		mov	al,BYTE PTR [bp-6]	;size
	*** 004cfb	fe c8 			dec	al
	*** 004cfd	2a e4 			sub	ah,ah
	*** 004cff	50 			push	ax
	*** 004d00	6a 07 			push	7
	*** 004d02	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004d07	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH3,(FRAME_SIZE+size-1)>>8);
; Line 1948
	*** 004d0a	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;size
	*** 004d0d	05 ff 03 		add	ax,1023	;03ffH
	*** 004d10	8a c4 			mov	al,ah
	*** 004d12	2a e4 			sub	ah,ah
	*** 004d14	50 			push	ax
	*** 004d15	6a 07 			push	7
	*** 004d17	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004d1c	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1949
	*** 004d1f	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;address
	*** 004d22	8b 56 0c 		mov	dx,WORD PTR [bp+12]
	*** 004d25	25 ff 0f 		and	ax,4095	;0fffH
	*** 004d28	83 e2 ff 		and	dx,-1	;ffffH
	*** 004d2b	d1 e0 			shl	ax,1
	*** 004d2d	d1 d2 			rcl	dx,1
	*** 004d2f	d1 d0 			rcl	ax,1
	*** 004d31	d1 d2 			rcl	dx,1
	*** 004d33	d1 d0 			rcl	ax,1
	*** 004d35	d1 d2 			rcl	dx,1
	*** 004d37	d1 d0 			rcl	ax,1
	*** 004d39	d1 d2 			rcl	dx,1
	*** 004d3b	d1 d0 			rcl	ax,1
	*** 004d3d	92 			xchg	ax,dx
	*** 004d3e	83 e2 0f 		and	dx,15	;000fH
	*** 004d41	03 46 0a 		add	ax,WORD PTR [bp+10]	;address
	*** 004d44	83 d2 00 		adc	dx,0
	*** 004d47	89 46 fc 		mov	WORD PTR [bp-4],ax	;linaddress
	*** 004d4a	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     outp(DMA_PAGE_CH3,(char)(linaddress>>16));
; Line 1950
	*** 004d4d	8a 46 fe 		mov	al,BYTE PTR [bp-2]
	*** 004d50	98 			cbw	
	*** 004d51	50 			push	ax
	*** 004d52	68 82 00 		push	130	;0082H
	*** 004d55	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004d5a	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFLO,0);
; Line 1951
	*** 004d5d	6a 00 			push	0
	*** 004d5f	6a 0c 			push	12	;000cH
	*** 004d61	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004d66	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH3,(char)(linaddress&0xff));
; Line 1952
	*** 004d69	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;linaddress
	*** 004d6c	98 			cbw	
	*** 004d6d	50 			push	ax
	*** 004d6e	6a 06 			push	6
	*** 004d70	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004d75	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH3,(char)(linaddress>>8));
; Line 1953
	*** 004d78	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;linaddress
	*** 004d7b	8b 56 fe 		mov	dx,WORD PTR [bp-2]
	*** 004d7e	8a c4 			mov	al,ah
	*** 004d80	8a e2 			mov	ah,dl
	*** 004d82	8a d6 			mov	dl,dh
	*** 004d84	2a f6 			sub	dh,dh
	*** 004d86	98 			cbw	
	*** 004d87	50 			push	ax
	*** 004d88	6a 06 			push	6
	*** 004d8a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004d8f	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_LO,3);
; Line 1954
	*** 004d92	6a 03 			push	3
	*** 004d94	6a 0a 			push	10	;000aH
	*** 004d96	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004d9b	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_LO,0);
; Line 1955
	*** 004d9e	6a 00 			push	0
	*** 004da0	6a 08 			push	8
	*** 004da2	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004da7	83 c4 04 		add	sp,4
;|***     }
; Line 1956
;|***   
;|***   if(t1->port_dmar_list[port]==5)
; Line 1958
					$I1972:
	*** 004daa	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004dae	83 c3 10 		add	bx,16	;0010H
	*** 004db1	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 004db4	d1 e6 			shl	si,1
	*** 004db6	26 83 38 05 		cmp	WORD PTR es:[bx][si],5
	*** 004dba	74 03 			je	$JCC19898
	*** 004dbc	e9 eb 00 		jmp	$I1978
					$JCC19898:
;|***     {
; Line 1959
;|***     outp(DMA_COMMAND_HI,4);     //disable dma
; Line 1960
	*** 004dbf	6a 04 			push	4
	*** 004dc1	68 d0 00 		push	208	;00d0H
	*** 004dc4	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004dc9	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_HI,0x15);     //demand xfr on ch5
; Line 1961
	*** 004dcc	6a 15 			push	21	;0015H
	*** 004dce	68 d6 00 		push	214	;00d6H
	*** 004dd1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004dd6	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFHI,0);     //reset flip-flop
; Line 1962
	*** 004dd9	6a 00 			push	0
	*** 004ddb	68 d8 00 		push	216	;00d8H
	*** 004dde	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004de3	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH5,(((FRAME_SIZE+size)/2)-1)&0xff);
; Line 1963
	*** 004de6	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;size
	*** 004de9	d1 e8 			shr	ax,1
	*** 004deb	fe c8 			dec	al
	*** 004ded	2a e4 			sub	ah,ah
	*** 004def	50 			push	ax
	*** 004df0	68 c6 00 		push	198	;00c6H
	*** 004df3	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004df8	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH5,(((FRAME_SIZE+size)/2)-1)>>8);
; Line 1964
	*** 004dfb	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;size
	*** 004dfe	05 00 04 		add	ax,1024	;0400H
	*** 004e01	d1 e8 			shr	ax,1
	*** 004e03	48 			dec	ax
	*** 004e04	8a c4 			mov	al,ah
	*** 004e06	2a e4 			sub	ah,ah
	*** 004e08	50 			push	ax
	*** 004e09	68 c6 00 		push	198	;00c6H
	*** 004e0c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004e11	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1965
	*** 004e14	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;address
	*** 004e17	8b 56 0c 		mov	dx,WORD PTR [bp+12]
	*** 004e1a	25 ff 0f 		and	ax,4095	;0fffH
	*** 004e1d	83 e2 ff 		and	dx,-1	;ffffH
	*** 004e20	d1 e0 			shl	ax,1
	*** 004e22	d1 d2 			rcl	dx,1
	*** 004e24	d1 d0 			rcl	ax,1
	*** 004e26	d1 d2 			rcl	dx,1
	*** 004e28	d1 d0 			rcl	ax,1
	*** 004e2a	d1 d2 			rcl	dx,1
	*** 004e2c	d1 d0 			rcl	ax,1
	*** 004e2e	d1 d2 			rcl	dx,1
	*** 004e30	d1 d0 			rcl	ax,1
	*** 004e32	92 			xchg	ax,dx
	*** 004e33	83 e2 0f 		and	dx,15	;000fH
	*** 004e36	03 46 0a 		add	ax,WORD PTR [bp+10]	;address
	*** 004e39	83 d2 00 		adc	dx,0
	*** 004e3c	89 46 fc 		mov	WORD PTR [bp-4],ax	;linaddress
	*** 004e3f	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     outp(DMA_PAGE_CH5,(char)(linaddress>>16));
; Line 1966
	*** 004e42	8a 46 fe 		mov	al,BYTE PTR [bp-2]
	*** 004e45	98 			cbw	
	*** 004e46	50 			push	ax
	*** 004e47	68 8b 00 		push	139	;008bH
	*** 004e4a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004e4f	83 c4 04 		add	sp,4
;|***     linaddress = linaddress>>1; //adjust for 16bit dma
; Line 1967
	*** 004e52	d1 6e fe 		shr	WORD PTR [bp-2],1
	*** 004e55	d1 5e fc 		rcr	WORD PTR [bp-4],1	;linaddress
;|***     outp(DMA_CLEAR_FFHI,0);
; Line 1968
	*** 004e58	6a 00 			push	0
	*** 004e5a	68 d8 00 		push	216	;00d8H
	*** 004e5d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004e62	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH5,(char)(linaddress&0xff));
; Line 1969
	*** 004e65	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;linaddress
	*** 004e68	98 			cbw	
	*** 004e69	50 			push	ax
	*** 004e6a	68 c4 00 		push	196	;00c4H
	*** 004e6d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004e72	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH5,(char)(linaddress>>8));
; Line 1970
	*** 004e75	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;linaddress
	*** 004e78	8b 56 fe 		mov	dx,WORD PTR [bp-2]
	*** 004e7b	8a c4 			mov	al,ah
	*** 004e7d	8a e2 			mov	ah,dl
	*** 004e7f	8a d6 			mov	dl,dh
	*** 004e81	2a f6 			sub	dh,dh
	*** 004e83	98 			cbw	
	*** 004e84	50 			push	ax
	*** 004e85	68 c4 00 		push	196	;00c4H
	*** 004e88	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004e8d	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_HI,1);        //enable chan5
; Line 1971
	*** 004e90	6a 01 			push	1
	*** 004e92	68 d4 00 		push	212	;00d4H
	*** 004e95	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004e9a	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_HI,0);     //enable dma
; Line 1972
	*** 004e9d	6a 00 			push	0
	*** 004e9f	68 d0 00 		push	208	;00d0H
	*** 004ea2	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ea7	83 c4 04 		add	sp,4
;|***     }
; Line 1973
;|***   
;|***   if(t1->port_dmar_list[port]==7)
; Line 1975
					$I1978:
	*** 004eaa	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004eae	83 c3 10 		add	bx,16	;0010H
	*** 004eb1	8b 76 0e 		mov	si,WORD PTR [bp+14]	;port
	*** 004eb4	d1 e6 			shl	si,1
	*** 004eb6	26 83 38 07 		cmp	WORD PTR es:[bx][si],7
	*** 004eba	74 03 			je	$JCC20154
	*** 004ebc	e9 eb 00 		jmp	$I1984
					$JCC20154:
;|***     {
; Line 1976
;|***     outp(DMA_COMMAND_HI,4);     //disable dma
; Line 1977
	*** 004ebf	6a 04 			push	4
	*** 004ec1	68 d0 00 		push	208	;00d0H
	*** 004ec4	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ec9	83 c4 04 		add	sp,4
;|***     outp(DMA_MODE_HI,0x17);     //demand xfr on ch7
; Line 1978
	*** 004ecc	6a 17 			push	23	;0017H
	*** 004ece	68 d6 00 		push	214	;00d6H
	*** 004ed1	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ed6	83 c4 04 		add	sp,4
;|***     outp(DMA_CLEAR_FFHI,0);     //reset flip-flop
; Line 1979
	*** 004ed9	6a 00 			push	0
	*** 004edb	68 d8 00 		push	216	;00d8H
	*** 004ede	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ee3	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH7,(((FRAME_SIZE+size)/2)-1)&0xff);
; Line 1980
	*** 004ee6	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;size
	*** 004ee9	d1 e8 			shr	ax,1
	*** 004eeb	fe c8 			dec	al
	*** 004eed	2a e4 			sub	ah,ah
	*** 004eef	50 			push	ax
	*** 004ef0	68 ce 00 		push	206	;00ceH
	*** 004ef3	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004ef8	83 c4 04 		add	sp,4
;|***     outp(DMA_COUNT_CH7,(((FRAME_SIZE+size)/2)-1)>>8);
; Line 1981
	*** 004efb	8b 46 fa 		mov	ax,WORD PTR [bp-6]	;size
	*** 004efe	05 00 04 		add	ax,1024	;0400H
	*** 004f01	d1 e8 			shr	ax,1
	*** 004f03	48 			dec	ax
	*** 004f04	8a c4 			mov	al,ah
	*** 004f06	2a e4 			sub	ah,ah
	*** 004f08	50 			push	ax
	*** 004f09	68 ce 00 		push	206	;00ceH
	*** 004f0c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004f11	83 c4 04 		add	sp,4
;|***     linaddress = (((unsigned long)address & 0xffff0000)>>12) + ((unsigned long)address & 0xffff);
; Line 1982
	*** 004f14	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;address
	*** 004f17	8b 56 0c 		mov	dx,WORD PTR [bp+12]
	*** 004f1a	25 ff 0f 		and	ax,4095	;0fffH
	*** 004f1d	83 e2 ff 		and	dx,-1	;ffffH
	*** 004f20	d1 e0 			shl	ax,1
	*** 004f22	d1 d2 			rcl	dx,1
	*** 004f24	d1 d0 			rcl	ax,1
	*** 004f26	d1 d2 			rcl	dx,1
	*** 004f28	d1 d0 			rcl	ax,1
	*** 004f2a	d1 d2 			rcl	dx,1
	*** 004f2c	d1 d0 			rcl	ax,1
	*** 004f2e	d1 d2 			rcl	dx,1
	*** 004f30	d1 d0 			rcl	ax,1
	*** 004f32	92 			xchg	ax,dx
	*** 004f33	83 e2 0f 		and	dx,15	;000fH
	*** 004f36	03 46 0a 		add	ax,WORD PTR [bp+10]	;address
	*** 004f39	83 d2 00 		adc	dx,0
	*** 004f3c	89 46 fc 		mov	WORD PTR [bp-4],ax	;linaddress
	*** 004f3f	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     outp(DMA_PAGE_CH7,(char)(linaddress>>16));
; Line 1983
	*** 004f42	8a 46 fe 		mov	al,BYTE PTR [bp-2]
	*** 004f45	98 			cbw	
	*** 004f46	50 			push	ax
	*** 004f47	68 8a 00 		push	138	;008aH
	*** 004f4a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004f4f	83 c4 04 		add	sp,4
;|***     linaddress = linaddress>>1; //adjust for 16bit dma
; Line 1984
	*** 004f52	d1 6e fe 		shr	WORD PTR [bp-2],1
	*** 004f55	d1 5e fc 		rcr	WORD PTR [bp-4],1	;linaddress
;|***     outp(DMA_CLEAR_FFHI,0);
; Line 1985
	*** 004f58	6a 00 			push	0
	*** 004f5a	68 d8 00 		push	216	;00d8H
	*** 004f5d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004f62	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH7,(char)(linaddress&0xff));
; Line 1986
	*** 004f65	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;linaddress
	*** 004f68	98 			cbw	
	*** 004f69	50 			push	ax
	*** 004f6a	68 cc 00 		push	204	;00ccH
	*** 004f6d	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004f72	83 c4 04 		add	sp,4
;|***     outp(DMA_ADD_CH7,(char)(linaddress>>8));
; Line 1987
	*** 004f75	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;linaddress
	*** 004f78	8b 56 fe 		mov	dx,WORD PTR [bp-2]
	*** 004f7b	8a c4 			mov	al,ah
	*** 004f7d	8a e2 			mov	ah,dl
	*** 004f7f	8a d6 			mov	dl,dh
	*** 004f81	2a f6 			sub	dh,dh
	*** 004f83	98 			cbw	
	*** 004f84	50 			push	ax
	*** 004f85	68 cc 00 		push	204	;00ccH
	*** 004f88	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004f8d	83 c4 04 		add	sp,4
;|***     outp(DMA_MASK_HI,3);        //enable chan7
; Line 1988
	*** 004f90	6a 03 			push	3
	*** 004f92	68 d4 00 		push	212	;00d4H
	*** 004f95	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004f9a	83 c4 04 		add	sp,4
;|***     outp(DMA_COMMAND_HI,0);     //enable dma
; Line 1989
	*** 004f9d	6a 00 			push	0
	*** 004f9f	68 d0 00 		push	208	;00d0H
	*** 004fa2	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004fa7	83 c4 04 		add	sp,4
;|***     }
; Line 1990
;|***   
;|***   //this really isn't necessary except for the DMA bit of XBCH
;|***   //but the transmit count is programmed in setup_dmat()
;|***   //so make sure that setup_dmar() is called before setup_dmat() if an
;|***   //odd size frame is being sent..or you won't get what you expect
;|***   //i = FRAME_SIZE-1;       //transmit XBCH:XBCL +1 bytes so set XBCH:XBCL to framesize-1
;|***   //i = i&0x0fff;
;|***   //i = i|0x8000;
;|***   //outp(XBCL,i&0xff);
;|***   //outp(XBCH,i>>8);    //set for dma mode and FRAME_SIZE bytes per frame
;|***   //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;|***   //SETUPDMAT must be called before the receive section will work, preferably in init!!!
;|***   //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;|***   //this is the only way to set the dma bit of XBCH without knowing the transmitted size
;|***   }
; Line 2005
					$I1984:
	*** 004faa	e9 00 00 		jmp	$EX1963
					$EX1963:
	*** 004fad	5e 			pop	si
	*** 004fae	5f 			pop	di
	*** 004faf	c9 			leave	
	*** 004fb0	ca 0a 00 		ret	10	;0000000aH

?setupdmar@Cescc@@JECXIPEX@Z	ENDP
	PUBLIC	?getdmarcount@Cescc@@JECII@Z	; Cescc::getdmarcount
?getdmarcount@Cescc@@JECII@Z	PROC FAR	; Cescc::getdmarcount
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** unsigned Cescc::getdmarcount(unsigned port)
;|***   {
; Line 2012
	*** 004fb3	c8 06 00 00 		enter	6,0
	*** 004fb7	57 			push	di
	*** 004fb8	56 			push	si
;	size = -2
;	lo = -4
;	hi = -6
;	this = 6
;	port = 10
;|***   unsigned size;
;|***   unsigned lo,hi;
;|***   size = 0;
; Line 2015
	*** 004fb9	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;size
;|***   if(t1->port_dmar_list[port]==1)
; Line 2016
	*** 004fbe	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 004fc2	83 c3 10 		add	bx,16	;0010H
	*** 004fc5	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 004fc8	d1 e6 			shl	si,1
	*** 004fca	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 004fce	74 03 			je	$JCC20430
	*** 004fd0	e9 3d 00 		jmp	$I1996
					$JCC20430:
;|***     {
; Line 2017
;|***     outp(DMA_CLEAR_FFLO,0);     //clear ctrlr flip flop
; Line 2018
	*** 004fd3	6a 00 			push	0
	*** 004fd5	6a 0c 			push	12	;000cH
	*** 004fd7	9a 00 00 00 00 		call	FAR PTR _outp
	*** 004fdc	83 c4 04 		add	sp,4
;|***     lo = inp(DMA_COUNT_CH1);
; Line 2019
	*** 004fdf	6a 03 			push	3
	*** 004fe1	9a 00 00 00 00 		call	FAR PTR _inp
	*** 004fe6	83 c4 02 		add	sp,2
	*** 004fe9	89 46 fc 		mov	WORD PTR [bp-4],ax	;lo
;|***     hi = inp(DMA_COUNT_CH1);
; Line 2020
	*** 004fec	6a 03 			push	3
	*** 004fee	9a 00 00 00 00 		call	FAR PTR _inp
	*** 004ff3	83 c4 02 		add	sp,2
	*** 004ff6	89 46 fa 		mov	WORD PTR [bp-6],ax	;hi
;|***     size = (hi<<8) + lo;
; Line 2021
	*** 004ff9	8a 66 fa 		mov	ah,BYTE PTR [bp-6]	;hi
	*** 004ffc	2a c0 			sub	al,al
	*** 004ffe	03 46 fc 		add	ax,WORD PTR [bp-4]	;lo
	*** 005001	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     size = size +1;
; Line 2022
	*** 005004	ff 46 fe 		inc	WORD PTR [bp-2]	;size
;|***     size = FRAME_SIZE - size;
; Line 2023
	*** 005007	b8 00 04 		mov	ax,1024	;0400H
	*** 00500a	2b 46 fe 		sub	ax,WORD PTR [bp-2]	;size
	*** 00500d	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     }
; Line 2024
;|*** 
;|***   if(t1->port_dmar_list[port]==3)
; Line 2026
					$I1996:
	*** 005010	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 005014	83 c3 10 		add	bx,16	;0010H
	*** 005017	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00501a	d1 e6 			shl	si,1
	*** 00501c	26 83 38 03 		cmp	WORD PTR es:[bx][si],3
	*** 005020	74 03 			je	$JCC20512
	*** 005022	e9 3d 00 		jmp	$I1997
					$JCC20512:
;|***     {
; Line 2027
;|***     outp(DMA_CLEAR_FFLO,0);
; Line 2028
	*** 005025	6a 00 			push	0
	*** 005027	6a 0c 			push	12	;000cH
	*** 005029	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00502e	83 c4 04 		add	sp,4
;|***     lo = inp(DMA_COUNT_CH3);
; Line 2029
	*** 005031	6a 07 			push	7
	*** 005033	9a 00 00 00 00 		call	FAR PTR _inp
	*** 005038	83 c4 02 		add	sp,2
	*** 00503b	89 46 fc 		mov	WORD PTR [bp-4],ax	;lo
;|***     hi = inp(DMA_COUNT_CH3);
; Line 2030
	*** 00503e	6a 07 			push	7
	*** 005040	9a 00 00 00 00 		call	FAR PTR _inp
	*** 005045	83 c4 02 		add	sp,2
	*** 005048	89 46 fa 		mov	WORD PTR [bp-6],ax	;hi
;|***     size = (hi<<8) + lo;
; Line 2031
	*** 00504b	8a 66 fa 		mov	ah,BYTE PTR [bp-6]	;hi
	*** 00504e	2a c0 			sub	al,al
	*** 005050	03 46 fc 		add	ax,WORD PTR [bp-4]	;lo
	*** 005053	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     size = size +1;
; Line 2032
	*** 005056	ff 46 fe 		inc	WORD PTR [bp-2]	;size
;|***     size = FRAME_SIZE - size;
; Line 2033
	*** 005059	b8 00 04 		mov	ax,1024	;0400H
	*** 00505c	2b 46 fe 		sub	ax,WORD PTR [bp-2]	;size
	*** 00505f	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     }
; Line 2034
;|*** 
;|***   if(t1->port_dmar_list[port]==5)
; Line 2036
					$I1997:
	*** 005062	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 005066	83 c3 10 		add	bx,16	;0010H
	*** 005069	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00506c	d1 e6 			shl	si,1
	*** 00506e	26 83 38 05 		cmp	WORD PTR es:[bx][si],5
	*** 005072	74 03 			je	$JCC20594
	*** 005074	e9 43 00 		jmp	$I1998
					$JCC20594:
;|***     {
; Line 2037
;|***     outp(DMA_CLEAR_FFHI,0);     //reset flip-flop
; Line 2038
	*** 005077	6a 00 			push	0
	*** 005079	68 d8 00 		push	216	;00d8H
	*** 00507c	9a 00 00 00 00 		call	FAR PTR _outp
	*** 005081	83 c4 04 		add	sp,4
;|***     lo = inp(DMA_COUNT_CH5);
; Line 2039
	*** 005084	68 c6 00 		push	198	;00c6H
	*** 005087	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00508c	83 c4 02 		add	sp,2
	*** 00508f	89 46 fc 		mov	WORD PTR [bp-4],ax	;lo
;|***     hi = inp(DMA_COUNT_CH5);
; Line 2040
	*** 005092	68 c6 00 		push	198	;00c6H
	*** 005095	9a 00 00 00 00 		call	FAR PTR _inp
	*** 00509a	83 c4 02 		add	sp,2
	*** 00509d	89 46 fa 		mov	WORD PTR [bp-6],ax	;hi
;|***     size = (hi<<8) + lo;
; Line 2041
	*** 0050a0	8a 66 fa 		mov	ah,BYTE PTR [bp-6]	;hi
	*** 0050a3	2a c0 			sub	al,al
	*** 0050a5	03 46 fc 		add	ax,WORD PTR [bp-4]	;lo
	*** 0050a8	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     size = size +1;
; Line 2042
	*** 0050ab	ff 46 fe 		inc	WORD PTR [bp-2]	;size
;|***     size = size <<1;
; Line 2043
	*** 0050ae	d1 66 fe 		shl	WORD PTR [bp-2],1	;size
;|***     size = FRAME_SIZE - size;
; Line 2044
	*** 0050b1	b8 00 04 		mov	ax,1024	;0400H
	*** 0050b4	2b 46 fe 		sub	ax,WORD PTR [bp-2]	;size
	*** 0050b7	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     }
; Line 2045
;|*** 
;|***   if(t1->port_dmar_list[port]==7)
; Line 2047
					$I1998:
	*** 0050ba	c4 1e 00 00 		les	bx,DWORD PTR ?t1@@3PEVCescc@@E	;t1
	*** 0050be	83 c3 10 		add	bx,16	;0010H
	*** 0050c1	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 0050c4	d1 e6 			shl	si,1
	*** 0050c6	26 83 38 07 		cmp	WORD PTR es:[bx][si],7
	*** 0050ca	74 03 			je	$JCC20682
	*** 0050cc	e9 43 00 		jmp	$I1999
					$JCC20682:
;|***     {
; Line 2048
;|***     outp(DMA_CLEAR_FFHI,0);     //reset flip-flop
; Line 2049
	*** 0050cf	6a 00 			push	0
	*** 0050d1	68 d8 00 		push	216	;00d8H
	*** 0050d4	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0050d9	83 c4 04 		add	sp,4
;|***     lo = inp(DMA_COUNT_CH7);
; Line 2050
	*** 0050dc	68 ce 00 		push	206	;00ceH
	*** 0050df	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0050e4	83 c4 02 		add	sp,2
	*** 0050e7	89 46 fc 		mov	WORD PTR [bp-4],ax	;lo
;|***     hi = inp(DMA_COUNT_CH7);
; Line 2051
	*** 0050ea	68 ce 00 		push	206	;00ceH
	*** 0050ed	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0050f2	83 c4 02 		add	sp,2
	*** 0050f5	89 46 fa 		mov	WORD PTR [bp-6],ax	;hi
;|***     size = (hi<<8) + lo;
; Line 2052
	*** 0050f8	8a 66 fa 		mov	ah,BYTE PTR [bp-6]	;hi
	*** 0050fb	2a c0 			sub	al,al
	*** 0050fd	03 46 fc 		add	ax,WORD PTR [bp-4]	;lo
	*** 005100	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     size = size +1;
; Line 2053
	*** 005103	ff 46 fe 		inc	WORD PTR [bp-2]	;size
;|***     size = size <<1;
; Line 2054
	*** 005106	d1 66 fe 		shl	WORD PTR [bp-2],1	;size
;|***     size = FRAME_SIZE - size;
; Line 2055
	*** 005109	b8 00 04 		mov	ax,1024	;0400H
	*** 00510c	2b 46 fe 		sub	ax,WORD PTR [bp-2]	;size
	*** 00510f	89 46 fe 		mov	WORD PTR [bp-2],ax	;size
;|***     }
; Line 2056
;|*** 
;|***   return size;
; Line 2058
					$I1999:
	*** 005112	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;size
	*** 005115	e9 00 00 		jmp	$EX1992
;|***   }
; Line 2059
					$EX1992:
	*** 005118	5e 			pop	si
	*** 005119	5f 			pop	di
	*** 00511a	c9 			leave	
	*** 00511b	ca 06 00 		ret	6

?getdmarcount@Cescc@@JECII@Z	ENDP
	PUBLIC	?set_clock_generator@Cescc@@RECXIKI@Z	; Cescc::set_clock_generator
?set_clock_generator@Cescc@@RECXIKI@Z	PROC FAR	; Cescc::set_clock_generator
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** 
;|*** //sets the onboard Cypress ICD2053B Programmable Clock Generator
;|*** //to divide the 18.432 MHz system oscillator to your desired oscillator speed
;|*** //see data sheet at Cypress Web site, and Cypress' BitCalc program.
;|*** void Cescc::set_clock_generator(unsigned port, unsigned long hval,unsigned nmbits)
;|***   {
; Line 2070
	*** 00511e	c8 0a 00 00 		enter	10,0
	*** 005122	57 			push	di
	*** 005123	56 			push	si
;	base = -2
;	curval = -4
;	tempval = -8
;	i = -10
;	this = 6
;	port = 16
;	hval = 12
;	nmbits = 10
;|***   unsigned base;
;|***   unsigned curval;
;|***   unsigned long tempval;
;|***   unsigned i;
;|*** 
;|***   base = port_list[port];
; Line 2076
	*** 005124	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;port
	*** 005127	d1 e3 			shl	bx,1
	*** 005129	c4 76 06 		les	si,DWORD PTR [bp+6]	;this
	*** 00512c	26 8b 00 		mov	ax,WORD PTR es:[bx][si]
	*** 00512f	89 46 fe 		mov	WORD PTR [bp-2],ax	;base
;|***   curval = 0;
; Line 2077
	*** 005132	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;curval
;|***   //curval bit 2 = data bit      (DATA on ICD2053B, parallel port bit2 on ESCC)
;|***   //curval bit 1 = clock toggle  (SCLK on ICD2053B, parallel port bit1 on ESCC)
;|***   outp(base+PVR,curval);   //writing to PVR (0x1c) writes to ESCC universal port (parallel port)
; Line 2080
	*** 005137	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 00513a	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 00513d	05 1c 00 		add	ax,28	;001cH
	*** 005140	50 			push	ax
	*** 005141	9a 00 00 00 00 		call	FAR PTR _outp
	*** 005146	83 c4 04 		add	sp,4
;|*** 
;|***   tempval = STARTWRD;      //0x1e05
; Line 2082
	*** 005149	c7 46 f8 05 1e 		mov	WORD PTR [bp-8],7685	;1e05H	;tempval
	*** 00514e	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0
;|***   for(i=0;i<14;i++)        //writes 14 LSBs of STARTWRD into ICD2053 one bit at a time, LSB first
; Line 2083
	*** 005153	c7 46 f6 00 00 		mov	WORD PTR [bp-10],0	;i
	*** 005158	e9 03 00 		jmp	$F2009
					$FC2010:
	*** 00515b	ff 46 f6 		inc	WORD PTR [bp-10]	;i
					$F2009:
	*** 00515e	83 7e f6 0e 		cmp	WORD PTR [bp-10],14	;000eH	;i
	*** 005162	72 03 			jb	$JCC20834
	*** 005164	e9 58 00 		jmp	$FB2011
					$JCC20834:
;|***     {
; Line 2084
;|***     curval = 0;
; Line 2085
	*** 005167	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;curval
;|***     curval = (char)(tempval&0x1)<<2;  //select LSB and rotate up to bit2 position (DATA)
; Line 2086
	*** 00516c	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;tempval
	*** 00516f	24 01 			and	al,1
	*** 005171	98 			cbw	
	*** 005172	c1 e0 02 		shl	ax,2
	*** 005175	89 46 fc 		mov	WORD PTR [bp-4],ax	;curval
;|***     outp(base+PVR,curval);              
; Line 2087
	*** 005178	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 00517b	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 00517e	05 1c 00 		add	ax,28	;001cH
	*** 005181	50 			push	ax
	*** 005182	9a 00 00 00 00 		call	FAR PTR _outp
	*** 005187	83 c4 04 		add	sp,4
;|***     curval = curval |0x02;    //force rising edge on SCLK (bit1 on parallel port)
; Line 2088
	*** 00518a	83 4e fc 02 		or	WORD PTR [bp-4],2	;curval
;|***     outp(base+PVR,curval);    //clock data into ICD 2053
; Line 2089
	*** 00518e	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 005191	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 005194	05 1c 00 		add	ax,28	;001cH
	*** 005197	50 			push	ax
	*** 005198	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00519d	83 c4 04 		add	sp,4
;|***     curval = curval &0x04;    //force falling edge
; Line 2090
	*** 0051a0	83 66 fc 04 		and	WORD PTR [bp-4],4	;curval
;|***     outp(base+PVR,curval);    //set clock low
; Line 2091
	*** 0051a4	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 0051a7	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 0051aa	05 1c 00 		add	ax,28	;001cH
	*** 0051ad	50 			push	ax
	*** 0051ae	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0051b3	83 c4 04 		add	sp,4
;|***     tempval = tempval >> 1;   //get next bit
; Line 2092
	*** 0051b6	d1 6e fa 		shr	WORD PTR [bp-6],1
	*** 0051b9	d1 5e f8 		rcr	WORD PTR [bp-8],1	;tempval
;|***     }
; Line 2093
	*** 0051bc	e9 9c ff 		jmp	$FC2010
					$FB2011:
;|***   
;|***   tempval = hval;
; Line 2095
	*** 0051bf	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;hval
	*** 0051c2	8b 56 0e 		mov	dx,WORD PTR [bp+14]
	*** 0051c5	89 46 f8 		mov	WORD PTR [bp-8],ax	;tempval
	*** 0051c8	89 56 fa 		mov	WORD PTR [bp-6],dx
;|***   for(i=0;i<nmbits;i++)
; Line 2096
	*** 0051cb	c7 46 f6 00 00 		mov	WORD PTR [bp-10],0	;i
	*** 0051d0	e9 03 00 		jmp	$F2013
					$FC2014:
	*** 0051d3	ff 46 f6 		inc	WORD PTR [bp-10]	;i
					$F2013:
	*** 0051d6	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;nmbits
	*** 0051d9	39 46 f6 		cmp	WORD PTR [bp-10],ax	;i
	*** 0051dc	72 03 			jb	$JCC20956
	*** 0051de	e9 58 00 		jmp	$FB2015
					$JCC20956:
;|***     {
; Line 2097
;|***     curval = 0;
; Line 2098
	*** 0051e1	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;curval
;|***     curval = (char)(tempval&0x1)<<2;  //set bit
; Line 2099
	*** 0051e6	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;tempval
	*** 0051e9	24 01 			and	al,1
	*** 0051eb	98 			cbw	
	*** 0051ec	c1 e0 02 		shl	ax,2
	*** 0051ef	89 46 fc 		mov	WORD PTR [bp-4],ax	;curval
;|***     outp(base+PVR,curval);
; Line 2100
	*** 0051f2	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 0051f5	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 0051f8	05 1c 00 		add	ax,28	;001cH
	*** 0051fb	50 			push	ax
	*** 0051fc	9a 00 00 00 00 		call	FAR PTR _outp
	*** 005201	83 c4 04 		add	sp,4
;|***     curval = curval |0x02;    //force rising edge
; Line 2101
	*** 005204	83 4e fc 02 		or	WORD PTR [bp-4],2	;curval
;|***     outp(base+PVR,curval);    //clock in data
; Line 2102
	*** 005208	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 00520b	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 00520e	05 1c 00 		add	ax,28	;001cH
	*** 005211	50 			push	ax
	*** 005212	9a 00 00 00 00 		call	FAR PTR _outp
	*** 005217	83 c4 04 		add	sp,4
;|***     curval = curval &0x04;    //force falling edge
; Line 2103
	*** 00521a	83 66 fc 04 		and	WORD PTR [bp-4],4	;curval
;|***     outp(base+PVR,curval);    //set clock low
; Line 2104
	*** 00521e	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 005221	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 005224	05 1c 00 		add	ax,28	;001cH
	*** 005227	50 			push	ax
	*** 005228	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00522d	83 c4 04 		add	sp,4
;|***     tempval = tempval >> 1;   //get next bit
; Line 2105
	*** 005230	d1 6e fa 		shr	WORD PTR [bp-6],1
	*** 005233	d1 5e f8 		rcr	WORD PTR [bp-8],1	;tempval
;|***     }
; Line 2106
	*** 005236	e9 9a ff 		jmp	$FC2014
					$FB2015:
;|*** 
;|***   tempval = MIDWRD;        //0x1e04
; Line 2108
	*** 005239	c7 46 f8 04 1e 		mov	WORD PTR [bp-8],7684	;1e04H	;tempval
	*** 00523e	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0
;|***   for(i=0;i<14;i++)
; Line 2109
	*** 005243	c7 46 f6 00 00 		mov	WORD PTR [bp-10],0	;i
	*** 005248	e9 03 00 		jmp	$F2017
					$FC2018:
	*** 00524b	ff 46 f6 		inc	WORD PTR [bp-10]	;i
					$F2017:
	*** 00524e	83 7e f6 0e 		cmp	WORD PTR [bp-10],14	;000eH	;i
	*** 005252	72 03 			jb	$JCC21074
	*** 005254	e9 58 00 		jmp	$FB2019
					$JCC21074:
;|***     {
; Line 2110
;|***     curval = 0;
; Line 2111
	*** 005257	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;curval
;|***     curval = (char)(tempval&0x1)<<2;  //set bit
; Line 2112
	*** 00525c	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;tempval
	*** 00525f	24 01 			and	al,1
	*** 005261	98 			cbw	
	*** 005262	c1 e0 02 		shl	ax,2
	*** 005265	89 46 fc 		mov	WORD PTR [bp-4],ax	;curval
;|***     outp(base+PVR,curval);
; Line 2113
	*** 005268	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 00526b	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 00526e	05 1c 00 		add	ax,28	;001cH
	*** 005271	50 			push	ax
	*** 005272	9a 00 00 00 00 		call	FAR PTR _outp
	*** 005277	83 c4 04 		add	sp,4
;|***     curval = curval |0x02;    //force rising edge
; Line 2114
	*** 00527a	83 4e fc 02 		or	WORD PTR [bp-4],2	;curval
;|***     outp(base+PVR,curval);    //clock in data
; Line 2115
	*** 00527e	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 005281	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 005284	05 1c 00 		add	ax,28	;001cH
	*** 005287	50 			push	ax
	*** 005288	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00528d	83 c4 04 		add	sp,4
;|***     curval = curval &0x04;    //force falling edge
; Line 2116
	*** 005290	83 66 fc 04 		and	WORD PTR [bp-4],4	;curval
;|***     outp(base+PVR,curval);    //set clock low
; Line 2117
	*** 005294	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 005297	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 00529a	05 1c 00 		add	ax,28	;001cH
	*** 00529d	50 			push	ax
	*** 00529e	9a 00 00 00 00 		call	FAR PTR _outp
	*** 0052a3	83 c4 04 		add	sp,4
;|***     tempval = tempval >> 1;   //get next bit
; Line 2118
	*** 0052a6	d1 6e fa 		shr	WORD PTR [bp-6],1
	*** 0052a9	d1 5e f8 		rcr	WORD PTR [bp-8],1	;tempval
;|***     }
; Line 2119
	*** 0052ac	e9 9c ff 		jmp	$FC2018
					$FB2019:
;|***   
;|***   //pause for >10ms --should be replaced with a regulation pause routine
;|***   for(i=0;i<32000;i++) inp(0x20);
; Line 2122
	*** 0052af	c7 46 f6 00 00 		mov	WORD PTR [bp-10],0	;i
	*** 0052b4	e9 03 00 		jmp	$F2021
					$FC2022:
	*** 0052b7	ff 46 f6 		inc	WORD PTR [bp-10]	;i
					$F2021:
	*** 0052ba	81 7e f6 00 7d 		cmp	WORD PTR [bp-10],32000	;7d00H	;i
	*** 0052bf	72 03 			jb	$JCC21183
	*** 0052c1	e9 0d 00 		jmp	$FB2023
					$JCC21183:
	*** 0052c4	6a 20 			push	32	;0020H
	*** 0052c6	9a 00 00 00 00 		call	FAR PTR _inp
	*** 0052cb	83 c4 02 		add	sp,2
	*** 0052ce	e9 e6 ff 		jmp	$FC2022
					$FB2023:
;|*** 
;|***   tempval = ENDWRD;        //0x1e00
; Line 2124
	*** 0052d1	c7 46 f8 00 1e 		mov	WORD PTR [bp-8],7680	;1e00H	;tempval
	*** 0052d6	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0
;|***   for(i=0;i<14;i++)
; Line 2125
	*** 0052db	c7 46 f6 00 00 		mov	WORD PTR [bp-10],0	;i
	*** 0052e0	e9 03 00 		jmp	$F2024
					$FC2025:
	*** 0052e3	ff 46 f6 		inc	WORD PTR [bp-10]	;i
					$F2024:
	*** 0052e6	83 7e f6 0e 		cmp	WORD PTR [bp-10],14	;000eH	;i
	*** 0052ea	72 03 			jb	$JCC21226
	*** 0052ec	e9 58 00 		jmp	$FB2026
					$JCC21226:
;|***     {
; Line 2126
;|***     curval = 0;
; Line 2127
	*** 0052ef	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;curval
;|***     curval = (char)(tempval&0x1)<<2;  //set bit
; Line 2128
	*** 0052f4	8a 46 f8 		mov	al,BYTE PTR [bp-8]	;tempval
	*** 0052f7	24 01 			and	al,1
	*** 0052f9	98 			cbw	
	*** 0052fa	c1 e0 02 		shl	ax,2
	*** 0052fd	89 46 fc 		mov	WORD PTR [bp-4],ax	;curval
;|***     outp(base+PVR,curval);
; Line 2129
	*** 005300	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 005303	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 005306	05 1c 00 		add	ax,28	;001cH
	*** 005309	50 			push	ax
	*** 00530a	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00530f	83 c4 04 		add	sp,4
;|***     curval = curval |0x02;    //force rising edge
; Line 2130
	*** 005312	83 4e fc 02 		or	WORD PTR [bp-4],2	;curval
;|***     outp(base+PVR,curval);    //clock in data
; Line 2131
	*** 005316	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 005319	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 00531c	05 1c 00 		add	ax,28	;001cH
	*** 00531f	50 			push	ax
	*** 005320	9a 00 00 00 00 		call	FAR PTR _outp
	*** 005325	83 c4 04 		add	sp,4
;|***     curval = curval &0x04;    //force falling edge
; Line 2132
	*** 005328	83 66 fc 04 		and	WORD PTR [bp-4],4	;curval
;|***     outp(base+PVR,curval);    //set clock low
; Line 2133
	*** 00532c	ff 76 fc 		push	WORD PTR [bp-4]	;curval
	*** 00532f	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;base
	*** 005332	05 1c 00 		add	ax,28	;001cH
	*** 005335	50 			push	ax
	*** 005336	9a 00 00 00 00 		call	FAR PTR _outp
	*** 00533b	83 c4 04 		add	sp,4
;|***     tempval = tempval >> 1;   //get next bit
; Line 2134
	*** 00533e	d1 6e fa 		shr	WORD PTR [bp-6],1
	*** 005341	d1 5e f8 		rcr	WORD PTR [bp-8],1	;tempval
;|***     }
; Line 2135
	*** 005344	e9 9c ff 		jmp	$FC2025
					$FB2026:
;|***   }
; Line 2136
	*** 005347	e9 00 00 		jmp	$EX2004
					$EX2004:
	*** 00534a	5e 			pop	si
	*** 00534b	5f 			pop	di
	*** 00534c	c9 			leave	
	*** 00534d	ca 0c 00 		ret	12	;0000000cH

?set_clock_generator@Cescc@@RECXIKI@Z	ENDP
	PUBLIC	?wait_for_tx@Cescc@@RECII@Z	; Cescc::wait_for_tx
?wait_for_tx@Cescc@@RECII@Z	PROC FAR	; Cescc::wait_for_tx
;|***   
;|***   
;|***   
;|*** unsigned Cescc::wait_for_tx(unsigned port)
;|***   {
; Line 2141
	*** 005350	c8 04 00 00 		enter	4,0
	*** 005354	57 			push	di
	*** 005355	56 			push	si
;	i = -4
;	this = 6
;	port = 10
;|***   unsigned long i = 0;
; Line 2142
	*** 005356	2b c0 			sub	ax,ax
	*** 005358	89 46 fe 		mov	WORD PTR [bp-2],ax
	*** 00535b	89 46 fc 		mov	WORD PTR [bp-4],ax	;i
;|***   if(port_open_list[port]!=0)
; Line 2143
	*** 00535e	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 005361	83 c3 04 		add	bx,4
	*** 005364	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 005367	d1 e6 			shl	si,1
	*** 005369	26 83 38 00 		cmp	WORD PTR es:[bx][si],0
	*** 00536d	75 03 			jne	$JCC21357
	*** 00536f	e9 21 00 		jmp	$I2032
					$JCC21357:
;|***     {
; Line 2144
;|***     while(istxing[port]==1)
; Line 2145
					$FC2034:
	*** 005372	c4 5e 06 		les	bx,DWORD PTR [bp+6]	;this
	*** 005375	81 c3 92 01 		add	bx,402	;0192H
	*** 005379	8b 76 0a 		mov	si,WORD PTR [bp+10]	;port
	*** 00537c	d1 e6 			shl	si,1
	*** 00537e	26 83 38 01 		cmp	WORD PTR es:[bx][si],1
	*** 005382	74 03 			je	$JCC21378
	*** 005384	e9 03 00 		jmp	$FB2035
					$JCC21378:
;|***       {
; Line 2146
;|***       // The screen writes inserted here are a desperation move to avoid
;|***       // system crashes.  Perhaps it is a timing issue and the screen
;|***       // writes provide a small delay.  They do reduce the likelihood
;|***       // of system crashes substantially, but not completely.  The
;|***       // problem may also be due to sporadic misbehavior by the Tech 80
;|***       // motion controllers.  It was noted during development that
;|***       // occasional screen writes eliminated the Tech 80 anomalies.
;|***       // Go figure.  Let me know if you ever solve this problem.  JTM.
;|***       /*if(i++ > 10000000)  // jtm remove for autonomous
;|***         {
;|***         cout << "\t\t\t\t\t\t\t\t\tX\r" << flush;
;|***         return TRUE;
;|***         }
;|***       */  
;|***       }
; Line 2161
	*** 005387	e9 e8 ff 		jmp	$FC2034
					$FB2035:
;|***     return TRUE;
; Line 2162
	*** 00538a	b8 00 00 		mov	ax,0
	*** 00538d	e9 09 00 		jmp	$EX2030
;|***     }
; Line 2163
;|***   else 
; Line 2164
	*** 005390	e9 06 00 		jmp	$I2036
					$I2032:
;|***     {
; Line 2165
;|***     //printf("L\r");
;|***     return FALSE;
; Line 2167
	*** 005393	b8 01 00 		mov	ax,1
	*** 005396	e9 00 00 		jmp	$EX2030
;|***     }
; Line 2168
					$I2036:
;|***   }
; Line 2169
					$EX2030:
	*** 005399	5e 			pop	si
	*** 00539a	5f 			pop	di
	*** 00539b	c9 			leave	
	*** 00539c	ca 06 00 		ret	6

?wait_for_tx@Cescc@@RECII@Z	ENDP
ESCCAUTO_TEXT	ENDS
END
