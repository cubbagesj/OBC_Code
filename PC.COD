;	Static Name Aliases
;
	TITLE   c:\cba\pc.c
	.286p
INCLUDELIB      LLIBCE
INCLUDELIB	OLDNAMES.LIB
PC_TEXT	SEGMENT  WORD PUBLIC 'CODE'
PC_TEXT	ENDS
_DATA	SEGMENT  WORD PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
EXTRN	__AHINCR:FAR
PC_TEXT      SEGMENT
	ASSUME	CS: PC_TEXT
	PUBLIC	_PC_DispChar
_PC_DispChar	PROC FAR
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                          PC SUPPORT FUNCTIONS
;|*** *
;|*** *                        (c) Copyright 1992-1998, Jean J. Labrosse, Plantation, FL
;|*** *                                           All Rights Reserved
;|*** *
;|*** * File : PC.C
;|*** * By   : Jean J. Labrosse
;|*** *********************************************************************************************************
;|*** */
;|*** 
;|*** //#include "includes.h"
;|*** #include "pc.h"
;|*** #include <dos.h>
;|*** 
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                               CONSTANTS
;|*** *********************************************************************************************************
;|*** */
;|*** #define  DISP_BASE                  0xB800       /* Base segment of display (0xB800=VGA, 0xB000=Mono)  */
;|*** #define  DISP_MAX_X                     80       /* Maximum number of columns                          */
;|*** #define  DISP_MAX_Y                     25       /* Maximum number of rows                             */
;|*** 
;|*** #if 0
;|*** 
;|*** #define  TICK_T0_8254_CWR             0x43       /* 8254 PIT Control Word Register address.            */
;|*** #define  TICK_T0_8254_CTR0            0x40       /* 8254 PIT Timer 0 Register address.                 */
;|*** #define  TICK_T0_8254_CTR1            0x41       /* 8254 PIT Timer 1 Register address.                 */
;|*** #define  TICK_T0_8254_CTR2            0x42       /* 8254 PIT Timer 2 Register address.                 */
;|*** 
;|*** #define  TICK_T0_8254_CTR0_MODE3      0x36       /* 8254 PIT Binary Mode 3 for Counter 0 control word. */
;|*** #define  TICK_T0_8254_CTR2_MODE0      0xB0       /* 8254 PIT Binary Mode 0 for Counter 2 control word. */
;|*** #define  TICK_T0_8254_CTR2_LATCH      0x80       /* 8254 PIT Latch command control word                */
;|*** 
;|*** #define  VECT_TICK                    0x08       /* Vector number for 82C54 timer tick                 */
;|*** #define  VECT_DOS_CHAIN               0x81       /* Vector number used to chain DOS                    */
;|*** 
;|*** #endif
;|*** 
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                       LOCAL GLOBAL VARIABLES
;|*** *********************************************************************************************************
;|*** */
;|***              
;|*** //static INT16U    PC_ElapsedOverhead;
;|*** //static jmp_buf   PC_JumpBuf;
;|*** //static BOOLEAN   PC_ExitFlag;
;|*** //void           (*PC_TickISR)(void);
;|*** 
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                           DISPLAY A SINGLE CHARACTER AT 'X' & 'Y' COORDINATE
;|*** *
;|*** * Description : This function writes a single character anywhere on the PC's screen.  This function
;|*** *               writes directly to video RAM instead of using the BIOS for speed reasons.  It assumed 
;|*** *               that the video adapter is VGA compatible.  Video RAM starts at absolute address 
;|*** *               0x000B8000.  Each character on the screen is composed of two bytes: the ASCII character 
;|*** *               to appear on the screen followed by a video attribute.  An attribute of 0x07 displays 
;|*** *               the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : x      corresponds to the desired column on the screen.  Valid columns numbers are from
;|*** *                      0 to 79.  Column 0 corresponds to the leftmost column.
;|*** *               y      corresponds to the desired row on the screen.  Valid row numbers are from 0 to 24.
;|*** *                      Line 0 corresponds to the topmost row.
;|*** *               c      Is the ASCII character to display.  You can also specify a character with a 
;|*** *                      numeric value higher than 128.  In this case, special character based graphics
;|*** *                      will be displayed.
;|*** *               color  specifies the foreground/background color to use (see PC.H for available choices)
;|*** *                      and whether the character will blink or not.
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void PC_DispChar (INT8U x, INT8U y, INT8U c, INT8U color)
;|*** {
; Line 79
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	x = 6
;	y = 8
;	c = 10
;	color = 12
;	pscr = -4
;	offset = -6
;|***     INT8U  far *pscr;
;|***     INT16U      offset;
;|*** 
;|*** 
;|***     offset  = (INT16U)y * DISP_MAX_X * 2 + (INT16U)x * 2;  /* Calculate position on the screen         */
;|***     pscr    = (INT8U far *)MK_FP(DISP_BASE, offset);
;|***     *pscr++ = c;                                           /* Put character in video RAM               */
; Line 86
	*** 000003	8a 46 0a 		mov	al,BYTE PTR [bp+10]	;c
	*** 000006	8a 4e 08 		mov	cl,BYTE PTR [bp+8]	;y
	*** 000009	2a ed 			sub	ch,ch
	*** 00000b	6b d9 50 		imul	bx,cx,80	;0050H
	*** 00000e	8a 4e 06 		mov	cl,BYTE PTR [bp+6]	;x
	*** 000011	03 d9 			add	bx,cx
	*** 000013	03 db 			add	bx,bx
	*** 000015	2b c9 			sub	cx,cx
	*** 000017	2b d9 			sub	bx,cx
	*** 000019	81 d9 00 48 		sbb	cx,18432	;4800H
	*** 00001d	8e c1 			mov	es,cx
	*** 00001f	26 88 07 		mov	BYTE PTR es:[bx],al
;|***     *pscr   = color;                                       /* Put video attribute in video RAM         */
; Line 87
	*** 000022	8a 46 0c 		mov	al,BYTE PTR [bp+12]	;color
	*** 000025	26 88 47 01 		mov	BYTE PTR es:[bx+1],al
;|*** }
; Line 88
	*** 000029	c9 			leave	
	*** 00002a	cb 			ret	
	*** 00002b	90 			nop	

_PC_DispChar	ENDP
	PUBLIC	_PC_DispClrCol
_PC_DispClrCol	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                            CLEAR A COLUMN
;|*** *
;|*** * Description : This function clears one of the 80 columns on the PC's screen by directly accessing video 
;|*** *               RAM instead of using the BIOS.  It assumed that the video adapter is VGA compatible.  
;|*** *               Video RAM starts at absolute address 0x000B8000.  Each character on the screen is 
;|*** *               composed of two bytes: the ASCII character to appear on the screen followed by a video 
;|*** *               attribute.  An attribute of 0x07 displays the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : x            corresponds to the desired column to clear.  Valid column numbers are from 
;|*** *                            0 to 79.  Column 0 corresponds to the leftmost column.
;|*** *
;|*** *               color        specifies the foreground/background color combination to use 
;|*** *                            (see PC.H for available choices)
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispClrCol (INT8U x, INT8U color)
;|*** {
; Line 110
	*** 00002c	55 			push	bp
	*** 00002d	8b ec 			mov	bp,sp
	*** 00002f	57 			push	di
	*** 000030	56 			push	si
;	x = 6
;	color = 8
;	register si = pscr
;	i = -6
;|***     INT8U far *pscr;
;|***     INT8U      i;
;|*** 
;|*** 
;|***     pscr = (INT8U far *)MK_FP(DISP_BASE, (INT16U)x * 2);
; Line 115
	*** 000031	8a 46 06 		mov	al,BYTE PTR [bp+6]	;x
	*** 000034	2a e4 			sub	ah,ah
	*** 000036	2b d2 			sub	dx,dx
	*** 000038	2b c2 			sub	ax,dx
	*** 00003a	81 da 00 24 		sbb	dx,9216	;2400H
	*** 00003e	03 c0 			add	ax,ax
	*** 000040	13 d2 			adc	dx,dx
	*** 000042	8b f0 			mov	si,ax
	*** 000044	8e da 			mov	ds,dx
	ASSUME DS: NOTHING
	*** 000046	bf 19 00 		mov	di,25	;0019H
;|***     for (i = 0; i < DISP_MAX_Y; i++) {
; Line 116
					$F290:
;|***         *pscr++ = ' ';                           /* Put ' ' character in video RAM                     */
; Line 117
	*** 000049	c6 04 20 		mov	BYTE PTR [si],32	;0020H
	*** 00004c	46 			inc	si
;|***         *pscr   = color;                         /* Put video attribute in video RAM                   */
; Line 118
	*** 00004d	8a 46 08 		mov	al,BYTE PTR [bp+8]	;color
	*** 000050	88 04 			mov	BYTE PTR [si],al
	*** 000052	81 c6 a0 00 		add	si,160	;00a0H
	*** 000056	4f 			dec	di
	*** 000057	75 f0 			jne	$F290
;|***         pscr    = pscr + DISP_MAX_X * 2;         /* Position on next row                               */
;|***     }
;|*** }
; Line 121
	*** 000059	16 			push	ss
	*** 00005a	1f 			pop	ds
	ASSUME DS: DGROUP
	*** 00005b	5e 			pop	si
	*** 00005c	5f 			pop	di
	*** 00005d	c9 			leave	
	*** 00005e	cb 			ret	
	*** 00005f	90 			nop	

_PC_DispClrCol	ENDP
	PUBLIC	_PC_DispClrRow
_PC_DispClrRow	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                             CLEAR A ROW
;|*** *
;|*** * Description : This function clears one of the 25 lines on the PC's screen by directly accessing video 
;|*** *               RAM instead of using the BIOS.  It assumed that the video adapter is VGA compatible.  
;|*** *               Video RAM starts at absolute address 0x000B8000.  Each character on the screen is 
;|*** *               composed of two bytes: the ASCII character to appear on the screen followed by a video 
;|*** *               attribute.  An attribute of 0x07 displays the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : y            corresponds to the desired row to clear.  Valid row numbers are from 
;|*** *                            0 to 24.  Row 0 corresponds to the topmost line.
;|*** *
;|*** *               color        specifies the foreground/background color combination to use 
;|*** *                            (see PC.H for available choices)
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispClrRow (INT8U y, INT8U color)
;|*** {
; Line 143
	*** 000060	55 			push	bp
	*** 000061	8b ec 			mov	bp,sp
	*** 000063	57 			push	di
	*** 000064	56 			push	si
;	y = 6
;	color = 8
;	register si = pscr
;	i = -6
;|***     INT8U far *pscr;
;|***     INT8U      i;
;|*** 
;|*** 
;|***     pscr = (INT8U far *)MK_FP(DISP_BASE, (INT16U)y * DISP_MAX_X * 2);
; Line 148
	*** 000065	8a 46 06 		mov	al,BYTE PTR [bp+6]	;y
	*** 000068	2a e4 			sub	ah,ah
	*** 00006a	b9 a0 00 		mov	cx,160	;00a0H
	*** 00006d	f7 e1 			mul	cx
	*** 00006f	2d 00 00 		sub	ax,0
	*** 000072	81 da 00 48 		sbb	dx,18432	;4800H
	*** 000076	8b f0 			mov	si,ax
	*** 000078	8e c2 			mov	es,dx
	*** 00007a	bf 50 00 		mov	di,80	;0050H
;|***     for (i = 0; i < DISP_MAX_X; i++) {
; Line 149
					$F300:
;|***         *pscr++ = ' ';                           /* Put ' ' character in video RAM                     */
; Line 150
	*** 00007d	26 c6 04 20 		mov	BYTE PTR es:[si],32	;0020H
	*** 000081	46 			inc	si
;|***         *pscr++ = color;                         /* Put video attribute in video RAM                   */
; Line 151
	*** 000082	8a 46 08 		mov	al,BYTE PTR [bp+8]	;color
	*** 000085	26 88 04 		mov	BYTE PTR es:[si],al
	*** 000088	46 			inc	si
	*** 000089	4f 			dec	di
	*** 00008a	75 f1 			jne	$F300
;|***     }
;|*** }
; Line 153
	*** 00008c	5e 			pop	si
	*** 00008d	5f 			pop	di
	*** 00008e	c9 			leave	
	*** 00008f	cb 			ret	

_PC_DispClrRow	ENDP
	PUBLIC	_PC_DispClrScr
_PC_DispClrScr	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                              CLEAR SCREEN
;|*** *
;|*** * Description : This function clears the PC's screen by directly accessing video RAM instead of using
;|*** *               the BIOS.  It assumed that the video adapter is VGA compatible.  Video RAM starts at
;|*** *               absolute address 0x000B8000.  Each character on the screen is composed of two bytes:
;|*** *               the ASCII character to appear on the screen followed by a video attribute.  An attribute
;|*** *               of 0x07 displays the character in WHITE with a black background.
;|*** *
;|*** * Arguments   : color   specifies the foreground/background color combination to use 
;|*** *                       (see PC.H for available choices)
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispClrScr (INT8U color)
;|*** {
; Line 172
	*** 000090	55 			push	bp
	*** 000091	8b ec 			mov	bp,sp
	*** 000093	56 			push	si
;	color = 6
;	register si = pscr
;	i = -6
;|***     INT8U  far *pscr;
;|***     INT16U      i;
;|*** 
;|*** 
;|***     pscr = (INT8U far *)MK_FP(DISP_BASE, 0x0000);
; Line 177
	*** 000094	33 c0 			xor	ax,ax
	*** 000096	ba 00 b8 		mov	dx,-18432	;b800H
	*** 000099	8b f0 			mov	si,ax
	*** 00009b	8e da 			mov	ds,dx
	ASSUME DS: NOTHING
	*** 00009d	b9 d0 07 		mov	cx,2000	;07d0H
;|***     for (i = 0; i < (DISP_MAX_X * DISP_MAX_Y); i++) { /* PC display has 80 columns and 25 lines        */
; Line 178
					$F308:
;|***         *pscr++ = ' ';                                /* Put ' ' character in video RAM                */
; Line 179
	*** 0000a0	c6 04 20 		mov	BYTE PTR [si],32	;0020H
	*** 0000a3	46 			inc	si
;|***         *pscr++ = color;                              /* Put video attribute in video RAM              */
; Line 180
	*** 0000a4	8a 46 06 		mov	al,BYTE PTR [bp+6]	;color
	*** 0000a7	88 04 			mov	BYTE PTR [si],al
	*** 0000a9	46 			inc	si
	*** 0000aa	49 			dec	cx
	*** 0000ab	75 f3 			jne	$F308
;|***     }
;|*** }
; Line 182
	*** 0000ad	16 			push	ss
	*** 0000ae	1f 			pop	ds
	ASSUME DS: DGROUP
	*** 0000af	5e 			pop	si
	*** 0000b0	c9 			leave	
	*** 0000b1	cb 			ret	

_PC_DispClrScr	ENDP
	PUBLIC	_PC_DispStr
_PC_DispStr	PROC FAR
;|*** /*$PAGE*/
;|*** /*
;|*** *********************************************************************************************************
;|*** *                                 DISPLAY A STRING  AT 'X' & 'Y' COORDINATE
;|*** *
;|*** * Description : This function writes an ASCII string anywhere on the PC's screen.  This function writes
;|*** *               directly to video RAM instead of using the BIOS for speed reasons.  It assumed that the 
;|*** *               video adapter is VGA compatible.  Video RAM starts at absolute address 0x000B8000.  Each 
;|*** *               character on the screen is composed of two bytes: the ASCII character to appear on the 
;|*** *               screen followed by a video attribute.  An attribute of 0x07 displays the character in 
;|*** *               WHITE with a black background.
;|*** *
;|*** * Arguments   : x      corresponds to the desired column on the screen.  Valid columns numbers are from
;|*** *                      0 to 79.  Column 0 corresponds to the leftmost column.
;|*** *               y      corresponds to the desired row on the screen.  Valid row numbers are from 0 to 24.
;|*** *                      Line 0 corresponds to the topmost row.
;|*** *               s      Is the ASCII string to display.  You can also specify a string containing 
;|*** *                      characters with numeric values higher than 128.  In this case, special character 
;|*** *                      based graphics will be displayed.
;|*** *               color  specifies the foreground/background color to use (see PC.H for available choices)
;|*** *                      and whether the characters will blink or not.
;|*** *
;|*** * Returns     : None
;|*** *********************************************************************************************************
;|*** */
;|*** void  __far __cdecl PC_DispStr (INT8U x, INT8U y, INT8U *s, INT8U color)
;|*** {
; Line 209
	*** 0000b2	c8 04 00 00 		enter	4,0
	*** 0000b6	56 			push	si
;	pscr = -4
;	offset = -6
;	x = 6
;	y = 8
;	s = 10
;	color = 14
;|***     INT8U  far *pscr;
;|***     INT16U      offset;
;|*** 
;|*** 
;|***     offset  = (INT16U)y * DISP_MAX_X * 2 + (INT16U)x * 2;   /* Calculate position of 1st character     */
;|***     pscr    = (INT8U far *)MK_FP(DISP_BASE, offset);
; Line 215
	*** 0000b7	b0 50 			mov	al,80	;0050H
	*** 0000b9	f6 66 08 		mul	BYTE PTR [bp+8]	;y
	*** 0000bc	8a 4e 06 		mov	cl,BYTE PTR [bp+6]	;x
	*** 0000bf	2a ed 			sub	ch,ch
	*** 0000c1	03 c1 			add	ax,cx
	*** 0000c3	03 c0 			add	ax,ax
	*** 0000c5	2b d2 			sub	dx,dx
	*** 0000c7	2b c2 			sub	ax,dx
	*** 0000c9	81 da 00 48 		sbb	dx,18432	;4800H
	*** 0000cd	8b f0 			mov	si,ax
	*** 0000cf	89 56 fe 		mov	WORD PTR [bp-2],dx
;|***     while (*s) {
; Line 216
	*** 0000d2	c4 5e 0a 		les	bx,DWORD PTR [bp+10]	;s
	*** 0000d5	26 38 2f 		cmp	BYTE PTR es:[bx],ch
	*** 0000d8	74 31 			je	$EX319
					$FC323:
;|***         *pscr++ = *s++;                                     /* Put character in video RAM              */
; Line 217
	*** 0000da	26 8a 07 		mov	al,BYTE PTR es:[bx]
	*** 0000dd	8e c2 			mov	es,dx
	*** 0000df	26 88 04 		mov	BYTE PTR es:[si],al
;|***         *pscr++ = color;                                    /* Put video attribute in video RAM        */
; Line 218
	*** 0000e2	8a 46 0e 		mov	al,BYTE PTR [bp+14]	;color
	*** 0000e5	46 			inc	si
	*** 0000e6	8e 46 fe 		mov	es,WORD PTR [bp-2]
	*** 0000e9	26 88 04 		mov	BYTE PTR es:[si],al
	*** 0000ec	8b c6 			mov	ax,si
	*** 0000ee	8c c2 			mov	dx,es
	*** 0000f0	40 			inc	ax
	*** 0000f1	8b f0 			mov	si,ax
	*** 0000f3	8c 46 fe 		mov	WORD PTR [bp-2],es
;|***     }
; Line 219
	*** 0000f6	83 46 0a 01 		add	WORD PTR [bp+10],1	;s
	*** 0000fa	1b c0 			sbb	ax,ax
	*** 0000fc	25 00 00 		and	ax,OFFSET __AHINCR
	*** 0000ff	01 46 0c 		add	WORD PTR [bp+12],ax
	*** 000102	c4 5e 0a 		les	bx,DWORD PTR [bp+10]	;s
	*** 000105	26 80 3f 00 		cmp	BYTE PTR es:[bx],0
	*** 000109	75 cf 			jne	$FC323
;|*** }
; Line 220
					$EX319:
	*** 00010b	5e 			pop	si
	*** 00010c	c9 			leave	
	*** 00010d	cb 			ret	

_PC_DispStr	ENDP
PC_TEXT	ENDS
END
;|*** 
